"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjimipulsar_github_com"] = self["webpackChunkjimipulsar_github_com"] || []).push([["node_modules_rollup_dist_es_rollup_js"],{

/***/ "./node_modules/rollup/dist/es/rollup.js":
/*!***********************************************!*\
  !*** ./node_modules/rollup/dist/es/rollup.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* reexport safe */ _shared_node_entry_js__WEBPACK_IMPORTED_MODULE_0__.version),\n/* harmony export */   defineConfig: () => (/* reexport safe */ _shared_node_entry_js__WEBPACK_IMPORTED_MODULE_0__.defineConfig),\n/* harmony export */   rollup: () => (/* reexport safe */ _shared_node_entry_js__WEBPACK_IMPORTED_MODULE_0__.rollup),\n/* harmony export */   watch: () => (/* reexport safe */ _shared_node_entry_js__WEBPACK_IMPORTED_MODULE_0__.watch)\n/* harmony export */ });\n/* harmony import */ var _shared_node_entry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared/node-entry.js */ \"./node_modules/rollup/dist/es/shared/node-entry.js\");\n/* harmony import */ var _shared_parseAst_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/parseAst.js */ \"./node_modules/rollup/dist/es/shared/parseAst.js\");\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../native.js */ \"./node_modules/rollup/dist/native.js\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:path */ \"node:path\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_perf_hooks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'tty'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/*\n  @license\n\tRollup.js v4.26.0\n\tWed, 13 Nov 2024 06:44:29 GMT - commit ae1d14b7855ff6568a6697d37271a5eb4d8e2d3e\n\n\thttps://github.com/rollup/rollup\n\n\tReleased under the MIT License.\n*/\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcm9sbHVwL2Rpc3QvZXMvcm9sbHVwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ3lGO0FBQzNEO0FBQ1I7QUFDSDtBQUNMO0FBQ1E7QUFDRztBQUNDO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaW1pcHVsc2FyQGdpdGh1Yi5jb20vLi9ub2RlX21vZHVsZXMvcm9sbHVwL2Rpc3QvZXMvcm9sbHVwLmpzP2RiNTciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgQGxpY2Vuc2Vcblx0Um9sbHVwLmpzIHY0LjI2LjBcblx0V2VkLCAxMyBOb3YgMjAyNCAwNjo0NDoyOSBHTVQgLSBjb21taXQgYWUxZDE0Yjc4NTVmZjY1NjhhNjY5N2QzNzI3MWE1ZWI0ZDhlMmQzZVxuXG5cdGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwXG5cblx0UmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuKi9cbmV4cG9ydCB7IHZlcnNpb24gYXMgVkVSU0lPTiwgZGVmaW5lQ29uZmlnLCByb2xsdXAsIHdhdGNoIH0gZnJvbSAnLi9zaGFyZWQvbm9kZS1lbnRyeS5qcyc7XG5pbXBvcnQgJy4vc2hhcmVkL3BhcnNlQXN0LmpzJztcbmltcG9ydCAnLi4vbmF0aXZlLmpzJztcbmltcG9ydCAnbm9kZTpwYXRoJztcbmltcG9ydCAncGF0aCc7XG5pbXBvcnQgJ25vZGU6cHJvY2Vzcyc7XG5pbXBvcnQgJ25vZGU6cGVyZl9ob29rcyc7XG5pbXBvcnQgJ25vZGU6ZnMvcHJvbWlzZXMnO1xuaW1wb3J0ICd0dHknO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rollup/dist/es/rollup.js\n");

/***/ }),

/***/ "./node_modules/rollup/dist/es/shared/node-entry.js":
/*!**********************************************************!*\
  !*** ./node_modules/rollup/dist/es/shared/node-entry.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFilter: () => (/* binding */ createFilter),\n/* harmony export */   defineConfig: () => (/* binding */ defineConfig),\n/* harmony export */   fseventsImporter: () => (/* binding */ fseventsImporter),\n/* harmony export */   getAugmentedNamespace: () => (/* binding */ getAugmentedNamespace),\n/* harmony export */   getDefaultExportFromCjs: () => (/* binding */ getDefaultExportFromCjs),\n/* harmony export */   rollup: () => (/* binding */ rollup),\n/* harmony export */   rollupInternal: () => (/* binding */ rollupInternal),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   watch: () => (/* binding */ watch)\n/* harmony export */ });\n/* harmony import */ var _parseAst_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parseAst.js */ \"./node_modules/rollup/dist/es/shared/parseAst.js\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../native.js */ \"./node_modules/rollup/dist/native.js\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_perf_hooks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'tty'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ \"./node_modules/process/browser.js\");\n/*\n  @license\n\tRollup.js v4.26.0\n\tWed, 13 Nov 2024 06:44:29 GMT - commit ae1d14b7855ff6568a6697d37271a5eb4d8e2d3e\n\n\thttps://github.com/rollup/rollup\n\n\tReleased under the MIT License.\n*/\n\n\n\n\n\n\n\n\n\nvar version = \"4.26.0\";\n\nconst comma = ','.charCodeAt(0);\nconst semicolon = ';'.charCodeAt(0);\nconst chars$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst intToChar = new Uint8Array(64); // 64 possible chars.\nconst charToInt = new Uint8Array(128); // z is 122 in ASCII\nfor (let i = 0; i < chars$1.length; i++) {\n    const c = chars$1.charCodeAt(i);\n    intToChar[i] = c;\n    charToInt[c] = i;\n}\nfunction decodeInteger(reader, relative) {\n    let value = 0;\n    let shift = 0;\n    let integer = 0;\n    do {\n        const c = reader.next();\n        integer = charToInt[c];\n        value |= (integer & 31) << shift;\n        shift += 5;\n    } while (integer & 32);\n    const shouldNegate = value & 1;\n    value >>>= 1;\n    if (shouldNegate) {\n        value = -0x80000000 | -value;\n    }\n    return relative + value;\n}\nfunction encodeInteger(builder, num, relative) {\n    let delta = num - relative;\n    delta = delta < 0 ? (-delta << 1) | 1 : delta << 1;\n    do {\n        let clamped = delta & 0b011111;\n        delta >>>= 5;\n        if (delta > 0)\n            clamped |= 0b100000;\n        builder.write(intToChar[clamped]);\n    } while (delta > 0);\n    return num;\n}\nfunction hasMoreVlq(reader, max) {\n    if (reader.pos >= max)\n        return false;\n    return reader.peek() !== comma;\n}\n\nconst bufLength = 1024 * 16;\n// Provide a fallback for older environments.\nconst td = typeof TextDecoder !== 'undefined'\n    ? /* #__PURE__ */ new TextDecoder()\n    : typeof Buffer !== 'undefined'\n        ? {\n            decode(buf) {\n                const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n                return out.toString();\n            },\n        }\n        : {\n            decode(buf) {\n                let out = '';\n                for (let i = 0; i < buf.length; i++) {\n                    out += String.fromCharCode(buf[i]);\n                }\n                return out;\n            },\n        };\nclass StringWriter {\n    constructor() {\n        this.pos = 0;\n        this.out = '';\n        this.buffer = new Uint8Array(bufLength);\n    }\n    write(v) {\n        const { buffer } = this;\n        buffer[this.pos++] = v;\n        if (this.pos === bufLength) {\n            this.out += td.decode(buffer);\n            this.pos = 0;\n        }\n    }\n    flush() {\n        const { buffer, out, pos } = this;\n        return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;\n    }\n}\nclass StringReader {\n    constructor(buffer) {\n        this.pos = 0;\n        this.buffer = buffer;\n    }\n    next() {\n        return this.buffer.charCodeAt(this.pos++);\n    }\n    peek() {\n        return this.buffer.charCodeAt(this.pos);\n    }\n    indexOf(char) {\n        const { buffer, pos } = this;\n        const idx = buffer.indexOf(char, pos);\n        return idx === -1 ? buffer.length : idx;\n    }\n}\n\nfunction decode(mappings) {\n    const { length } = mappings;\n    const reader = new StringReader(mappings);\n    const decoded = [];\n    let genColumn = 0;\n    let sourcesIndex = 0;\n    let sourceLine = 0;\n    let sourceColumn = 0;\n    let namesIndex = 0;\n    do {\n        const semi = reader.indexOf(';');\n        const line = [];\n        let sorted = true;\n        let lastCol = 0;\n        genColumn = 0;\n        while (reader.pos < semi) {\n            let seg;\n            genColumn = decodeInteger(reader, genColumn);\n            if (genColumn < lastCol)\n                sorted = false;\n            lastCol = genColumn;\n            if (hasMoreVlq(reader, semi)) {\n                sourcesIndex = decodeInteger(reader, sourcesIndex);\n                sourceLine = decodeInteger(reader, sourceLine);\n                sourceColumn = decodeInteger(reader, sourceColumn);\n                if (hasMoreVlq(reader, semi)) {\n                    namesIndex = decodeInteger(reader, namesIndex);\n                    seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex];\n                }\n                else {\n                    seg = [genColumn, sourcesIndex, sourceLine, sourceColumn];\n                }\n            }\n            else {\n                seg = [genColumn];\n            }\n            line.push(seg);\n            reader.pos++;\n        }\n        if (!sorted)\n            sort(line);\n        decoded.push(line);\n        reader.pos = semi + 1;\n    } while (reader.pos <= length);\n    return decoded;\n}\nfunction sort(line) {\n    line.sort(sortComparator);\n}\nfunction sortComparator(a, b) {\n    return a[0] - b[0];\n}\nfunction encode(decoded) {\n    const writer = new StringWriter();\n    let sourcesIndex = 0;\n    let sourceLine = 0;\n    let sourceColumn = 0;\n    let namesIndex = 0;\n    for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        if (i > 0)\n            writer.write(semicolon);\n        if (line.length === 0)\n            continue;\n        let genColumn = 0;\n        for (let j = 0; j < line.length; j++) {\n            const segment = line[j];\n            if (j > 0)\n                writer.write(comma);\n            genColumn = encodeInteger(writer, segment[0], genColumn);\n            if (segment.length === 1)\n                continue;\n            sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex);\n            sourceLine = encodeInteger(writer, segment[2], sourceLine);\n            sourceColumn = encodeInteger(writer, segment[3], sourceColumn);\n            if (segment.length === 4)\n                continue;\n            namesIndex = encodeInteger(writer, segment[4], namesIndex);\n        }\n    }\n    return writer.flush();\n}\n\nclass BitSet {\n\tconstructor(arg) {\n\t\tthis.bits = arg instanceof BitSet ? arg.bits.slice() : [];\n\t}\n\n\tadd(n) {\n\t\tthis.bits[n >> 5] |= 1 << (n & 31);\n\t}\n\n\thas(n) {\n\t\treturn !!(this.bits[n >> 5] & (1 << (n & 31)));\n\t}\n}\n\nlet Chunk$1 = class Chunk {\n\tconstructor(start, end, content) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.original = content;\n\n\t\tthis.intro = '';\n\t\tthis.outro = '';\n\n\t\tthis.content = content;\n\t\tthis.storeName = false;\n\t\tthis.edited = false;\n\n\t\t{\n\t\t\tthis.previous = null;\n\t\t\tthis.next = null;\n\t\t}\n\t}\n\n\tappendLeft(content) {\n\t\tthis.outro += content;\n\t}\n\n\tappendRight(content) {\n\t\tthis.intro = this.intro + content;\n\t}\n\n\tclone() {\n\t\tconst chunk = new Chunk(this.start, this.end, this.original);\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t}\n\n\tcontains(index) {\n\t\treturn this.start < index && index < this.end;\n\t}\n\n\teachNext(fn) {\n\t\tlet chunk = this;\n\t\twhile (chunk) {\n\t\t\tfn(chunk);\n\t\t\tchunk = chunk.next;\n\t\t}\n\t}\n\n\teachPrevious(fn) {\n\t\tlet chunk = this;\n\t\twhile (chunk) {\n\t\t\tfn(chunk);\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t}\n\n\tedit(content, storeName, contentOnly) {\n\t\tthis.content = content;\n\t\tif (!contentOnly) {\n\t\t\tthis.intro = '';\n\t\t\tthis.outro = '';\n\t\t}\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t}\n\n\tprependLeft(content) {\n\t\tthis.outro = content + this.outro;\n\t}\n\n\tprependRight(content) {\n\t\tthis.intro = content + this.intro;\n\t}\n\n\treset() {\n\t\tthis.intro = '';\n\t\tthis.outro = '';\n\t\tif (this.edited) {\n\t\t\tthis.content = this.original;\n\t\t\tthis.storeName = false;\n\t\t\tthis.edited = false;\n\t\t}\n\t}\n\n\tsplit(index) {\n\t\tconst sliceIndex = index - this.start;\n\n\t\tconst originalBefore = this.original.slice(0, sliceIndex);\n\t\tconst originalAfter = this.original.slice(sliceIndex);\n\n\t\tthis.original = originalBefore;\n\n\t\tconst newChunk = new Chunk(index, this.end, originalAfter);\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif (this.edited) {\n\t\t\t// after split we should save the edit content record into the correct chunk\n\t\t\t// to make sure sourcemap correct\n\t\t\t// For example:\n\t\t\t// '  test'.trim()\n\t\t\t//     split   -> '  ' + 'test'\n\t\t\t//   ✔️ edit    -> '' + 'test'\n\t\t\t//   ✖️ edit    -> 'test' + '' \n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit('', false);\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif (newChunk.next) newChunk.next.previous = newChunk;\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t}\n\n\ttoString() {\n\t\treturn this.intro + this.content + this.outro;\n\t}\n\n\ttrimEnd(rx) {\n\t\tthis.outro = this.outro.replace(rx, '');\n\t\tif (this.outro.length) return true;\n\n\t\tconst trimmed = this.content.replace(rx, '');\n\n\t\tif (trimmed.length) {\n\t\t\tif (trimmed !== this.content) {\n\t\t\t\tthis.split(this.start + trimmed.length).edit('', undefined, true);\n\t\t\t\tif (this.edited) {\n\t\t\t\t\t// save the change, if it has been edited\n\t\t\t\t\tthis.edit(trimmed, this.storeName, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit('', undefined, true);\n\n\t\t\tthis.intro = this.intro.replace(rx, '');\n\t\t\tif (this.intro.length) return true;\n\t\t}\n\t}\n\n\ttrimStart(rx) {\n\t\tthis.intro = this.intro.replace(rx, '');\n\t\tif (this.intro.length) return true;\n\n\t\tconst trimmed = this.content.replace(rx, '');\n\n\t\tif (trimmed.length) {\n\t\t\tif (trimmed !== this.content) {\n\t\t\t\tconst newChunk = this.split(this.end - trimmed.length);\n\t\t\t\tif (this.edited) {\n\t\t\t\t\t// save the change, if it has been edited\n\t\t\t\t\tnewChunk.edit(trimmed, this.storeName, true);\n\t\t\t\t}\n\t\t\t\tthis.edit('', undefined, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit('', undefined, true);\n\n\t\t\tthis.outro = this.outro.replace(rx, '');\n\t\t\tif (this.outro.length) return true;\n\t\t}\n\t}\n};\n\nfunction getBtoa() {\n\tif (typeof globalThis !== 'undefined' && typeof globalThis.btoa === 'function') {\n\t\treturn (str) => globalThis.btoa(unescape(encodeURIComponent(str)));\n\t} else if (typeof Buffer === 'function') {\n\t\treturn (str) => Buffer.from(str, 'utf-8').toString('base64');\n\t} else {\n\t\treturn () => {\n\t\t\tthrow new Error('Unsupported environment: `window.btoa` or `Buffer` should be supported.');\n\t\t};\n\t}\n}\n\nconst btoa = /*#__PURE__*/ getBtoa();\n\nclass SourceMap {\n\tconstructor(properties) {\n\t\tthis.version = 3;\n\t\tthis.file = properties.file;\n\t\tthis.sources = properties.sources;\n\t\tthis.sourcesContent = properties.sourcesContent;\n\t\tthis.names = properties.names;\n\t\tthis.mappings = encode(properties.mappings);\n\t\tif (typeof properties.x_google_ignoreList !== 'undefined') {\n\t\t\tthis.x_google_ignoreList = properties.x_google_ignoreList;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this);\n\t}\n\n\ttoUrl() {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa(this.toString());\n\t}\n}\n\nfunction guessIndent(code) {\n\tconst lines = code.split('\\n');\n\n\tconst tabbed = lines.filter((line) => /^\\t+/.test(line));\n\tconst spaced = lines.filter((line) => /^ {2,}/.test(line));\n\n\tif (tabbed.length === 0 && spaced.length === 0) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif (tabbed.length >= spaced.length) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tconst min = spaced.reduce((previous, current) => {\n\t\tconst numSpaces = /^ +/.exec(current)[0].length;\n\t\treturn Math.min(numSpaces, previous);\n\t}, Infinity);\n\n\treturn new Array(min + 1).join(' ');\n}\n\nfunction getRelativePath(from, to) {\n\tconst fromParts = from.split(/[/\\\\]/);\n\tconst toParts = to.split(/[/\\\\]/);\n\n\tfromParts.pop(); // get dirname\n\n\twhile (fromParts[0] === toParts[0]) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif (fromParts.length) {\n\t\tlet i = fromParts.length;\n\t\twhile (i--) fromParts[i] = '..';\n\t}\n\n\treturn fromParts.concat(toParts).join('/');\n}\n\nconst toString = Object.prototype.toString;\n\nfunction isObject(thing) {\n\treturn toString.call(thing) === '[object Object]';\n}\n\nfunction getLocator(source) {\n\tconst originalLines = source.split('\\n');\n\tconst lineOffsets = [];\n\n\tfor (let i = 0, pos = 0; i < originalLines.length; i++) {\n\t\tlineOffsets.push(pos);\n\t\tpos += originalLines[i].length + 1;\n\t}\n\n\treturn function locate(index) {\n\t\tlet i = 0;\n\t\tlet j = lineOffsets.length;\n\t\twhile (i < j) {\n\t\t\tconst m = (i + j) >> 1;\n\t\t\tif (index < lineOffsets[m]) {\n\t\t\t\tj = m;\n\t\t\t} else {\n\t\t\t\ti = m + 1;\n\t\t\t}\n\t\t}\n\t\tconst line = i - 1;\n\t\tconst column = index - lineOffsets[line];\n\t\treturn { line, column };\n\t};\n}\n\nconst wordRegex = /\\w/;\n\nclass Mappings {\n\tconstructor(hires) {\n\t\tthis.hires = hires;\n\t\tthis.generatedCodeLine = 0;\n\t\tthis.generatedCodeColumn = 0;\n\t\tthis.raw = [];\n\t\tthis.rawSegments = this.raw[this.generatedCodeLine] = [];\n\t\tthis.pending = null;\n\t}\n\n\taddEdit(sourceIndex, content, loc, nameIndex) {\n\t\tif (content.length) {\n\t\t\tconst contentLengthMinusOne = content.length - 1;\n\t\t\tlet contentLineEnd = content.indexOf('\\n', 0);\n\t\t\tlet previousContentLineEnd = -1;\n\t\t\t// Loop through each line in the content and add a segment, but stop if the last line is empty,\n\t\t\t// else code afterwards would fill one line too many\n\t\t\twhile (contentLineEnd >= 0 && contentLengthMinusOne > contentLineEnd) {\n\t\t\t\tconst segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];\n\t\t\t\tif (nameIndex >= 0) {\n\t\t\t\t\tsegment.push(nameIndex);\n\t\t\t\t}\n\t\t\t\tthis.rawSegments.push(segment);\n\n\t\t\t\tthis.generatedCodeLine += 1;\n\t\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\t\tthis.generatedCodeColumn = 0;\n\n\t\t\t\tpreviousContentLineEnd = contentLineEnd;\n\t\t\t\tcontentLineEnd = content.indexOf('\\n', contentLineEnd + 1);\n\t\t\t}\n\n\t\t\tconst segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];\n\t\t\tif (nameIndex >= 0) {\n\t\t\t\tsegment.push(nameIndex);\n\t\t\t}\n\t\t\tthis.rawSegments.push(segment);\n\n\t\t\tthis.advance(content.slice(previousContentLineEnd + 1));\n\t\t} else if (this.pending) {\n\t\t\tthis.rawSegments.push(this.pending);\n\t\t\tthis.advance(content);\n\t\t}\n\n\t\tthis.pending = null;\n\t}\n\n\taddUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {\n\t\tlet originalCharIndex = chunk.start;\n\t\tlet first = true;\n\t\t// when iterating each char, check if it's in a word boundary\n\t\tlet charInHiresBoundary = false;\n\n\t\twhile (originalCharIndex < chunk.end) {\n\t\t\tif (original[originalCharIndex] === '\\n') {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tthis.generatedCodeLine += 1;\n\t\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\t\tthis.generatedCodeColumn = 0;\n\t\t\t\tfirst = true;\n\t\t\t} else {\n\t\t\t\tif (this.hires || first || sourcemapLocations.has(originalCharIndex)) {\n\t\t\t\t\tconst segment = [this.generatedCodeColumn, sourceIndex, loc.line, loc.column];\n\n\t\t\t\t\tif (this.hires === 'boundary') {\n\t\t\t\t\t\t// in hires \"boundary\", group segments per word boundary than per char\n\t\t\t\t\t\tif (wordRegex.test(original[originalCharIndex])) {\n\t\t\t\t\t\t\t// for first char in the boundary found, start the boundary by pushing a segment\n\t\t\t\t\t\t\tif (!charInHiresBoundary) {\n\t\t\t\t\t\t\t\tthis.rawSegments.push(segment);\n\t\t\t\t\t\t\t\tcharInHiresBoundary = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// for non-word char, end the boundary by pushing a segment\n\t\t\t\t\t\t\tthis.rawSegments.push(segment);\n\t\t\t\t\t\t\tcharInHiresBoundary = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.rawSegments.push(segment);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tloc.column += 1;\n\t\t\t\tthis.generatedCodeColumn += 1;\n\t\t\t\tfirst = false;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t}\n\n\t\tthis.pending = null;\n\t}\n\n\tadvance(str) {\n\t\tif (!str) return;\n\n\t\tconst lines = str.split('\\n');\n\n\t\tif (lines.length > 1) {\n\t\t\tfor (let i = 0; i < lines.length - 1; i++) {\n\t\t\t\tthis.generatedCodeLine++;\n\t\t\t\tthis.raw[this.generatedCodeLine] = this.rawSegments = [];\n\t\t\t}\n\t\t\tthis.generatedCodeColumn = 0;\n\t\t}\n\n\t\tthis.generatedCodeColumn += lines[lines.length - 1].length;\n\t}\n}\n\nconst n = '\\n';\n\nconst warned = {\n\tinsertLeft: false,\n\tinsertRight: false,\n\tstoreName: false,\n};\n\nclass MagicString {\n\tconstructor(string, options = {}) {\n\t\tconst chunk = new Chunk$1(0, string.length, string);\n\n\t\tObject.defineProperties(this, {\n\t\t\toriginal: { writable: true, value: string },\n\t\t\toutro: { writable: true, value: '' },\n\t\t\tintro: { writable: true, value: '' },\n\t\t\tfirstChunk: { writable: true, value: chunk },\n\t\t\tlastChunk: { writable: true, value: chunk },\n\t\t\tlastSearchedChunk: { writable: true, value: chunk },\n\t\t\tbyStart: { writable: true, value: {} },\n\t\t\tbyEnd: { writable: true, value: {} },\n\t\t\tfilename: { writable: true, value: options.filename },\n\t\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\t\tsourcemapLocations: { writable: true, value: new BitSet() },\n\t\t\tstoredNames: { writable: true, value: {} },\n\t\t\tindentStr: { writable: true, value: undefined },\n\t\t\tignoreList: { writable: true, value: options.ignoreList },\n\t\t});\n\n\t\tthis.byStart[0] = chunk;\n\t\tthis.byEnd[string.length] = chunk;\n\t}\n\n\taddSourcemapLocation(char) {\n\t\tthis.sourcemapLocations.add(char);\n\t}\n\n\tappend(content) {\n\t\tif (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t}\n\n\tappendLeft(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byEnd[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.appendLeft(content);\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\t\treturn this;\n\t}\n\n\tappendRight(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byStart[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.appendRight(content);\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\tconst cloned = new MagicString(this.original, { filename: this.filename });\n\n\t\tlet originalChunk = this.firstChunk;\n\t\tlet clonedChunk = (cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone());\n\n\t\twhile (originalChunk) {\n\t\t\tcloned.byStart[clonedChunk.start] = clonedChunk;\n\t\t\tcloned.byEnd[clonedChunk.end] = clonedChunk;\n\n\t\t\tconst nextOriginalChunk = originalChunk.next;\n\t\t\tconst nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif (nextClonedChunk) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif (this.indentExclusionRanges) {\n\t\t\tcloned.indentExclusionRanges = this.indentExclusionRanges.slice();\n\t\t}\n\n\t\tcloned.sourcemapLocations = new BitSet(this.sourcemapLocations);\n\n\t\tcloned.intro = this.intro;\n\t\tcloned.outro = this.outro;\n\n\t\treturn cloned;\n\t}\n\n\tgenerateDecodedMap(options) {\n\t\toptions = options || {};\n\n\t\tconst sourceIndex = 0;\n\t\tconst names = Object.keys(this.storedNames);\n\t\tconst mappings = new Mappings(options.hires);\n\n\t\tconst locate = getLocator(this.original);\n\n\t\tif (this.intro) {\n\t\t\tmappings.advance(this.intro);\n\t\t}\n\n\t\tthis.firstChunk.eachNext((chunk) => {\n\t\t\tconst loc = locate(chunk.start);\n\n\t\t\tif (chunk.intro.length) mappings.advance(chunk.intro);\n\n\t\t\tif (chunk.edited) {\n\t\t\t\tmappings.addEdit(\n\t\t\t\t\tsourceIndex,\n\t\t\t\t\tchunk.content,\n\t\t\t\t\tloc,\n\t\t\t\t\tchunk.storeName ? names.indexOf(chunk.original) : -1,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmappings.addUneditedChunk(sourceIndex, chunk, this.original, loc, this.sourcemapLocations);\n\t\t\t}\n\n\t\t\tif (chunk.outro.length) mappings.advance(chunk.outro);\n\t\t});\n\n\t\treturn {\n\t\t\tfile: options.file ? options.file.split(/[/\\\\]/).pop() : undefined,\n\t\t\tsources: [\n\t\t\t\toptions.source ? getRelativePath(options.file || '', options.source) : options.file || '',\n\t\t\t],\n\t\t\tsourcesContent: options.includeContent ? [this.original] : undefined,\n\t\t\tnames,\n\t\t\tmappings: mappings.raw,\n\t\t\tx_google_ignoreList: this.ignoreList ? [sourceIndex] : undefined,\n\t\t};\n\t}\n\n\tgenerateMap(options) {\n\t\treturn new SourceMap(this.generateDecodedMap(options));\n\t}\n\n\t_ensureindentStr() {\n\t\tif (this.indentStr === undefined) {\n\t\t\tthis.indentStr = guessIndent(this.original);\n\t\t}\n\t}\n\n\t_getRawIndentString() {\n\t\tthis._ensureindentStr();\n\t\treturn this.indentStr;\n\t}\n\n\tgetIndentString() {\n\t\tthis._ensureindentStr();\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t}\n\n\tindent(indentStr, options) {\n\t\tconst pattern = /^[^\\r\\n]/gm;\n\n\t\tif (isObject(indentStr)) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tif (indentStr === undefined) {\n\t\t\tthis._ensureindentStr();\n\t\t\tindentStr = this.indentStr || '\\t';\n\t\t}\n\n\t\tif (indentStr === '') return this; // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tconst isExcluded = {};\n\n\t\tif (options.exclude) {\n\t\t\tconst exclusions =\n\t\t\t\ttypeof options.exclude[0] === 'number' ? [options.exclude] : options.exclude;\n\t\t\texclusions.forEach((exclusion) => {\n\t\t\t\tfor (let i = exclusion[0]; i < exclusion[1]; i += 1) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet shouldIndentNextCharacter = options.indentStart !== false;\n\t\tconst replacer = (match) => {\n\t\t\tif (shouldIndentNextCharacter) return `${indentStr}${match}`;\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace(pattern, replacer);\n\n\t\tlet charIndex = 0;\n\t\tlet chunk = this.firstChunk;\n\n\t\twhile (chunk) {\n\t\t\tconst end = chunk.end;\n\n\t\t\tif (chunk.edited) {\n\t\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\t\tchunk.content = chunk.content.replace(pattern, replacer);\n\n\t\t\t\t\tif (chunk.content.length) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile (charIndex < end) {\n\t\t\t\t\tif (!isExcluded[charIndex]) {\n\t\t\t\t\t\tconst char = this.original[charIndex];\n\n\t\t\t\t\t\tif (char === '\\n') {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if (char !== '\\r' && shouldIndentNextCharacter) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif (charIndex === chunk.start) {\n\t\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._splitChunk(chunk, charIndex);\n\t\t\t\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t\t\t\t\tchunk.prependRight(indentStr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace(pattern, replacer);\n\n\t\treturn this;\n\t}\n\n\tinsert() {\n\t\tthrow new Error(\n\t\t\t'magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)',\n\t\t);\n\t}\n\n\tinsertLeft(index, content) {\n\t\tif (!warned.insertLeft) {\n\t\t\tconsole.warn(\n\t\t\t\t'magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead',\n\t\t\t); // eslint-disable-line no-console\n\t\t\twarned.insertLeft = true;\n\t\t}\n\n\t\treturn this.appendLeft(index, content);\n\t}\n\n\tinsertRight(index, content) {\n\t\tif (!warned.insertRight) {\n\t\t\tconsole.warn(\n\t\t\t\t'magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead',\n\t\t\t); // eslint-disable-line no-console\n\t\t\twarned.insertRight = true;\n\t\t}\n\n\t\treturn this.prependRight(index, content);\n\t}\n\n\tmove(start, end, index) {\n\t\tif (index >= start && index <= end) throw new Error('Cannot move a selection inside itself');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\t\tthis._split(index);\n\n\t\tconst first = this.byStart[start];\n\t\tconst last = this.byEnd[end];\n\n\t\tconst oldLeft = first.previous;\n\t\tconst oldRight = last.next;\n\n\t\tconst newRight = this.byStart[index];\n\t\tif (!newRight && last === this.lastChunk) return this;\n\t\tconst newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif (oldLeft) oldLeft.next = oldRight;\n\t\tif (oldRight) oldRight.previous = oldLeft;\n\n\t\tif (newLeft) newLeft.next = first;\n\t\tif (newRight) newRight.previous = last;\n\n\t\tif (!first.previous) this.firstChunk = last.next;\n\t\tif (!last.next) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight || null;\n\n\t\tif (!newLeft) this.firstChunk = first;\n\t\tif (!newRight) this.lastChunk = last;\n\t\treturn this;\n\t}\n\n\toverwrite(start, end, content, options) {\n\t\toptions = options || {};\n\t\treturn this.update(start, end, content, { ...options, overwrite: !options.contentOnly });\n\t}\n\n\tupdate(start, end, content, options) {\n\t\tif (typeof content !== 'string') throw new TypeError('replacement content must be a string');\n\n\t\tif (this.original.length !== 0) {\n\t\t\twhile (start < 0) start += this.original.length;\n\t\t\twhile (end < 0) end += this.original.length;\n\t\t}\n\n\t\tif (end > this.original.length) throw new Error('end is out of bounds');\n\t\tif (start === end)\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot overwrite a zero-length range – use appendLeft or prependRight instead',\n\t\t\t);\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\n\t\tif (options === true) {\n\t\t\tif (!warned.storeName) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string',\n\t\t\t\t); // eslint-disable-line no-console\n\t\t\t\twarned.storeName = true;\n\t\t\t}\n\n\t\t\toptions = { storeName: true };\n\t\t}\n\t\tconst storeName = options !== undefined ? options.storeName : false;\n\t\tconst overwrite = options !== undefined ? options.overwrite : false;\n\n\t\tif (storeName) {\n\t\t\tconst original = this.original.slice(start, end);\n\t\t\tObject.defineProperty(this.storedNames, original, {\n\t\t\t\twritable: true,\n\t\t\t\tvalue: true,\n\t\t\t\tenumerable: true,\n\t\t\t});\n\t\t}\n\n\t\tconst first = this.byStart[start];\n\t\tconst last = this.byEnd[end];\n\n\t\tif (first) {\n\t\t\tlet chunk = first;\n\t\t\twhile (chunk !== last) {\n\t\t\t\tif (chunk.next !== this.byStart[chunk.end]) {\n\t\t\t\t\tthrow new Error('Cannot overwrite across a split point');\n\t\t\t\t}\n\t\t\t\tchunk = chunk.next;\n\t\t\t\tchunk.edit('', false);\n\t\t\t}\n\n\t\t\tfirst.edit(content, storeName, !overwrite);\n\t\t} else {\n\t\t\t// must be inserting at the end\n\t\t\tconst newChunk = new Chunk$1(start, end, '').edit(content, storeName);\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\t\treturn this;\n\t}\n\n\tprepend(content) {\n\t\tif (typeof content !== 'string') throw new TypeError('outro content must be a string');\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t}\n\n\tprependLeft(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byEnd[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.prependLeft(content);\n\t\t} else {\n\t\t\tthis.intro = content + this.intro;\n\t\t}\n\t\treturn this;\n\t}\n\n\tprependRight(index, content) {\n\t\tif (typeof content !== 'string') throw new TypeError('inserted content must be a string');\n\n\t\tthis._split(index);\n\n\t\tconst chunk = this.byStart[index];\n\n\t\tif (chunk) {\n\t\t\tchunk.prependRight(content);\n\t\t} else {\n\t\t\tthis.outro = content + this.outro;\n\t\t}\n\t\treturn this;\n\t}\n\n\tremove(start, end) {\n\t\tif (this.original.length !== 0) {\n\t\t\twhile (start < 0) start += this.original.length;\n\t\t\twhile (end < 0) end += this.original.length;\n\t\t}\n\n\t\tif (start === end) return this;\n\n\t\tif (start < 0 || end > this.original.length) throw new Error('Character is out of bounds');\n\t\tif (start > end) throw new Error('end must be greater than start');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\n\t\tlet chunk = this.byStart[start];\n\n\t\twhile (chunk) {\n\t\t\tchunk.intro = '';\n\t\t\tchunk.outro = '';\n\t\t\tchunk.edit('');\n\n\t\t\tchunk = end > chunk.end ? this.byStart[chunk.end] : null;\n\t\t}\n\t\treturn this;\n\t}\n\n\treset(start, end) {\n\t\tif (this.original.length !== 0) {\n\t\t\twhile (start < 0) start += this.original.length;\n\t\t\twhile (end < 0) end += this.original.length;\n\t\t}\n\n\t\tif (start === end) return this;\n\n\t\tif (start < 0 || end > this.original.length) throw new Error('Character is out of bounds');\n\t\tif (start > end) throw new Error('end must be greater than start');\n\n\t\tthis._split(start);\n\t\tthis._split(end);\n\n\t\tlet chunk = this.byStart[start];\n\n\t\twhile (chunk) {\n\t\t\tchunk.reset();\n\n\t\t\tchunk = end > chunk.end ? this.byStart[chunk.end] : null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tlastChar() {\n\t\tif (this.outro.length) return this.outro[this.outro.length - 1];\n\t\tlet chunk = this.lastChunk;\n\t\tdo {\n\t\t\tif (chunk.outro.length) return chunk.outro[chunk.outro.length - 1];\n\t\t\tif (chunk.content.length) return chunk.content[chunk.content.length - 1];\n\t\t\tif (chunk.intro.length) return chunk.intro[chunk.intro.length - 1];\n\t\t} while ((chunk = chunk.previous));\n\t\tif (this.intro.length) return this.intro[this.intro.length - 1];\n\t\treturn '';\n\t}\n\n\tlastLine() {\n\t\tlet lineIndex = this.outro.lastIndexOf(n);\n\t\tif (lineIndex !== -1) return this.outro.substr(lineIndex + 1);\n\t\tlet lineStr = this.outro;\n\t\tlet chunk = this.lastChunk;\n\t\tdo {\n\t\t\tif (chunk.outro.length > 0) {\n\t\t\t\tlineIndex = chunk.outro.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1) return chunk.outro.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.outro + lineStr;\n\t\t\t}\n\n\t\t\tif (chunk.content.length > 0) {\n\t\t\t\tlineIndex = chunk.content.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1) return chunk.content.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.content + lineStr;\n\t\t\t}\n\n\t\t\tif (chunk.intro.length > 0) {\n\t\t\t\tlineIndex = chunk.intro.lastIndexOf(n);\n\t\t\t\tif (lineIndex !== -1) return chunk.intro.substr(lineIndex + 1) + lineStr;\n\t\t\t\tlineStr = chunk.intro + lineStr;\n\t\t\t}\n\t\t} while ((chunk = chunk.previous));\n\t\tlineIndex = this.intro.lastIndexOf(n);\n\t\tif (lineIndex !== -1) return this.intro.substr(lineIndex + 1) + lineStr;\n\t\treturn this.intro + lineStr;\n\t}\n\n\tslice(start = 0, end = this.original.length) {\n\t\tif (this.original.length !== 0) {\n\t\t\twhile (start < 0) start += this.original.length;\n\t\t\twhile (end < 0) end += this.original.length;\n\t\t}\n\n\t\tlet result = '';\n\n\t\t// find start chunk\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk && (chunk.start > start || chunk.end <= start)) {\n\t\t\t// found end chunk before start\n\t\t\tif (chunk.start < end && chunk.end >= end) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif (chunk && chunk.edited && chunk.start !== start)\n\t\t\tthrow new Error(`Cannot use replaced character ${start} as slice start anchor.`);\n\n\t\tconst startChunk = chunk;\n\t\twhile (chunk) {\n\t\t\tif (chunk.intro && (startChunk !== chunk || chunk.start === start)) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tconst containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif (containsEnd && chunk.edited && chunk.end !== end)\n\t\t\t\tthrow new Error(`Cannot use replaced character ${end} as slice end anchor.`);\n\n\t\t\tconst sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tconst sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice(sliceStart, sliceEnd);\n\n\t\t\tif (chunk.outro && (!containsEnd || chunk.end === end)) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif (containsEnd) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// TODO deprecate this? not really very useful\n\tsnip(start, end) {\n\t\tconst clone = this.clone();\n\t\tclone.remove(0, start);\n\t\tclone.remove(end, clone.original.length);\n\n\t\treturn clone;\n\t}\n\n\t_split(index) {\n\t\tif (this.byStart[index] || this.byEnd[index]) return;\n\n\t\tlet chunk = this.lastSearchedChunk;\n\t\tconst searchForward = index > chunk.end;\n\n\t\twhile (chunk) {\n\t\t\tif (chunk.contains(index)) return this._splitChunk(chunk, index);\n\n\t\t\tchunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];\n\t\t}\n\t}\n\n\t_splitChunk(chunk, index) {\n\t\tif (chunk.edited && chunk.content.length) {\n\t\t\t// zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tconst loc = getLocator(this.original)(index);\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot split a chunk that has already been edited (${loc.line}:${loc.column} – \"${chunk.original}\")`,\n\t\t\t);\n\t\t}\n\n\t\tconst newChunk = chunk.split(index);\n\n\t\tthis.byEnd[index] = chunk;\n\t\tthis.byStart[index] = newChunk;\n\t\tthis.byEnd[newChunk.end] = newChunk;\n\n\t\tif (chunk === this.lastChunk) this.lastChunk = newChunk;\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\treturn true;\n\t}\n\n\ttoString() {\n\t\tlet str = this.intro;\n\n\t\tlet chunk = this.firstChunk;\n\t\twhile (chunk) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t}\n\n\tisEmpty() {\n\t\tlet chunk = this.firstChunk;\n\t\tdo {\n\t\t\tif (\n\t\t\t\t(chunk.intro.length && chunk.intro.trim()) ||\n\t\t\t\t(chunk.content.length && chunk.content.trim()) ||\n\t\t\t\t(chunk.outro.length && chunk.outro.trim())\n\t\t\t)\n\t\t\t\treturn false;\n\t\t} while ((chunk = chunk.next));\n\t\treturn true;\n\t}\n\n\tlength() {\n\t\tlet chunk = this.firstChunk;\n\t\tlet length = 0;\n\t\tdo {\n\t\t\tlength += chunk.intro.length + chunk.content.length + chunk.outro.length;\n\t\t} while ((chunk = chunk.next));\n\t\treturn length;\n\t}\n\n\ttrimLines() {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t}\n\n\ttrim(charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t}\n\n\ttrimEndAborted(charType) {\n\t\tconst rx = new RegExp((charType || '\\\\s') + '+$');\n\n\t\tthis.outro = this.outro.replace(rx, '');\n\t\tif (this.outro.length) return true;\n\n\t\tlet chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimEnd(rx);\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif (chunk.end !== end) {\n\t\t\t\tif (this.lastChunk === chunk) {\n\t\t\t\t\tthis.lastChunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t\t}\n\n\t\t\tif (aborted) return true;\n\t\t\tchunk = chunk.previous;\n\t\t} while (chunk);\n\n\t\treturn false;\n\t}\n\n\ttrimEnd(charType) {\n\t\tthis.trimEndAborted(charType);\n\t\treturn this;\n\t}\n\ttrimStartAborted(charType) {\n\t\tconst rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\n\t\tthis.intro = this.intro.replace(rx, '');\n\t\tif (this.intro.length) return true;\n\n\t\tlet chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimStart(rx);\n\n\t\t\tif (chunk.end !== end) {\n\t\t\t\t// special case...\n\t\t\t\tif (chunk === this.lastChunk) this.lastChunk = chunk.next;\n\n\t\t\t\tthis.byEnd[chunk.end] = chunk;\n\t\t\t\tthis.byStart[chunk.next.start] = chunk.next;\n\t\t\t\tthis.byEnd[chunk.next.end] = chunk.next;\n\t\t\t}\n\n\t\t\tif (aborted) return true;\n\t\t\tchunk = chunk.next;\n\t\t} while (chunk);\n\n\t\treturn false;\n\t}\n\n\ttrimStart(charType) {\n\t\tthis.trimStartAborted(charType);\n\t\treturn this;\n\t}\n\n\thasChanged() {\n\t\treturn this.original !== this.toString();\n\t}\n\n\t_replaceRegexp(searchValue, replacement) {\n\t\tfunction getReplacement(match, str) {\n\t\t\tif (typeof replacement === 'string') {\n\t\t\t\treturn replacement.replace(/\\$(\\$|&|\\d+)/g, (_, i) => {\n\t\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_a_parameter\n\t\t\t\t\tif (i === '$') return '$';\n\t\t\t\t\tif (i === '&') return match[0];\n\t\t\t\t\tconst num = +i;\n\t\t\t\t\tif (num < match.length) return match[+i];\n\t\t\t\t\treturn `$${i}`;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn replacement(...match, match.index, str, match.groups);\n\t\t\t}\n\t\t}\n\t\tfunction matchAll(re, str) {\n\t\t\tlet match;\n\t\t\tconst matches = [];\n\t\t\twhile ((match = re.exec(str))) {\n\t\t\t\tmatches.push(match);\n\t\t\t}\n\t\t\treturn matches;\n\t\t}\n\t\tif (searchValue.global) {\n\t\t\tconst matches = matchAll(searchValue, this.original);\n\t\t\tmatches.forEach((match) => {\n\t\t\t\tif (match.index != null) {\n\t\t\t\t\tconst replacement = getReplacement(match, this.original);\n\t\t\t\t\tif (replacement !== match[0]) {\n\t\t\t\t\t\tthis.overwrite(\n\t\t\t\t\t\t\tmatch.index,\n\t\t\t\t\t\t\tmatch.index + match[0].length,\n\t\t\t\t\t\t\treplacement\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconst match = this.original.match(searchValue);\n\t\t\tif (match && match.index != null) {\n\t\t\t\tconst replacement = getReplacement(match, this.original);\n\t\t\t\tif (replacement !== match[0]) {\n\t\t\t\t\tthis.overwrite(\n\t\t\t\t\t\tmatch.index,\n\t\t\t\t\t\tmatch.index + match[0].length,\n\t\t\t\t\t\treplacement\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_replaceString(string, replacement) {\n\t\tconst { original } = this;\n\t\tconst index = original.indexOf(string);\n\n\t\tif (index !== -1) {\n\t\t\tthis.overwrite(index, index + string.length, replacement);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\treplace(searchValue, replacement) {\n\t\tif (typeof searchValue === 'string') {\n\t\t\treturn this._replaceString(searchValue, replacement);\n\t\t}\n\n\t\treturn this._replaceRegexp(searchValue, replacement);\n\t}\n\n\t_replaceAllString(string, replacement) {\n\t\tconst { original } = this;\n\t\tconst stringLength = string.length;\n\t\tfor (\n\t\t\tlet index = original.indexOf(string);\n\t\t\tindex !== -1;\n\t\t\tindex = original.indexOf(string, index + stringLength)\n\t\t) {\n\t\t\tconst previous = original.slice(index, index + stringLength);\n\t\t\tif (previous !== replacement)\n\t\t\t\tthis.overwrite(index, index + stringLength, replacement);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\treplaceAll(searchValue, replacement) {\n\t\tif (typeof searchValue === 'string') {\n\t\t\treturn this._replaceAllString(searchValue, replacement);\n\t\t}\n\n\t\tif (!searchValue.global) {\n\t\t\tthrow new TypeError(\n\t\t\t\t'MagicString.prototype.replaceAll called with a non-global RegExp argument',\n\t\t\t);\n\t\t}\n\n\t\treturn this._replaceRegexp(searchValue, replacement);\n\t}\n}\n\nconst hasOwnProp = Object.prototype.hasOwnProperty;\n\nlet Bundle$1 = class Bundle {\n\tconstructor(options = {}) {\n\t\tthis.intro = options.intro || '';\n\t\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\t\tthis.sources = [];\n\t\tthis.uniqueSources = [];\n\t\tthis.uniqueSourceIndexByFilename = {};\n\t}\n\n\taddSource(source) {\n\t\tif (source instanceof MagicString) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator,\n\t\t\t});\n\t\t}\n\n\t\tif (!isObject(source) || !source.content) {\n\t\t\tthrow new Error(\n\t\t\t\t'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`',\n\t\t\t);\n\t\t}\n\n\t\t['filename', 'ignoreList', 'indentExclusionRanges', 'separator'].forEach((option) => {\n\t\t\tif (!hasOwnProp.call(source, option)) source[option] = source.content[option];\n\t\t});\n\n\t\tif (source.separator === undefined) {\n\t\t\t// TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif (source.filename) {\n\t\t\tif (!hasOwnProp.call(this.uniqueSourceIndexByFilename, source.filename)) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[source.filename] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tconst uniqueSource = this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];\n\t\t\t\tif (source.content.original !== uniqueSource.content) {\n\t\t\t\t\tthrow new Error(`Illegal source: same filename (${source.filename}), different contents`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push(source);\n\t\treturn this;\n\t}\n\n\tappend(str, options) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString(str),\n\t\t\tseparator: (options && options.separator) || '',\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tclone() {\n\t\tconst bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator,\n\t\t});\n\n\t\tthis.sources.forEach((source) => {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator,\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t}\n\n\tgenerateDecodedMap(options = {}) {\n\t\tconst names = [];\n\t\tlet x_google_ignoreList = undefined;\n\t\tthis.sources.forEach((source) => {\n\t\t\tObject.keys(source.content.storedNames).forEach((name) => {\n\t\t\t\tif (!~names.indexOf(name)) names.push(name);\n\t\t\t});\n\t\t});\n\n\t\tconst mappings = new Mappings(options.hires);\n\n\t\tif (this.intro) {\n\t\t\tmappings.advance(this.intro);\n\t\t}\n\n\t\tthis.sources.forEach((source, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\tmappings.advance(this.separator);\n\t\t\t}\n\n\t\t\tconst sourceIndex = source.filename ? this.uniqueSourceIndexByFilename[source.filename] : -1;\n\t\t\tconst magicString = source.content;\n\t\t\tconst locate = getLocator(magicString.original);\n\n\t\t\tif (magicString.intro) {\n\t\t\t\tmappings.advance(magicString.intro);\n\t\t\t}\n\n\t\t\tmagicString.firstChunk.eachNext((chunk) => {\n\t\t\t\tconst loc = locate(chunk.start);\n\n\t\t\t\tif (chunk.intro.length) mappings.advance(chunk.intro);\n\n\t\t\t\tif (source.filename) {\n\t\t\t\t\tif (chunk.edited) {\n\t\t\t\t\t\tmappings.addEdit(\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tchunk.content,\n\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\tchunk.storeName ? names.indexOf(chunk.original) : -1,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmappings.addUneditedChunk(\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tmagicString.original,\n\t\t\t\t\t\t\tloc,\n\t\t\t\t\t\t\tmagicString.sourcemapLocations,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmappings.advance(chunk.content);\n\t\t\t\t}\n\n\t\t\t\tif (chunk.outro.length) mappings.advance(chunk.outro);\n\t\t\t});\n\n\t\t\tif (magicString.outro) {\n\t\t\t\tmappings.advance(magicString.outro);\n\t\t\t}\n\n\t\t\tif (source.ignoreList && sourceIndex !== -1) {\n\t\t\t\tif (x_google_ignoreList === undefined) {\n\t\t\t\t\tx_google_ignoreList = [];\n\t\t\t\t}\n\t\t\t\tx_google_ignoreList.push(sourceIndex);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tfile: options.file ? options.file.split(/[/\\\\]/).pop() : undefined,\n\t\t\tsources: this.uniqueSources.map((source) => {\n\t\t\t\treturn options.file ? getRelativePath(options.file, source.filename) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map((source) => {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames,\n\t\t\tmappings: mappings.raw,\n\t\t\tx_google_ignoreList,\n\t\t};\n\t}\n\n\tgenerateMap(options) {\n\t\treturn new SourceMap(this.generateDecodedMap(options));\n\t}\n\n\tgetIndentString() {\n\t\tconst indentStringCounts = {};\n\n\t\tthis.sources.forEach((source) => {\n\t\t\tconst indentStr = source.content._getRawIndentString();\n\n\t\t\tif (indentStr === null) return;\n\n\t\t\tif (!indentStringCounts[indentStr]) indentStringCounts[indentStr] = 0;\n\t\t\tindentStringCounts[indentStr] += 1;\n\t\t});\n\n\t\treturn (\n\t\t\tObject.keys(indentStringCounts).sort((a, b) => {\n\t\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t\t})[0] || '\\t'\n\t\t);\n\t}\n\n\tindent(indentStr) {\n\t\tif (!arguments.length) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif (indentStr === '') return this; // noop\n\n\t\tlet trailingNewline = !this.intro || this.intro.slice(-1) === '\\n';\n\n\t\tthis.sources.forEach((source, i) => {\n\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\tconst indentStart = trailingNewline || (i > 0 && /\\r?\\n$/.test(separator));\n\n\t\t\tsource.content.indent(indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart, //: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\ttrailingNewline = source.content.lastChar() === '\\n';\n\t\t});\n\n\t\tif (this.intro) {\n\t\t\tthis.intro =\n\t\t\t\tindentStr +\n\t\t\t\tthis.intro.replace(/^[^\\n]/gm, (match, index) => {\n\t\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprepend(str) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t}\n\n\ttoString() {\n\t\tconst body = this.sources\n\t\t\t.map((source, i) => {\n\t\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\t\tconst str = (i > 0 ? separator : '') + source.content.toString();\n\n\t\t\t\treturn str;\n\t\t\t})\n\t\t\t.join('');\n\n\t\treturn this.intro + body;\n\t}\n\n\tisEmpty() {\n\t\tif (this.intro.length && this.intro.trim()) return false;\n\t\tif (this.sources.some((source) => !source.content.isEmpty())) return false;\n\t\treturn true;\n\t}\n\n\tlength() {\n\t\treturn this.sources.reduce(\n\t\t\t(length, source) => length + source.content.length(),\n\t\t\tthis.intro.length,\n\t\t);\n\t}\n\n\ttrimLines() {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t}\n\n\ttrim(charType) {\n\t\treturn this.trimStart(charType).trimEnd(charType);\n\t}\n\n\ttrimStart(charType) {\n\t\tconst rx = new RegExp('^' + (charType || '\\\\s') + '+');\n\t\tthis.intro = this.intro.replace(rx, '');\n\n\t\tif (!this.intro) {\n\t\t\tlet source;\n\t\t\tlet i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this.sources[i++];\n\t\t\t\tif (!source) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (!source.content.trimStartAborted(charType));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\ttrimEnd(charType) {\n\t\tconst rx = new RegExp((charType || '\\\\s') + '+$');\n\n\t\tlet source;\n\t\tlet i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this.sources[i--];\n\t\t\tif (!source) {\n\t\t\t\tthis.intro = this.intro.replace(rx, '');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (!source.content.trimEndAborted(charType));\n\n\t\treturn this;\n\t}\n};\n\nfunction treeshakeNode(node, code, start, end) {\n    code.remove(start, end);\n    node.removeAnnotations(code);\n}\n\nconst NO_SEMICOLON = { isNoStatement: true };\n// This assumes there are only white-space and comments between start and the string we are looking for\nfunction findFirstOccurrenceOutsideComment(code, searchString, start = 0) {\n    let searchPos, charCodeAfterSlash;\n    searchPos = code.indexOf(searchString, start);\n    while (true) {\n        start = code.indexOf('/', start);\n        if (start === -1 || start >= searchPos)\n            return searchPos;\n        charCodeAfterSlash = code.charCodeAt(++start);\n        ++start;\n        // With our assumption, '/' always starts a comment. Determine comment type:\n        start =\n            charCodeAfterSlash === 47 /*\"/\"*/\n                ? code.indexOf('\\n', start) + 1\n                : code.indexOf('*/', start) + 2;\n        if (start > searchPos) {\n            searchPos = code.indexOf(searchString, start);\n        }\n    }\n}\nconst NON_WHITESPACE = /\\S/g;\nfunction findNonWhiteSpace(code, index) {\n    NON_WHITESPACE.lastIndex = index;\n    const result = NON_WHITESPACE.exec(code);\n    return result.index;\n}\nconst WHITESPACE = /\\s/;\nfunction findLastWhiteSpaceReverse(code, start, end) {\n    while (true) {\n        if (start >= end) {\n            return end;\n        }\n        if (WHITESPACE.test(code[end - 1])) {\n            end--;\n        }\n        else {\n            return end;\n        }\n    }\n}\n// This assumes \"code\" only contains white-space and comments\n// Returns position of line-comment if applicable\nfunction findFirstLineBreakOutsideComment(code) {\n    let lineBreakPos, charCodeAfterSlash, start = 0;\n    lineBreakPos = code.indexOf('\\n', start);\n    while (true) {\n        start = code.indexOf('/', start);\n        if (start === -1 || start > lineBreakPos)\n            return [lineBreakPos, lineBreakPos + 1];\n        // With our assumption, '/' always starts a comment. Determine comment type:\n        charCodeAfterSlash = code.charCodeAt(start + 1);\n        if (charCodeAfterSlash === 47 /*\"/\"*/)\n            return [start, lineBreakPos + 1];\n        start = code.indexOf('*/', start + 2) + 2;\n        if (start > lineBreakPos) {\n            lineBreakPos = code.indexOf('\\n', start);\n        }\n    }\n}\nfunction renderStatementList(statements, code, start, end, options) {\n    let currentNode, currentNodeStart, currentNodeNeedsBoundaries, nextNodeStart;\n    let nextNode = statements[0];\n    let nextNodeNeedsBoundaries = !nextNode.included || nextNode.needsBoundaries;\n    if (nextNodeNeedsBoundaries) {\n        nextNodeStart =\n            start + findFirstLineBreakOutsideComment(code.original.slice(start, nextNode.start))[1];\n    }\n    for (let nextIndex = 1; nextIndex <= statements.length; nextIndex++) {\n        currentNode = nextNode;\n        currentNodeStart = nextNodeStart;\n        currentNodeNeedsBoundaries = nextNodeNeedsBoundaries;\n        nextNode = statements[nextIndex];\n        nextNodeNeedsBoundaries =\n            nextNode === undefined ? false : !nextNode.included || nextNode.needsBoundaries;\n        if (currentNodeNeedsBoundaries || nextNodeNeedsBoundaries) {\n            nextNodeStart =\n                currentNode.end +\n                    findFirstLineBreakOutsideComment(code.original.slice(currentNode.end, nextNode === undefined ? end : nextNode.start))[1];\n            if (currentNode.included) {\n                if (currentNodeNeedsBoundaries) {\n                    currentNode.render(code, options, {\n                        end: nextNodeStart,\n                        start: currentNodeStart\n                    });\n                }\n                else {\n                    currentNode.render(code, options);\n                }\n            }\n            else {\n                treeshakeNode(currentNode, code, currentNodeStart, nextNodeStart);\n            }\n        }\n        else {\n            currentNode.render(code, options);\n        }\n    }\n}\n// This assumes that the first character is not part of the first node\nfunction getCommaSeparatedNodesWithBoundaries(nodes, code, start, end) {\n    const splitUpNodes = [];\n    let node, nextNodeStart, contentEnd, char;\n    let separator = start - 1;\n    for (const nextNode of nodes) {\n        if (node !== undefined) {\n            separator =\n                node.end +\n                    findFirstOccurrenceOutsideComment(code.original.slice(node.end, nextNode.start), ',');\n        }\n        nextNodeStart = contentEnd =\n            separator +\n                1 +\n                findFirstLineBreakOutsideComment(code.original.slice(separator + 1, nextNode.start))[1];\n        while (((char = code.original.charCodeAt(nextNodeStart)),\n            char === 32 /*\" \"*/ || char === 9 /*\"\\t\"*/ || char === 10 /*\"\\n\"*/ || char === 13) /*\"\\r\"*/)\n            nextNodeStart++;\n        if (node !== undefined) {\n            splitUpNodes.push({\n                contentEnd,\n                end: nextNodeStart,\n                node,\n                separator,\n                start\n            });\n        }\n        node = nextNode;\n        start = nextNodeStart;\n    }\n    splitUpNodes.push({\n        contentEnd: end,\n        end,\n        node: node,\n        separator: null,\n        start\n    });\n    return splitUpNodes;\n}\n// This assumes there are only white-space and comments between start and end\nfunction removeLineBreaks(code, start, end) {\n    while (true) {\n        const [removeStart, removeEnd] = findFirstLineBreakOutsideComment(code.original.slice(start, end));\n        if (removeStart === -1) {\n            break;\n        }\n        code.remove(start + removeStart, (start += removeEnd));\n    }\n}\n\nfunction getSystemExportStatement(exportedVariables, { exportNamesByVariable, snippets: { _, getObject, getPropertyAccess } }, modifier = '') {\n    if (exportedVariables.length === 1 &&\n        exportNamesByVariable.get(exportedVariables[0]).length === 1) {\n        const variable = exportedVariables[0];\n        return `exports(${JSON.stringify(exportNamesByVariable.get(variable)[0])},${_}${variable.getName(getPropertyAccess)}${modifier})`;\n    }\n    else {\n        const fields = [];\n        for (const variable of exportedVariables) {\n            for (const exportName of exportNamesByVariable.get(variable)) {\n                fields.push([exportName, variable.getName(getPropertyAccess) + modifier]);\n            }\n        }\n        return `exports(${getObject(fields, { lineBreakIndent: null })})`;\n    }\n}\n// This is only invoked if there is exactly one export name\nfunction renderSystemExportExpression(exportedVariable, expressionStart, expressionEnd, code, { exportNamesByVariable, snippets: { _ } }) {\n    code.prependRight(expressionStart, `exports(${JSON.stringify(exportNamesByVariable.get(exportedVariable)[0])},${_}`);\n    code.appendLeft(expressionEnd, ')');\n}\nfunction renderSystemExportFunction(exportedVariables, expressionStart, expressionEnd, needsParens, code, options) {\n    const { _, getDirectReturnIifeLeft } = options.snippets;\n    code.prependRight(expressionStart, getDirectReturnIifeLeft(['v'], `${getSystemExportStatement(exportedVariables, options)},${_}v`, { needsArrowReturnParens: true, needsWrappedFunction: needsParens }));\n    code.appendLeft(expressionEnd, ')');\n}\nfunction renderSystemExportSequenceAfterExpression(exportedVariable, expressionStart, expressionEnd, needsParens, code, options) {\n    const { _, getPropertyAccess } = options.snippets;\n    code.appendLeft(expressionEnd, `,${_}${getSystemExportStatement([exportedVariable], options)},${_}${exportedVariable.getName(getPropertyAccess)}`);\n    if (needsParens) {\n        code.prependRight(expressionStart, '(');\n        code.appendLeft(expressionEnd, ')');\n    }\n}\nfunction renderSystemExportSequenceBeforeExpression(exportedVariable, expressionStart, expressionEnd, needsParens, code, options, modifier) {\n    const { _ } = options.snippets;\n    code.prependRight(expressionStart, `${getSystemExportStatement([exportedVariable], options, modifier)},${_}`);\n    if (needsParens) {\n        code.prependRight(expressionStart, '(');\n        code.appendLeft(expressionEnd, ')');\n    }\n}\n\n/** @typedef { import('estree').Node} Node */\n/** @typedef {Node | {\n *   type: 'PropertyDefinition';\n *   computed: boolean;\n *   value: Node\n * }} NodeWithPropertyDefinition */\n\n/**\n *\n * @param {NodeWithPropertyDefinition} node\n * @param {NodeWithPropertyDefinition} parent\n * @returns {boolean}\n */\nfunction is_reference (node, parent) {\n\tif (node.type === 'MemberExpression') {\n\t\treturn !node.computed && is_reference(node.object, node);\n\t}\n\n\tif (node.type === 'Identifier') {\n\t\tif (!parent) return true;\n\n\t\tswitch (parent.type) {\n\t\t\t// disregard `bar` in `foo.bar`\n\t\t\tcase 'MemberExpression': return parent.computed || node === parent.object;\n\n\t\t\t// disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n\t\t\tcase 'MethodDefinition': return parent.computed;\n\n\t\t\t// disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n\t\t\tcase 'PropertyDefinition': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n\t\t\tcase 'Property': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `export { foo as bar }` or\n\t\t\t// the foo in `import { foo as bar }`\n\t\t\tcase 'ExportSpecifier':\n\t\t\tcase 'ImportSpecifier': return node === parent.local;\n\n\t\t\t// disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n\t\t\tcase 'LabeledStatement':\n\t\t\tcase 'BreakStatement':\n\t\t\tcase 'ContinueStatement': return false;\n\t\t\tdefault: return true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nconst PureFunctionKey = Symbol('PureFunction');\nconst getPureFunctions = ({ treeshake }) => {\n    const pureFunctions = Object.create(null);\n    for (const functionName of treeshake ? treeshake.manualPureFunctions : []) {\n        let currentFunctions = pureFunctions;\n        for (const pathSegment of functionName.split('.')) {\n            currentFunctions = currentFunctions[pathSegment] ||= Object.create(null);\n        }\n        currentFunctions[PureFunctionKey] = true;\n    }\n    return pureFunctions;\n};\n\nfunction getOrCreate(map, key, init) {\n    const existing = map.get(key);\n    if (existing !== undefined) {\n        return existing;\n    }\n    const value = init();\n    map.set(key, value);\n    return value;\n}\nfunction getNewSet() {\n    return new Set();\n}\nfunction getNewArray() {\n    return [];\n}\n\nconst UnknownKey = Symbol('Unknown Key');\nconst UnknownNonAccessorKey = Symbol('Unknown Non-Accessor Key');\nconst UnknownInteger = Symbol('Unknown Integer');\nconst SymbolToStringTag = Symbol('Symbol.toStringTag');\nconst EMPTY_PATH = [];\nconst UNKNOWN_PATH = [UnknownKey];\n// For deoptimizations, this means we are modifying an unknown property but did\n// not lose track of the object or are creating a setter/getter;\n// For assignment effects it means we do not check for setter/getter effects\n// but only if something is mutated that is included, which is relevant for\n// Object.defineProperty\nconst UNKNOWN_NON_ACCESSOR_PATH = [UnknownNonAccessorKey];\nconst UNKNOWN_INTEGER_PATH = [UnknownInteger];\nconst EntitiesKey = Symbol('Entities');\nclass PathTracker {\n    constructor() {\n        this.entityPaths = Object.create(null, {\n            [EntitiesKey]: { value: new Set() }\n        });\n    }\n    trackEntityAtPathAndGetIfTracked(path, entity) {\n        const trackedEntities = this.getEntities(path);\n        if (trackedEntities.has(entity))\n            return true;\n        trackedEntities.add(entity);\n        return false;\n    }\n    withTrackedEntityAtPath(path, entity, onUntracked, returnIfTracked) {\n        const trackedEntities = this.getEntities(path);\n        if (trackedEntities.has(entity))\n            return returnIfTracked;\n        trackedEntities.add(entity);\n        const result = onUntracked();\n        trackedEntities.delete(entity);\n        return result;\n    }\n    getEntities(path) {\n        let currentPaths = this.entityPaths;\n        for (const pathSegment of path) {\n            currentPaths = currentPaths[pathSegment] =\n                currentPaths[pathSegment] ||\n                    Object.create(null, { [EntitiesKey]: { value: new Set() } });\n        }\n        return currentPaths[EntitiesKey];\n    }\n}\nconst SHARED_RECURSION_TRACKER = new PathTracker();\nclass DiscriminatedPathTracker {\n    constructor() {\n        this.entityPaths = Object.create(null, {\n            [EntitiesKey]: { value: new Map() }\n        });\n    }\n    trackEntityAtPathAndGetIfTracked(path, discriminator, entity) {\n        let currentPaths = this.entityPaths;\n        for (const pathSegment of path) {\n            currentPaths = currentPaths[pathSegment] =\n                currentPaths[pathSegment] ||\n                    Object.create(null, { [EntitiesKey]: { value: new Map() } });\n        }\n        const trackedEntities = getOrCreate(currentPaths[EntitiesKey], discriminator, (getNewSet));\n        if (trackedEntities.has(entity))\n            return true;\n        trackedEntities.add(entity);\n        return false;\n    }\n}\n\nfunction isFlagSet(flags, flag) {\n    return (flags & flag) !== 0;\n}\nfunction setFlag(flags, flag, value) {\n    return (flags & ~flag) | (-value & flag);\n}\n\nconst UnknownValue = Symbol('Unknown Value');\nconst UnknownTruthyValue = Symbol('Unknown Truthy Value');\nclass ExpressionEntity {\n    constructor() {\n        this.flags = 0;\n    }\n    get included() {\n        return isFlagSet(this.flags, 1 /* Flag.included */);\n    }\n    set included(value) {\n        this.flags = setFlag(this.flags, 1 /* Flag.included */, value);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, _path, _recursionTracker) {\n        deoptimizeInteraction(interaction);\n    }\n    deoptimizePath(_path) { }\n    /**\n     * If possible it returns a stringifyable literal value for this node that\n     * can be used for inlining or comparing values. Otherwise, it should return\n     * UnknownValue.\n     */\n    getLiteralValueAtPath(_path, _recursionTracker, _origin) {\n        return UnknownValue;\n    }\n    getReturnExpressionWhenCalledAtPath(_path, _interaction, _recursionTracker, _origin) {\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(_path, _interaction, _context) {\n        return true;\n    }\n    include(_context, _includeChildrenRecursively, _options) {\n        this.included = true;\n    }\n    includeCallArguments(context, parameters) {\n        for (const argument of parameters) {\n            argument.include(context, false);\n        }\n    }\n    shouldBeIncluded(_context) {\n        return true;\n    }\n}\nconst UNKNOWN_EXPRESSION = new (class UnknownExpression extends ExpressionEntity {\n})();\nconst UNKNOWN_RETURN_EXPRESSION = [\n    UNKNOWN_EXPRESSION,\n    false\n];\nconst deoptimizeInteraction = (interaction) => {\n    for (const argument of interaction.args) {\n        argument?.deoptimizePath(UNKNOWN_PATH);\n    }\n};\n\nconst INTERACTION_ACCESSED = 0;\nconst INTERACTION_ASSIGNED = 1;\nconst INTERACTION_CALLED = 2;\nconst NODE_INTERACTION_UNKNOWN_ACCESS = {\n    args: [null],\n    type: INTERACTION_ACCESSED\n};\nconst NODE_INTERACTION_UNKNOWN_ASSIGNMENT = {\n    args: [null, UNKNOWN_EXPRESSION],\n    type: INTERACTION_ASSIGNED\n};\n// While this is technically a call without arguments, we can compare against\n// this reference in places where precise values or this argument would make a\n// difference\nconst NODE_INTERACTION_UNKNOWN_CALL = {\n    args: [null],\n    type: INTERACTION_CALLED,\n    withNew: false\n};\n\nclass Variable extends ExpressionEntity {\n    markReassigned() {\n        this.isReassigned = true;\n    }\n    constructor(name) {\n        super();\n        this.name = name;\n        this.alwaysRendered = false;\n        this.forbiddenNames = null;\n        this.globalName = null;\n        this.initReached = false;\n        this.isId = false;\n        this.kind = null;\n        this.renderBaseName = null;\n        this.renderName = null;\n        this.isReassigned = false;\n        this.onlyFunctionCallUsed = true;\n    }\n    /**\n     * Binds identifiers that reference this variable to this variable.\n     * Necessary to be able to change variable names.\n     */\n    addReference(_identifier) { }\n    /**\n     * Check if the identifier variable is only used as function call\n     * @returns true if the variable is only used as function call\n     */\n    getOnlyFunctionCallUsed() {\n        return this.onlyFunctionCallUsed;\n    }\n    /**\n     * Collect the places where the identifier variable is used\n     * @param usedPlace Where the variable is used\n     */\n    addUsedPlace(usedPlace) {\n        const isFunctionCall = usedPlace.parent.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.CallExpression &&\n            usedPlace.parent.callee === usedPlace;\n        if (!isFunctionCall && usedPlace.parent.type !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExportDefaultDeclaration) {\n            this.onlyFunctionCallUsed = false;\n        }\n    }\n    /**\n     * Prevent this variable from being renamed to this name to avoid name\n     * collisions\n     */\n    forbidName(name) {\n        (this.forbiddenNames ||= new Set()).add(name);\n    }\n    getBaseVariableName() {\n        return (this.renderedLikeHoisted?.getBaseVariableName() ||\n            this.renderBaseName ||\n            this.renderName ||\n            this.name);\n    }\n    getName(getPropertyAccess, useOriginalName) {\n        if (this.globalName) {\n            return this.globalName;\n        }\n        if (useOriginalName?.(this)) {\n            return this.name;\n        }\n        if (this.renderedLikeHoisted) {\n            return this.renderedLikeHoisted.getName(getPropertyAccess, useOriginalName);\n        }\n        const name = this.renderName || this.name;\n        return this.renderBaseName ? `${this.renderBaseName}${getPropertyAccess(name)}` : name;\n    }\n    hasEffectsOnInteractionAtPath(path, { type }, _context) {\n        return type !== INTERACTION_ACCESSED || path.length > 0;\n    }\n    /**\n     * Marks this variable as being part of the bundle, which is usually the case\n     * when one of its identifiers becomes part of the bundle. Returns true if it\n     * has not been included previously. Once a variable is included, it should\n     * take care all its declarations are included.\n     */\n    include() {\n        this.included = true;\n        this.renderedLikeHoisted?.include();\n    }\n    /**\n     * Links the rendered name of this variable to another variable and includes\n     * this variable if the other variable is included.\n     */\n    renderLikeHoisted(variable) {\n        this.renderedLikeHoisted = variable;\n    }\n    markCalledFromTryStatement() { }\n    setRenderNames(baseName, name) {\n        this.renderBaseName = baseName;\n        this.renderName = name;\n    }\n}\n\nclass ExternalVariable extends Variable {\n    constructor(module, name) {\n        super(name);\n        this.referenced = false;\n        this.module = module;\n        this.isNamespace = name === '*';\n    }\n    addReference(identifier) {\n        this.referenced = true;\n        if (this.name === 'default' || this.name === '*') {\n            this.module.suggestName(identifier.name);\n        }\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > (this.isNamespace ? 1 : 0);\n    }\n    include() {\n        super.include();\n        this.module.used = true;\n    }\n}\n\nfunction cacheObjectGetters(object, getterProperties) {\n    for (const property of getterProperties) {\n        const propertyGetter = Object.getOwnPropertyDescriptor(object, property).get;\n        Object.defineProperty(object, property, {\n            get() {\n                const value = propertyGetter.call(object);\n                // This replaces the getter with a fixed value for subsequent calls\n                Object.defineProperty(object, property, { value });\n                return value;\n            }\n        });\n    }\n}\n\nconst RESERVED_NAMES = new Set([\n    'await',\n    'break',\n    'case',\n    'catch',\n    'class',\n    'const',\n    'continue',\n    'debugger',\n    'default',\n    'delete',\n    'do',\n    'else',\n    'enum',\n    'eval',\n    'export',\n    'extends',\n    'false',\n    'finally',\n    'for',\n    'function',\n    'if',\n    'implements',\n    'import',\n    'in',\n    'instanceof',\n    'interface',\n    'let',\n    'NaN',\n    'new',\n    'null',\n    'package',\n    'private',\n    'protected',\n    'public',\n    'return',\n    'static',\n    'super',\n    'switch',\n    'this',\n    'throw',\n    'true',\n    'try',\n    'typeof',\n    'undefined',\n    'var',\n    'void',\n    'while',\n    'with',\n    'yield'\n]);\n\nconst illegalCharacters = /[^\\w$]/g;\nconst startsWithDigit = (value) => /\\d/.test(value[0]);\nconst needsEscape = (value) => startsWithDigit(value) || RESERVED_NAMES.has(value) || value === 'arguments';\nfunction isLegal(value) {\n    if (needsEscape(value)) {\n        return false;\n    }\n    return !illegalCharacters.test(value);\n}\nfunction makeLegal(value) {\n    value = value\n        .replace(/-(\\w)/g, (_, letter) => letter.toUpperCase())\n        .replace(illegalCharacters, '_');\n    if (needsEscape(value))\n        value = `_${value}`;\n    return value || '_';\n}\nconst VALID_IDENTIFIER_REGEXP = /^[$_\\p{ID_Start}][$\\u200C\\u200D\\p{ID_Continue}]*$/u;\nconst NUMBER_REGEXP = /^(?:0|[1-9]\\d*)$/;\nfunction stringifyObjectKeyIfNeeded(key) {\n    if (VALID_IDENTIFIER_REGEXP.test(key)) {\n        return key === '__proto__' ? '[\"__proto__\"]' : key;\n    }\n    if (NUMBER_REGEXP.test(key) && +key <= Number.MAX_SAFE_INTEGER) {\n        return key;\n    }\n    return JSON.stringify(key);\n}\nfunction stringifyIdentifierIfNeeded(key) {\n    if (VALID_IDENTIFIER_REGEXP.test(key)) {\n        return key;\n    }\n    return JSON.stringify(key);\n}\n\nclass ExternalModule {\n    constructor(options, id, moduleSideEffects, meta, renormalizeRenderPath, attributes) {\n        this.options = options;\n        this.id = id;\n        this.renormalizeRenderPath = renormalizeRenderPath;\n        this.dynamicImporters = [];\n        this.execIndex = Infinity;\n        this.exportedVariables = new Map();\n        this.importers = [];\n        this.reexported = false;\n        this.used = false;\n        this.declarations = new Map();\n        this.mostCommonSuggestion = 0;\n        this.nameSuggestions = new Map();\n        this.suggestedVariableName = makeLegal(id.split(/[/\\\\]/).pop());\n        const { importers, dynamicImporters } = this;\n        this.info = {\n            ast: null,\n            attributes,\n            code: null,\n            dynamicallyImportedIdResolutions: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n            dynamicallyImportedIds: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n            get dynamicImporters() {\n                return dynamicImporters.sort();\n            },\n            exportedBindings: null,\n            exports: null,\n            hasDefaultExport: null,\n            id,\n            implicitlyLoadedAfterOneOf: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n            implicitlyLoadedBefore: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n            importedIdResolutions: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n            importedIds: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n            get importers() {\n                return importers.sort();\n            },\n            isEntry: false,\n            isExternal: true,\n            isIncluded: null,\n            meta,\n            moduleSideEffects,\n            syntheticNamedExports: false\n        };\n    }\n    cacheInfoGetters() {\n        cacheObjectGetters(this.info, ['dynamicImporters', 'importers']);\n    }\n    getVariableForExportName(name) {\n        const declaration = this.declarations.get(name);\n        if (declaration)\n            return [declaration];\n        const externalVariable = new ExternalVariable(this, name);\n        this.declarations.set(name, externalVariable);\n        this.exportedVariables.set(externalVariable, name);\n        return [externalVariable];\n    }\n    suggestName(name) {\n        const value = (this.nameSuggestions.get(name) ?? 0) + 1;\n        this.nameSuggestions.set(name, value);\n        if (value > this.mostCommonSuggestion) {\n            this.mostCommonSuggestion = value;\n            this.suggestedVariableName = name;\n        }\n    }\n    warnUnusedImports() {\n        const unused = [...this.declarations]\n            .filter(([name, declaration]) => name !== '*' && !declaration.included && !this.reexported && !declaration.referenced)\n            .map(([name]) => name);\n        if (unused.length === 0)\n            return;\n        const importersSet = new Set();\n        for (const name of unused) {\n            for (const importer of this.declarations.get(name).module.importers) {\n                importersSet.add(importer);\n            }\n        }\n        const importersArray = [...importersSet];\n        this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnusedExternalImports)(this.id, unused, importersArray));\n    }\n}\n\nfunction markModuleAndImpureDependenciesAsExecuted(baseModule) {\n    baseModule.isExecuted = true;\n    const modules = [baseModule];\n    const visitedModules = new Set();\n    for (const module of modules) {\n        for (const dependency of [...module.dependencies, ...module.implicitlyLoadedBefore]) {\n            if (!(dependency instanceof ExternalModule) &&\n                !dependency.isExecuted &&\n                (dependency.info.moduleSideEffects || module.implicitlyLoadedBefore.has(dependency)) &&\n                !visitedModules.has(dependency.id)) {\n                dependency.isExecuted = true;\n                visitedModules.add(dependency.id);\n                modules.push(dependency);\n            }\n        }\n    }\n}\n\nconst doNothing = () => { };\n\n// This file is generated by scripts/generate-child-node-keys.js.\n// Do not edit this file directly.\nconst childNodeKeys = {\n    ArrayExpression: ['elements'],\n    ArrayPattern: ['elements'],\n    ArrowFunctionExpression: ['params', 'body'],\n    AssignmentExpression: ['left', 'right'],\n    AssignmentPattern: ['left', 'right'],\n    AwaitExpression: ['argument'],\n    BinaryExpression: ['left', 'right'],\n    BlockStatement: ['body'],\n    BreakStatement: ['label'],\n    CallExpression: ['callee', 'arguments'],\n    CatchClause: ['param', 'body'],\n    ChainExpression: ['expression'],\n    ClassBody: ['body'],\n    ClassDeclaration: ['decorators', 'id', 'superClass', 'body'],\n    ClassExpression: ['decorators', 'id', 'superClass', 'body'],\n    ConditionalExpression: ['test', 'consequent', 'alternate'],\n    ContinueStatement: ['label'],\n    DebuggerStatement: [],\n    Decorator: ['expression'],\n    DoWhileStatement: ['body', 'test'],\n    EmptyStatement: [],\n    ExportAllDeclaration: ['exported', 'source', 'attributes'],\n    ExportDefaultDeclaration: ['declaration'],\n    ExportNamedDeclaration: ['specifiers', 'source', 'attributes', 'declaration'],\n    ExportSpecifier: ['local', 'exported'],\n    ExpressionStatement: ['expression'],\n    ForInStatement: ['left', 'right', 'body'],\n    ForOfStatement: ['left', 'right', 'body'],\n    ForStatement: ['init', 'test', 'update', 'body'],\n    FunctionDeclaration: ['id', 'params', 'body'],\n    FunctionExpression: ['id', 'params', 'body'],\n    Identifier: [],\n    IfStatement: ['test', 'consequent', 'alternate'],\n    ImportAttribute: ['key', 'value'],\n    ImportDeclaration: ['specifiers', 'source', 'attributes'],\n    ImportDefaultSpecifier: ['local'],\n    ImportExpression: ['source', 'options'],\n    ImportNamespaceSpecifier: ['local'],\n    ImportSpecifier: ['imported', 'local'],\n    JSXAttribute: ['name', 'value'],\n    JSXClosingElement: ['name'],\n    JSXClosingFragment: [],\n    JSXElement: ['openingElement', 'children', 'closingElement'],\n    JSXEmptyExpression: [],\n    JSXExpressionContainer: ['expression'],\n    JSXFragment: ['openingFragment', 'children', 'closingFragment'],\n    JSXIdentifier: [],\n    JSXMemberExpression: ['object', 'property'],\n    JSXNamespacedName: ['namespace', 'name'],\n    JSXOpeningElement: ['name', 'attributes'],\n    JSXOpeningFragment: [],\n    JSXSpreadAttribute: ['argument'],\n    JSXSpreadChild: ['expression'],\n    JSXText: [],\n    LabeledStatement: ['label', 'body'],\n    Literal: [],\n    LogicalExpression: ['left', 'right'],\n    MemberExpression: ['object', 'property'],\n    MetaProperty: ['meta', 'property'],\n    MethodDefinition: ['decorators', 'key', 'value'],\n    NewExpression: ['callee', 'arguments'],\n    ObjectExpression: ['properties'],\n    ObjectPattern: ['properties'],\n    PanicError: [],\n    ParseError: [],\n    PrivateIdentifier: [],\n    Program: ['body'],\n    Property: ['key', 'value'],\n    PropertyDefinition: ['decorators', 'key', 'value'],\n    RestElement: ['argument'],\n    ReturnStatement: ['argument'],\n    SequenceExpression: ['expressions'],\n    SpreadElement: ['argument'],\n    StaticBlock: ['body'],\n    Super: [],\n    SwitchCase: ['test', 'consequent'],\n    SwitchStatement: ['discriminant', 'cases'],\n    TaggedTemplateExpression: ['tag', 'quasi'],\n    TemplateElement: [],\n    TemplateLiteral: ['quasis', 'expressions'],\n    ThisExpression: [],\n    ThrowStatement: ['argument'],\n    TryStatement: ['block', 'handler', 'finalizer'],\n    UnaryExpression: ['argument'],\n    UpdateExpression: ['argument'],\n    VariableDeclaration: ['declarations'],\n    VariableDeclarator: ['id', 'init'],\n    WhileStatement: ['test', 'body'],\n    YieldExpression: ['argument']\n};\n\nfunction createInclusionContext() {\n    return {\n        brokenFlow: false,\n        hasBreak: false,\n        hasContinue: false,\n        includedCallArguments: new Set(),\n        includedLabels: new Set()\n    };\n}\nfunction createHasEffectsContext() {\n    return {\n        accessed: new PathTracker(),\n        assigned: new PathTracker(),\n        brokenFlow: false,\n        called: new DiscriminatedPathTracker(),\n        hasBreak: false,\n        hasContinue: false,\n        ignore: {\n            breaks: false,\n            continues: false,\n            labels: new Set(),\n            returnYield: false,\n            this: false\n        },\n        includedLabels: new Set(),\n        instantiated: new DiscriminatedPathTracker(),\n        replacedVariableInits: new Map()\n    };\n}\n\nconst INCLUDE_PARAMETERS = 'variables';\nconst IS_SKIPPED_CHAIN = Symbol('IS_SKIPPED_CHAIN');\nclass NodeBase extends ExpressionEntity {\n    /**\n     * Nodes can apply custom deoptimizations once they become part of the\n     * executed code. To do this, they must initialize this as false, implement\n     * applyDeoptimizations and call this from include and hasEffects if they have\n     * custom handlers\n     */\n    get deoptimized() {\n        return isFlagSet(this.flags, 2 /* Flag.deoptimized */);\n    }\n    set deoptimized(value) {\n        this.flags = setFlag(this.flags, 2 /* Flag.deoptimized */, value);\n    }\n    constructor(parent, parentScope) {\n        super();\n        this.parent = parent;\n        this.scope = parentScope;\n        this.createScope(parentScope);\n    }\n    addExportedVariables(_variables, _exportNamesByVariable) { }\n    /**\n     * Override this to bind assignments to variables and do any initialisations\n     * that require the scopes to be populated with variables.\n     */\n    bind() {\n        for (const key of childNodeKeys[this.type]) {\n            const value = this[key];\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.bind();\n                }\n            }\n            else if (value) {\n                value.bind();\n            }\n        }\n    }\n    /**\n     * Override if this node should receive a different scope than the parent\n     * scope.\n     */\n    createScope(parentScope) {\n        this.scope = parentScope;\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        for (const key of childNodeKeys[this.type]) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    if (child?.hasEffects(context))\n                        return true;\n                }\n            }\n            else if (value.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    hasEffectsAsAssignmentTarget(context, _checkAccess) {\n        return (this.hasEffects(context) ||\n            this.hasEffectsOnInteractionAtPath(EMPTY_PATH, this.assignmentInteraction, context));\n    }\n    include(context, includeChildrenRecursively, _options) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        for (const key of childNodeKeys[this.type]) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.include(context, includeChildrenRecursively);\n                }\n            }\n            else {\n                value.include(context, includeChildrenRecursively);\n            }\n        }\n    }\n    includeAsAssignmentTarget(context, includeChildrenRecursively, _deoptimizeAccess) {\n        this.include(context, includeChildrenRecursively);\n    }\n    /**\n     * Override to perform special initialisation steps after the scope is\n     * initialised\n     */\n    initialise() {\n        this.scope.context.magicString.addSourcemapLocation(this.start);\n        this.scope.context.magicString.addSourcemapLocation(this.end);\n    }\n    parseNode(esTreeNode) {\n        for (const [key, value] of Object.entries(esTreeNode)) {\n            // Skip properties defined on the class already.\n            // This way, we can override this function to add custom initialisation and then call super.parseNode\n            // Note: this doesn't skip properties with defined getters/setters which we use to pack wrap booleans\n            // in bitfields. Those are still assigned from the value in the esTreeNode.\n            if (this.hasOwnProperty(key))\n                continue;\n            if (key.charCodeAt(0) === 95 /* _ */) {\n                if (key === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ANNOTATION_KEY) {\n                    this.annotations = value;\n                }\n                else if (key === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.INVALID_ANNOTATION_KEY) {\n                    this.invalidAnnotations = value;\n                }\n            }\n            else if (typeof value !== 'object' || value === null) {\n                this[key] = value;\n            }\n            else if (Array.isArray(value)) {\n                this[key] = new Array(value.length);\n                let index = 0;\n                for (const child of value) {\n                    this[key][index++] =\n                        child === null\n                            ? null\n                            : new (this.scope.context.getNodeConstructor(child.type))(this, this.scope).parseNode(child);\n                }\n            }\n            else {\n                this[key] = new (this.scope.context.getNodeConstructor(value.type))(this, this.scope).parseNode(value);\n            }\n        }\n        // extend child keys for unknown node types\n        childNodeKeys[esTreeNode.type] ||= createChildNodeKeysForNode(esTreeNode);\n        this.initialise();\n        return this;\n    }\n    removeAnnotations(code) {\n        if (this.annotations) {\n            for (const annotation of this.annotations) {\n                code.remove(annotation.start, annotation.end);\n            }\n        }\n    }\n    render(code, options) {\n        for (const key of childNodeKeys[this.type]) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.render(code, options);\n                }\n            }\n            else {\n                value.render(code, options);\n            }\n        }\n    }\n    setAssignedValue(value) {\n        this.assignmentInteraction = { args: [null, value], type: INTERACTION_ASSIGNED };\n    }\n    shouldBeIncluded(context) {\n        return this.included || (!context.brokenFlow && this.hasEffects(createHasEffectsContext()));\n    }\n    /**\n     * Just deoptimize everything by default so that when e.g. we do not track\n     * something properly, it is deoptimized.\n     * @protected\n     */\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        for (const key of childNodeKeys[this.type]) {\n            const value = this[key];\n            if (value === null)\n                continue;\n            if (Array.isArray(value)) {\n                for (const child of value) {\n                    child?.deoptimizePath(UNKNOWN_PATH);\n                }\n            }\n            else {\n                value.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        this.scope.context.requestTreeshakingPass();\n    }\n}\nfunction createChildNodeKeysForNode(esTreeNode) {\n    return Object.keys(esTreeNode).filter(key => typeof esTreeNode[key] === 'object' && key.charCodeAt(0) !== 95 /* _ */);\n}\n\nfunction isObjectExpressionNode(node) {\n    return node instanceof NodeBase && node.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ObjectExpression;\n}\nfunction isPropertyNode(node) {\n    return node.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Property;\n}\n\nfunction assembleMemberDescriptions(memberDescriptions, inheritedDescriptions = null) {\n    return Object.create(inheritedDescriptions, memberDescriptions);\n}\nconst UNDEFINED_EXPRESSION = new (class UndefinedExpression extends ExpressionEntity {\n    getLiteralValueAtPath() {\n        return undefined;\n    }\n})();\nconst returnsUnknown = {\n    value: {\n        hasEffectsWhenCalled: null,\n        returns: UNKNOWN_EXPRESSION\n    }\n};\nconst UNKNOWN_LITERAL_BOOLEAN = new (class UnknownBoolean extends ExpressionEntity {\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length === 1) {\n            return getMemberReturnExpressionWhenCalled(literalBooleanMembers, path[0]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalBooleanMembers, path[0], interaction, context);\n        }\n        return true;\n    }\n})();\nconst returnsBoolean = {\n    value: {\n        hasEffectsWhenCalled: null,\n        returns: UNKNOWN_LITERAL_BOOLEAN\n    }\n};\nconst UNKNOWN_LITERAL_NUMBER = new (class UnknownNumber extends ExpressionEntity {\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length === 1) {\n            return getMemberReturnExpressionWhenCalled(literalNumberMembers, path[0]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalNumberMembers, path[0], interaction, context);\n        }\n        return true;\n    }\n})();\nconst returnsNumber = {\n    value: {\n        hasEffectsWhenCalled: null,\n        returns: UNKNOWN_LITERAL_NUMBER\n    }\n};\nconst UNKNOWN_LITERAL_STRING = new (class UnknownString extends ExpressionEntity {\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length === 1) {\n            return getMemberReturnExpressionWhenCalled(literalStringMembers, path[0]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalStringMembers, path[0], interaction, context);\n        }\n        return true;\n    }\n})();\nconst returnsString = {\n    value: {\n        hasEffectsWhenCalled: null,\n        returns: UNKNOWN_LITERAL_STRING\n    }\n};\nconst stringReplace = {\n    value: {\n        hasEffectsWhenCalled({ args }, context) {\n            const argument1 = args[2];\n            return (args.length < 3 ||\n                (typeof argument1.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, {\n                    deoptimizeCache() { }\n                }) === 'symbol' &&\n                    argument1.hasEffectsOnInteractionAtPath(EMPTY_PATH, NODE_INTERACTION_UNKNOWN_CALL, context)));\n        },\n        returns: UNKNOWN_LITERAL_STRING\n    }\n};\nconst objectMembers = assembleMemberDescriptions({\n    hasOwnProperty: returnsBoolean,\n    isPrototypeOf: returnsBoolean,\n    propertyIsEnumerable: returnsBoolean,\n    toLocaleString: returnsString,\n    toString: returnsString,\n    valueOf: returnsUnknown\n});\nconst literalBooleanMembers = assembleMemberDescriptions({\n    valueOf: returnsBoolean\n}, objectMembers);\nconst literalNumberMembers = assembleMemberDescriptions({\n    toExponential: returnsString,\n    toFixed: returnsString,\n    toLocaleString: returnsString,\n    toPrecision: returnsString,\n    valueOf: returnsNumber\n}, objectMembers);\n/**\n * RegExp are stateful when they have the global or sticky flags set.\n * But if we actually don't use them, the side effect does not matter.\n * the check logic in `hasEffectsOnInteractionAtPath`.\n */\nconst literalRegExpMembers = assembleMemberDescriptions({\n    exec: returnsUnknown,\n    test: returnsBoolean\n}, objectMembers);\nconst literalStringMembers = assembleMemberDescriptions({\n    anchor: returnsString,\n    at: returnsUnknown,\n    big: returnsString,\n    blink: returnsString,\n    bold: returnsString,\n    charAt: returnsString,\n    charCodeAt: returnsNumber,\n    codePointAt: returnsUnknown,\n    concat: returnsString,\n    endsWith: returnsBoolean,\n    fixed: returnsString,\n    fontcolor: returnsString,\n    fontsize: returnsString,\n    includes: returnsBoolean,\n    indexOf: returnsNumber,\n    italics: returnsString,\n    lastIndexOf: returnsNumber,\n    link: returnsString,\n    localeCompare: returnsNumber,\n    match: returnsUnknown,\n    matchAll: returnsUnknown,\n    normalize: returnsString,\n    padEnd: returnsString,\n    padStart: returnsString,\n    repeat: returnsString,\n    replace: stringReplace,\n    replaceAll: stringReplace,\n    search: returnsNumber,\n    slice: returnsString,\n    small: returnsString,\n    split: returnsUnknown,\n    startsWith: returnsBoolean,\n    strike: returnsString,\n    sub: returnsString,\n    substr: returnsString,\n    substring: returnsString,\n    sup: returnsString,\n    toLocaleLowerCase: returnsString,\n    toLocaleUpperCase: returnsString,\n    toLowerCase: returnsString,\n    toString: returnsString, // overrides the toString() method of the Object object; it does not inherit Object.prototype.toString()\n    toUpperCase: returnsString,\n    trim: returnsString,\n    trimEnd: returnsString,\n    trimLeft: returnsString,\n    trimRight: returnsString,\n    trimStart: returnsString,\n    valueOf: returnsString\n}, objectMembers);\nfunction getLiteralMembersForValue(value) {\n    if (value instanceof RegExp) {\n        return literalRegExpMembers;\n    }\n    switch (typeof value) {\n        case 'boolean': {\n            return literalBooleanMembers;\n        }\n        case 'number': {\n            return literalNumberMembers;\n        }\n        case 'string': {\n            return literalStringMembers;\n        }\n    }\n    return Object.create(null);\n}\nfunction hasMemberEffectWhenCalled(members, memberName, interaction, context) {\n    if (typeof memberName !== 'string' || !members[memberName]) {\n        return true;\n    }\n    return members[memberName].hasEffectsWhenCalled?.(interaction, context) || false;\n}\nfunction getMemberReturnExpressionWhenCalled(members, memberName) {\n    if (typeof memberName !== 'string' || !members[memberName])\n        return UNKNOWN_RETURN_EXPRESSION;\n    return [members[memberName].returns, false];\n}\n\nclass SpreadElement extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        if (path.length > 0) {\n            this.argument.deoptimizeArgumentsOnInteractionAtPath(interaction, [UnknownKey, ...path], recursionTracker);\n        }\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const { propertyReadSideEffects } = this.scope.context.options\n            .treeshake;\n        return (this.argument.hasEffects(context) ||\n            (propertyReadSideEffects &&\n                (propertyReadSideEffects === 'always' ||\n                    this.argument.hasEffectsOnInteractionAtPath(UNKNOWN_PATH, NODE_INTERACTION_UNKNOWN_ACCESS, context))));\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        // Only properties of properties of the argument could become subject to reassignment\n        // This will also reassign the return values of iterators\n        this.argument.deoptimizePath([UnknownKey, UnknownKey]);\n        this.scope.context.requestTreeshakingPass();\n    }\n}\n\nclass Method extends ExpressionEntity {\n    constructor(description) {\n        super();\n        this.description = description;\n    }\n    deoptimizeArgumentsOnInteractionAtPath({ args, type }, path) {\n        if (type === INTERACTION_CALLED && path.length === 0) {\n            if (this.description.mutatesSelfAsArray) {\n                args[0]?.deoptimizePath(UNKNOWN_INTEGER_PATH);\n            }\n            if (this.description.mutatesArgs) {\n                for (let index = 1; index < args.length; index++) {\n                    args[index].deoptimizePath(UNKNOWN_PATH);\n                }\n            }\n        }\n    }\n    getReturnExpressionWhenCalledAtPath(path, { args }) {\n        if (path.length > 0) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return [\n            this.description.returnsPrimitive ||\n                (this.description.returns === 'self'\n                    ? args[0] || UNKNOWN_EXPRESSION\n                    : this.description.returns()),\n            false\n        ];\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        const { type } = interaction;\n        if (path.length > (type === INTERACTION_ACCESSED ? 1 : 0)) {\n            return true;\n        }\n        if (type === INTERACTION_CALLED) {\n            const { args } = interaction;\n            if (this.description.mutatesSelfAsArray === true &&\n                args[0]?.hasEffectsOnInteractionAtPath(UNKNOWN_INTEGER_PATH, NODE_INTERACTION_UNKNOWN_ASSIGNMENT, context)) {\n                return true;\n            }\n            if (this.description.callsArgs) {\n                for (const argumentIndex of this.description.callsArgs) {\n                    if (args[argumentIndex + 1]?.hasEffectsOnInteractionAtPath(EMPTY_PATH, NODE_INTERACTION_UNKNOWN_CALL, context)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nconst METHOD_RETURNS_BOOLEAN = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: false,\n        returns: null,\n        returnsPrimitive: UNKNOWN_LITERAL_BOOLEAN\n    })\n];\nconst METHOD_RETURNS_STRING = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: false,\n        returns: null,\n        returnsPrimitive: UNKNOWN_LITERAL_STRING\n    })\n];\nconst METHOD_RETURNS_NUMBER = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: false,\n        returns: null,\n        returnsPrimitive: UNKNOWN_LITERAL_NUMBER\n    })\n];\nconst METHOD_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: false,\n        returns: null,\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\n\nconst INTEGER_REG_EXP = /^\\d+$/;\nclass ObjectEntity extends ExpressionEntity {\n    get hasLostTrack() {\n        return isFlagSet(this.flags, 2048 /* Flag.hasLostTrack */);\n    }\n    set hasLostTrack(value) {\n        this.flags = setFlag(this.flags, 2048 /* Flag.hasLostTrack */, value);\n    }\n    get hasUnknownDeoptimizedInteger() {\n        return isFlagSet(this.flags, 4096 /* Flag.hasUnknownDeoptimizedInteger */);\n    }\n    set hasUnknownDeoptimizedInteger(value) {\n        this.flags = setFlag(this.flags, 4096 /* Flag.hasUnknownDeoptimizedInteger */, value);\n    }\n    get hasUnknownDeoptimizedProperty() {\n        return isFlagSet(this.flags, 8192 /* Flag.hasUnknownDeoptimizedProperty */);\n    }\n    set hasUnknownDeoptimizedProperty(value) {\n        this.flags = setFlag(this.flags, 8192 /* Flag.hasUnknownDeoptimizedProperty */, value);\n    }\n    // If a PropertyMap is used, this will be taken as propertiesAndGettersByKey\n    // and we assume there are no setters or getters\n    constructor(properties, prototypeExpression, immutable = false) {\n        super();\n        this.prototypeExpression = prototypeExpression;\n        this.immutable = immutable;\n        this.additionalExpressionsToBeDeoptimized = new Set();\n        this.allProperties = [];\n        this.deoptimizedPaths = Object.create(null);\n        this.expressionsToBeDeoptimizedByKey = Object.create(null);\n        this.gettersByKey = Object.create(null);\n        this.propertiesAndGettersByKey = Object.create(null);\n        this.propertiesAndSettersByKey = Object.create(null);\n        this.settersByKey = Object.create(null);\n        this.unknownIntegerProps = [];\n        this.unmatchableGetters = [];\n        this.unmatchablePropertiesAndGetters = [];\n        this.unmatchableSetters = [];\n        if (Array.isArray(properties)) {\n            this.buildPropertyMaps(properties);\n        }\n        else {\n            this.propertiesAndGettersByKey = this.propertiesAndSettersByKey = properties;\n            for (const propertiesForKey of Object.values(properties)) {\n                this.allProperties.push(...propertiesForKey);\n            }\n        }\n    }\n    deoptimizeAllProperties(noAccessors) {\n        const isDeoptimized = this.hasLostTrack || this.hasUnknownDeoptimizedProperty;\n        if (noAccessors) {\n            this.hasUnknownDeoptimizedProperty = true;\n        }\n        else {\n            this.hasLostTrack = true;\n        }\n        if (isDeoptimized) {\n            return;\n        }\n        for (const properties of [\n            ...Object.values(this.propertiesAndGettersByKey),\n            ...Object.values(this.settersByKey)\n        ]) {\n            for (const property of properties) {\n                property.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        // While the prototype itself cannot be mutated, each property can\n        this.prototypeExpression?.deoptimizePath([UnknownKey, UnknownKey]);\n        this.deoptimizeCachedEntities();\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        const [key, ...subPath] = path;\n        const { args, type } = interaction;\n        if (this.hasLostTrack ||\n            // single paths that are deoptimized will not become getters or setters\n            ((type === INTERACTION_CALLED || path.length > 1) &&\n                (this.hasUnknownDeoptimizedProperty ||\n                    (typeof key === 'string' && this.deoptimizedPaths[key])))) {\n            deoptimizeInteraction(interaction);\n            return;\n        }\n        const [propertiesForExactMatchByKey, relevantPropertiesByKey, relevantUnmatchableProperties] = type === INTERACTION_CALLED || path.length > 1\n            ? [\n                this.propertiesAndGettersByKey,\n                this.propertiesAndGettersByKey,\n                this.unmatchablePropertiesAndGetters\n            ]\n            : type === INTERACTION_ACCESSED\n                ? [this.propertiesAndGettersByKey, this.gettersByKey, this.unmatchableGetters]\n                : [this.propertiesAndSettersByKey, this.settersByKey, this.unmatchableSetters];\n        if (typeof key === 'string') {\n            if (propertiesForExactMatchByKey[key]) {\n                const properties = relevantPropertiesByKey[key];\n                if (properties) {\n                    for (const property of properties) {\n                        property.deoptimizeArgumentsOnInteractionAtPath(interaction, subPath, recursionTracker);\n                    }\n                }\n                if (!this.immutable) {\n                    for (const argument of args) {\n                        if (argument) {\n                            this.additionalExpressionsToBeDeoptimized.add(argument);\n                        }\n                    }\n                }\n                return;\n            }\n            for (const property of relevantUnmatchableProperties) {\n                property.deoptimizeArgumentsOnInteractionAtPath(interaction, subPath, recursionTracker);\n            }\n            if (INTEGER_REG_EXP.test(key)) {\n                for (const property of this.unknownIntegerProps) {\n                    property.deoptimizeArgumentsOnInteractionAtPath(interaction, subPath, recursionTracker);\n                }\n            }\n        }\n        else {\n            for (const properties of [\n                ...Object.values(relevantPropertiesByKey),\n                relevantUnmatchableProperties\n            ]) {\n                for (const property of properties) {\n                    property.deoptimizeArgumentsOnInteractionAtPath(interaction, subPath, recursionTracker);\n                }\n            }\n            for (const property of this.unknownIntegerProps) {\n                property.deoptimizeArgumentsOnInteractionAtPath(interaction, subPath, recursionTracker);\n            }\n        }\n        if (!this.immutable) {\n            for (const argument of args) {\n                if (argument) {\n                    this.additionalExpressionsToBeDeoptimized.add(argument);\n                }\n            }\n        }\n        this.prototypeExpression?.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizeIntegerProperties() {\n        if (this.hasLostTrack ||\n            this.hasUnknownDeoptimizedProperty ||\n            this.hasUnknownDeoptimizedInteger) {\n            return;\n        }\n        this.hasUnknownDeoptimizedInteger = true;\n        for (const [key, propertiesAndGetters] of Object.entries(this.propertiesAndGettersByKey)) {\n            if (INTEGER_REG_EXP.test(key)) {\n                for (const property of propertiesAndGetters) {\n                    property.deoptimizePath(UNKNOWN_PATH);\n                }\n            }\n        }\n        this.deoptimizeCachedIntegerEntities();\n    }\n    // Assumption: If only a specific path is deoptimized, no accessors are created\n    deoptimizePath(path) {\n        if (this.hasLostTrack || this.immutable) {\n            return;\n        }\n        const key = path[0];\n        if (path.length === 1) {\n            if (key === UnknownInteger) {\n                return this.deoptimizeIntegerProperties();\n            }\n            else if (typeof key !== 'string') {\n                return this.deoptimizeAllProperties(key === UnknownNonAccessorKey);\n            }\n            if (!this.deoptimizedPaths[key]) {\n                this.deoptimizedPaths[key] = true;\n                // we only deoptimizeCache exact matches as in all other cases,\n                // we do not return a literal value or return expression\n                const expressionsToBeDeoptimized = this.expressionsToBeDeoptimizedByKey[key];\n                if (expressionsToBeDeoptimized) {\n                    for (const expression of expressionsToBeDeoptimized) {\n                        expression.deoptimizeCache();\n                    }\n                }\n            }\n        }\n        const subPath = path.length === 1 ? UNKNOWN_PATH : path.slice(1);\n        for (const property of typeof key === 'string'\n            ? [\n                ...(this.propertiesAndGettersByKey[key] || this.unmatchablePropertiesAndGetters),\n                ...(this.settersByKey[key] || this.unmatchableSetters)\n            ]\n            : this.allProperties) {\n            property.deoptimizePath(subPath);\n        }\n        this.prototypeExpression?.deoptimizePath(path.length === 1 ? [...path, UnknownKey] : path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        if (path.length === 0) {\n            return UnknownTruthyValue;\n        }\n        const key = path[0];\n        const expressionAtPath = this.getMemberExpressionAndTrackDeopt(key, origin);\n        if (expressionAtPath) {\n            return expressionAtPath.getLiteralValueAtPath(path.slice(1), recursionTracker, origin);\n        }\n        if (this.prototypeExpression) {\n            return this.prototypeExpression.getLiteralValueAtPath(path, recursionTracker, origin);\n        }\n        if (path.length === 1) {\n            return undefined;\n        }\n        return UnknownValue;\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        if (path.length === 0) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        const [key, ...subPath] = path;\n        const expressionAtPath = this.getMemberExpressionAndTrackDeopt(key, origin);\n        if (expressionAtPath) {\n            return expressionAtPath.getReturnExpressionWhenCalledAtPath(subPath, interaction, recursionTracker, origin);\n        }\n        if (this.prototypeExpression) {\n            return this.prototypeExpression.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        const [key, ...subPath] = path;\n        if (subPath.length > 0 || interaction.type === INTERACTION_CALLED) {\n            const expressionAtPath = this.getMemberExpression(key);\n            if (expressionAtPath) {\n                return expressionAtPath.hasEffectsOnInteractionAtPath(subPath, interaction, context);\n            }\n            if (this.prototypeExpression) {\n                return this.prototypeExpression.hasEffectsOnInteractionAtPath(path, interaction, context);\n            }\n            return true;\n        }\n        if (key === UnknownNonAccessorKey)\n            return false;\n        if (this.hasLostTrack)\n            return true;\n        const [propertiesAndAccessorsByKey, accessorsByKey, unmatchableAccessors] = interaction.type === INTERACTION_ACCESSED\n            ? [this.propertiesAndGettersByKey, this.gettersByKey, this.unmatchableGetters]\n            : [this.propertiesAndSettersByKey, this.settersByKey, this.unmatchableSetters];\n        if (typeof key === 'string') {\n            if (propertiesAndAccessorsByKey[key]) {\n                const accessors = accessorsByKey[key];\n                if (accessors) {\n                    for (const accessor of accessors) {\n                        if (accessor.hasEffectsOnInteractionAtPath(subPath, interaction, context))\n                            return true;\n                    }\n                }\n                return false;\n            }\n            for (const accessor of unmatchableAccessors) {\n                if (accessor.hasEffectsOnInteractionAtPath(subPath, interaction, context)) {\n                    return true;\n                }\n            }\n        }\n        else {\n            for (const accessors of [...Object.values(accessorsByKey), unmatchableAccessors]) {\n                for (const accessor of accessors) {\n                    if (accessor.hasEffectsOnInteractionAtPath(subPath, interaction, context))\n                        return true;\n                }\n            }\n        }\n        if (this.prototypeExpression) {\n            return this.prototypeExpression.hasEffectsOnInteractionAtPath(path, interaction, context);\n        }\n        return false;\n    }\n    buildPropertyMaps(properties) {\n        const { allProperties, propertiesAndGettersByKey, propertiesAndSettersByKey, settersByKey, gettersByKey, unknownIntegerProps, unmatchablePropertiesAndGetters, unmatchableGetters, unmatchableSetters } = this;\n        const unmatchablePropertiesAndSetters = [];\n        for (let index = properties.length - 1; index >= 0; index--) {\n            const { key, kind, property } = properties[index];\n            allProperties.push(property);\n            if (typeof key === 'string') {\n                if (kind === 'set') {\n                    if (!propertiesAndSettersByKey[key]) {\n                        propertiesAndSettersByKey[key] = [property, ...unmatchablePropertiesAndSetters];\n                        settersByKey[key] = [property, ...unmatchableSetters];\n                    }\n                }\n                else if (kind === 'get') {\n                    if (!propertiesAndGettersByKey[key]) {\n                        propertiesAndGettersByKey[key] = [property, ...unmatchablePropertiesAndGetters];\n                        gettersByKey[key] = [property, ...unmatchableGetters];\n                    }\n                }\n                else {\n                    if (!propertiesAndSettersByKey[key]) {\n                        propertiesAndSettersByKey[key] = [property, ...unmatchablePropertiesAndSetters];\n                    }\n                    if (!propertiesAndGettersByKey[key]) {\n                        propertiesAndGettersByKey[key] = [property, ...unmatchablePropertiesAndGetters];\n                    }\n                }\n            }\n            else {\n                if (key === UnknownInteger) {\n                    unknownIntegerProps.push(property);\n                    continue;\n                }\n                if (kind === 'set')\n                    unmatchableSetters.push(property);\n                if (kind === 'get')\n                    unmatchableGetters.push(property);\n                if (kind !== 'get')\n                    unmatchablePropertiesAndSetters.push(property);\n                if (kind !== 'set')\n                    unmatchablePropertiesAndGetters.push(property);\n            }\n        }\n    }\n    deoptimizeCachedEntities() {\n        for (const expressionsToBeDeoptimized of Object.values(this.expressionsToBeDeoptimizedByKey)) {\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizeCache();\n            }\n        }\n        for (const expression of this.additionalExpressionsToBeDeoptimized) {\n            expression.deoptimizePath(UNKNOWN_PATH);\n        }\n    }\n    deoptimizeCachedIntegerEntities() {\n        for (const [key, expressionsToBeDeoptimized] of Object.entries(this.expressionsToBeDeoptimizedByKey)) {\n            if (INTEGER_REG_EXP.test(key)) {\n                for (const expression of expressionsToBeDeoptimized) {\n                    expression.deoptimizeCache();\n                }\n            }\n        }\n        for (const expression of this.additionalExpressionsToBeDeoptimized) {\n            expression.deoptimizePath(UNKNOWN_INTEGER_PATH);\n        }\n    }\n    getMemberExpression(key) {\n        if (this.hasLostTrack ||\n            this.hasUnknownDeoptimizedProperty ||\n            typeof key !== 'string' ||\n            (this.hasUnknownDeoptimizedInteger && INTEGER_REG_EXP.test(key)) ||\n            this.deoptimizedPaths[key]) {\n            return UNKNOWN_EXPRESSION;\n        }\n        const properties = this.propertiesAndGettersByKey[key];\n        if (properties?.length === 1) {\n            return properties[0];\n        }\n        if (properties ||\n            this.unmatchablePropertiesAndGetters.length > 0 ||\n            (this.unknownIntegerProps.length > 0 && INTEGER_REG_EXP.test(key))) {\n            return UNKNOWN_EXPRESSION;\n        }\n        return null;\n    }\n    getMemberExpressionAndTrackDeopt(key, origin) {\n        if (typeof key !== 'string') {\n            return UNKNOWN_EXPRESSION;\n        }\n        const expression = this.getMemberExpression(key);\n        if (!(expression === UNKNOWN_EXPRESSION || this.immutable)) {\n            const expressionsToBeDeoptimized = (this.expressionsToBeDeoptimizedByKey[key] =\n                this.expressionsToBeDeoptimizedByKey[key] || []);\n            expressionsToBeDeoptimized.push(origin);\n        }\n        return expression;\n    }\n}\n\nconst isInteger = (property) => typeof property === 'string' && /^\\d+$/.test(property);\n// This makes sure unknown properties are not handled as \"undefined\" but as\n// \"unknown\" but without access side effects. An exception is done for numeric\n// properties as we do not expect new builtin properties to be numbers, this\n// will improve tree-shaking for out-of-bounds array properties\nconst OBJECT_PROTOTYPE_FALLBACK = new (class ObjectPrototypeFallbackExpression extends ExpressionEntity {\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path) {\n        if (interaction.type === INTERACTION_CALLED && path.length === 1 && !isInteger(path[0])) {\n            deoptimizeInteraction(interaction);\n        }\n    }\n    getLiteralValueAtPath(path) {\n        // We ignore number properties as we do not expect new properties to be\n        // numbers and also want to keep handling out-of-bound array elements as\n        // \"undefined\"\n        return path.length === 1 && isInteger(path[0]) ? undefined : UnknownValue;\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return path.length > 1 || type === INTERACTION_CALLED;\n    }\n})();\nconst OBJECT_PROTOTYPE = new ObjectEntity({\n    __proto__: null,\n    hasOwnProperty: METHOD_RETURNS_BOOLEAN,\n    isPrototypeOf: METHOD_RETURNS_BOOLEAN,\n    propertyIsEnumerable: METHOD_RETURNS_BOOLEAN,\n    toLocaleString: METHOD_RETURNS_STRING,\n    toString: METHOD_RETURNS_STRING,\n    valueOf: METHOD_RETURNS_UNKNOWN\n}, OBJECT_PROTOTYPE_FALLBACK, true);\n\nconst NEW_ARRAY_PROPERTIES = [\n    { key: UnknownInteger, kind: 'init', property: UNKNOWN_EXPRESSION },\n    { key: 'length', kind: 'init', property: UNKNOWN_LITERAL_NUMBER }\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_BOOLEAN = [\n    new Method({\n        callsArgs: [0],\n        mutatesArgs: false,\n        mutatesSelfAsArray: 'deopt-only',\n        returns: null,\n        returnsPrimitive: UNKNOWN_LITERAL_BOOLEAN\n    })\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NUMBER = [\n    new Method({\n        callsArgs: [0],\n        mutatesArgs: false,\n        mutatesSelfAsArray: 'deopt-only',\n        returns: null,\n        returnsPrimitive: UNKNOWN_LITERAL_NUMBER\n    })\n];\nconst METHOD_MUTATES_SELF_RETURNS_NEW_ARRAY = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: true,\n        returns: () => new ObjectEntity(NEW_ARRAY_PROPERTIES, ARRAY_PROTOTYPE),\n        returnsPrimitive: null\n    })\n];\nconst METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: 'deopt-only',\n        returns: () => new ObjectEntity(NEW_ARRAY_PROPERTIES, ARRAY_PROTOTYPE),\n        returnsPrimitive: null\n    })\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY = [\n    new Method({\n        callsArgs: [0],\n        mutatesArgs: false,\n        mutatesSelfAsArray: 'deopt-only',\n        returns: () => new ObjectEntity(NEW_ARRAY_PROPERTIES, ARRAY_PROTOTYPE),\n        returnsPrimitive: null\n    })\n];\nconst METHOD_MUTATES_SELF_AND_ARGS_RETURNS_NUMBER = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: true,\n        mutatesSelfAsArray: true,\n        returns: null,\n        returnsPrimitive: UNKNOWN_LITERAL_NUMBER\n    })\n];\nconst METHOD_MUTATES_SELF_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: true,\n        returns: null,\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\nconst METHOD_DEOPTS_SELF_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: 'deopt-only',\n        returns: null,\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\nconst METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN = [\n    new Method({\n        callsArgs: [0],\n        mutatesArgs: false,\n        mutatesSelfAsArray: 'deopt-only',\n        returns: null,\n        returnsPrimitive: UNKNOWN_EXPRESSION\n    })\n];\nconst METHOD_MUTATES_SELF_RETURNS_SELF = [\n    new Method({\n        callsArgs: null,\n        mutatesArgs: false,\n        mutatesSelfAsArray: true,\n        returns: 'self',\n        returnsPrimitive: null\n    })\n];\nconst METHOD_CALLS_ARG_MUTATES_SELF_RETURNS_SELF = [\n    new Method({\n        callsArgs: [0],\n        mutatesArgs: false,\n        mutatesSelfAsArray: true,\n        returns: 'self',\n        returnsPrimitive: null\n    })\n];\nconst ARRAY_PROTOTYPE = new ObjectEntity({\n    __proto__: null,\n    // We assume that accessors have effects as we do not track the accessed value afterwards\n    at: METHOD_DEOPTS_SELF_RETURNS_UNKNOWN,\n    concat: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY,\n    copyWithin: METHOD_MUTATES_SELF_RETURNS_SELF,\n    entries: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY,\n    every: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_BOOLEAN,\n    fill: METHOD_MUTATES_SELF_RETURNS_SELF,\n    filter: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY,\n    find: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN,\n    findIndex: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NUMBER,\n    findLast: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN,\n    findLastIndex: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NUMBER,\n    flat: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY,\n    flatMap: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY,\n    forEach: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN,\n    includes: METHOD_RETURNS_BOOLEAN,\n    indexOf: METHOD_RETURNS_NUMBER,\n    join: METHOD_RETURNS_STRING,\n    keys: METHOD_RETURNS_UNKNOWN,\n    lastIndexOf: METHOD_RETURNS_NUMBER,\n    map: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_NEW_ARRAY,\n    pop: METHOD_MUTATES_SELF_RETURNS_UNKNOWN,\n    push: METHOD_MUTATES_SELF_AND_ARGS_RETURNS_NUMBER,\n    reduce: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN,\n    reduceRight: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_UNKNOWN,\n    reverse: METHOD_MUTATES_SELF_RETURNS_SELF,\n    shift: METHOD_MUTATES_SELF_RETURNS_UNKNOWN,\n    slice: METHOD_DEOPTS_SELF_RETURNS_NEW_ARRAY,\n    some: METHOD_CALLS_ARG_DEOPTS_SELF_RETURNS_BOOLEAN,\n    sort: METHOD_CALLS_ARG_MUTATES_SELF_RETURNS_SELF,\n    splice: METHOD_MUTATES_SELF_RETURNS_NEW_ARRAY,\n    toLocaleString: METHOD_RETURNS_STRING,\n    toString: METHOD_RETURNS_STRING,\n    unshift: METHOD_MUTATES_SELF_AND_ARGS_RETURNS_NUMBER,\n    values: METHOD_DEOPTS_SELF_RETURNS_UNKNOWN\n}, OBJECT_PROTOTYPE, true);\n\nclass ArrayExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return this.getObjectEntity().hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        let hasSpread = false;\n        for (let index = 0; index < this.elements.length; index++) {\n            const element = this.elements[index];\n            if (element && (hasSpread || element instanceof SpreadElement)) {\n                hasSpread = true;\n                element.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        this.scope.context.requestTreeshakingPass();\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        const properties = [\n            { key: 'length', kind: 'init', property: UNKNOWN_LITERAL_NUMBER }\n        ];\n        let hasSpread = false;\n        for (let index = 0; index < this.elements.length; index++) {\n            const element = this.elements[index];\n            if (hasSpread || element instanceof SpreadElement) {\n                if (element) {\n                    hasSpread = true;\n                    properties.unshift({ key: UnknownInteger, kind: 'init', property: element });\n                }\n            }\n            else if (element) {\n                properties.push({ key: String(index), kind: 'init', property: element });\n            }\n            else {\n                properties.push({ key: String(index), kind: 'init', property: UNDEFINED_EXPRESSION });\n            }\n        }\n        return (this.objectEntity = new ObjectEntity(properties, ARRAY_PROTOTYPE));\n    }\n}\n\n/* eslint sort-keys: \"off\" */\nconst ValueProperties = Symbol('Value Properties');\nconst getTruthyLiteralValue = () => UnknownTruthyValue;\nconst returnFalse = () => false;\nconst returnTrue = () => true;\nconst PURE = {\n    deoptimizeArgumentsOnCall: doNothing,\n    getLiteralValue: getTruthyLiteralValue,\n    hasEffectsWhenCalled: returnFalse\n};\nconst IMPURE = {\n    deoptimizeArgumentsOnCall: doNothing,\n    getLiteralValue: getTruthyLiteralValue,\n    hasEffectsWhenCalled: returnTrue\n};\nconst PURE_WITH_ARRAY = {\n    deoptimizeArgumentsOnCall: doNothing,\n    getLiteralValue: getTruthyLiteralValue,\n    hasEffectsWhenCalled({ args }) {\n        return args.length > 1 && !(args[1] instanceof ArrayExpression);\n    }\n};\nconst GETTER_ACCESS = {\n    deoptimizeArgumentsOnCall: doNothing,\n    getLiteralValue: getTruthyLiteralValue,\n    hasEffectsWhenCalled({ args }, context) {\n        const [_thisArgument, firstArgument] = args;\n        return (!(firstArgument instanceof ExpressionEntity) ||\n            firstArgument.hasEffectsOnInteractionAtPath(UNKNOWN_PATH, NODE_INTERACTION_UNKNOWN_ACCESS, context));\n    }\n};\n// We use shortened variables to reduce file size here\n/* OBJECT */\nconst O = {\n    __proto__: null,\n    [ValueProperties]: IMPURE\n};\n/* PURE FUNCTION */\nconst PF = {\n    __proto__: null,\n    [ValueProperties]: PURE\n};\n/* PURE FUNCTION IF FIRST ARG DOES NOT CONTAIN A GETTER */\nconst PF_NO_GETTER = {\n    __proto__: null,\n    [ValueProperties]: GETTER_ACCESS\n};\n/* FUNCTION THAT MUTATES FIRST ARG WITHOUT TRIGGERING ACCESSORS */\nconst MUTATES_ARG_WITHOUT_ACCESSOR = {\n    __proto__: null,\n    [ValueProperties]: {\n        deoptimizeArgumentsOnCall({ args: [, firstArgument] }) {\n            firstArgument?.deoptimizePath(UNKNOWN_PATH);\n        },\n        getLiteralValue: getTruthyLiteralValue,\n        hasEffectsWhenCalled({ args }, context) {\n            return (args.length <= 1 ||\n                args[1].hasEffectsOnInteractionAtPath(UNKNOWN_NON_ACCESSOR_PATH, NODE_INTERACTION_UNKNOWN_ASSIGNMENT, context));\n        }\n    }\n};\n/* CONSTRUCTOR */\nconst C = {\n    __proto__: null,\n    [ValueProperties]: IMPURE,\n    prototype: O\n};\n/* PURE CONSTRUCTOR */\nconst PC = {\n    __proto__: null,\n    [ValueProperties]: PURE,\n    prototype: O\n};\nconst PC_WITH_ARRAY = {\n    __proto__: null,\n    [ValueProperties]: PURE_WITH_ARRAY,\n    prototype: O\n};\nconst ARRAY_TYPE = {\n    __proto__: null,\n    [ValueProperties]: PURE,\n    from: O,\n    of: PF,\n    prototype: O\n};\nconst INTL_MEMBER = {\n    __proto__: null,\n    [ValueProperties]: PURE,\n    supportedLocalesOf: PC\n};\nconst knownGlobals = {\n    // Placeholders for global objects to avoid shape mutations\n    global: O,\n    globalThis: O,\n    self: O,\n    window: O,\n    // Common globals\n    __proto__: null,\n    [ValueProperties]: IMPURE,\n    Array: {\n        __proto__: null,\n        [ValueProperties]: IMPURE,\n        from: O,\n        isArray: PF,\n        of: PF,\n        prototype: O\n    },\n    ArrayBuffer: {\n        __proto__: null,\n        [ValueProperties]: PURE,\n        isView: PF,\n        prototype: O\n    },\n    AggregateError: PC_WITH_ARRAY,\n    Atomics: O,\n    BigInt: C,\n    BigInt64Array: C,\n    BigUint64Array: C,\n    Boolean: PC,\n    constructor: C,\n    DataView: PC,\n    Date: {\n        __proto__: null,\n        [ValueProperties]: PURE,\n        now: PF,\n        parse: PF,\n        prototype: O,\n        UTC: PF\n    },\n    decodeURI: PF,\n    decodeURIComponent: PF,\n    encodeURI: PF,\n    encodeURIComponent: PF,\n    Error: PC,\n    escape: PF,\n    eval: O,\n    EvalError: PC,\n    FinalizationRegistry: C,\n    Float32Array: ARRAY_TYPE,\n    Float64Array: ARRAY_TYPE,\n    Function: C,\n    hasOwnProperty: O,\n    Infinity: O,\n    Int16Array: ARRAY_TYPE,\n    Int32Array: ARRAY_TYPE,\n    Int8Array: ARRAY_TYPE,\n    isFinite: PF,\n    isNaN: PF,\n    isPrototypeOf: O,\n    JSON: O,\n    Map: PC_WITH_ARRAY,\n    Math: {\n        __proto__: null,\n        [ValueProperties]: IMPURE,\n        abs: PF,\n        acos: PF,\n        acosh: PF,\n        asin: PF,\n        asinh: PF,\n        atan: PF,\n        atan2: PF,\n        atanh: PF,\n        cbrt: PF,\n        ceil: PF,\n        clz32: PF,\n        cos: PF,\n        cosh: PF,\n        exp: PF,\n        expm1: PF,\n        floor: PF,\n        fround: PF,\n        hypot: PF,\n        imul: PF,\n        log: PF,\n        log10: PF,\n        log1p: PF,\n        log2: PF,\n        max: PF,\n        min: PF,\n        pow: PF,\n        random: PF,\n        round: PF,\n        sign: PF,\n        sin: PF,\n        sinh: PF,\n        sqrt: PF,\n        tan: PF,\n        tanh: PF,\n        trunc: PF\n    },\n    NaN: O,\n    Number: {\n        __proto__: null,\n        [ValueProperties]: PURE,\n        isFinite: PF,\n        isInteger: PF,\n        isNaN: PF,\n        isSafeInteger: PF,\n        parseFloat: PF,\n        parseInt: PF,\n        prototype: O\n    },\n    Object: {\n        __proto__: null,\n        [ValueProperties]: PURE,\n        create: PF,\n        // Technically those can throw in certain situations, but we ignore this as\n        // code that relies on this will hopefully wrap this in a try-catch, which\n        // deoptimizes everything anyway\n        defineProperty: MUTATES_ARG_WITHOUT_ACCESSOR,\n        defineProperties: MUTATES_ARG_WITHOUT_ACCESSOR,\n        freeze: MUTATES_ARG_WITHOUT_ACCESSOR,\n        getOwnPropertyDescriptor: PF,\n        getOwnPropertyDescriptors: PF,\n        getOwnPropertyNames: PF,\n        getOwnPropertySymbols: PF,\n        getPrototypeOf: PF,\n        hasOwn: PF,\n        is: PF,\n        isExtensible: PF,\n        isFrozen: PF,\n        isSealed: PF,\n        keys: PF,\n        fromEntries: O,\n        entries: PF_NO_GETTER,\n        values: PF_NO_GETTER,\n        prototype: O\n    },\n    parseFloat: PF,\n    parseInt: PF,\n    Promise: {\n        __proto__: null,\n        [ValueProperties]: IMPURE,\n        all: O,\n        allSettled: O,\n        any: O,\n        prototype: O,\n        race: O,\n        reject: O,\n        resolve: O\n    },\n    propertyIsEnumerable: O,\n    Proxy: {\n        __proto__: null,\n        [ValueProperties]: {\n            deoptimizeArgumentsOnCall: ({ args: [, target, parameter] }) => {\n                if (isObjectExpressionNode(parameter)) {\n                    const hasSpreadElement = parameter.properties.some(property => !isPropertyNode(property));\n                    if (!hasSpreadElement) {\n                        for (const property of parameter.properties) {\n                            property.deoptimizeArgumentsOnInteractionAtPath({\n                                args: [null, target],\n                                type: INTERACTION_CALLED,\n                                withNew: false\n                            }, EMPTY_PATH, SHARED_RECURSION_TRACKER);\n                        }\n                        return;\n                    }\n                }\n                target.deoptimizePath(UNKNOWN_PATH);\n            },\n            getLiteralValue: getTruthyLiteralValue,\n            hasEffectsWhenCalled: returnTrue\n        }\n    },\n    RangeError: PC,\n    ReferenceError: PC,\n    Reflect: O,\n    RegExp: PC,\n    Set: PC_WITH_ARRAY,\n    SharedArrayBuffer: C,\n    String: {\n        __proto__: null,\n        [ValueProperties]: PURE,\n        fromCharCode: PF,\n        fromCodePoint: PF,\n        prototype: O,\n        raw: PF\n    },\n    Symbol: {\n        __proto__: null,\n        [ValueProperties]: PURE,\n        for: PF,\n        keyFor: PF,\n        prototype: O,\n        toStringTag: {\n            __proto__: null,\n            [ValueProperties]: {\n                deoptimizeArgumentsOnCall: doNothing,\n                getLiteralValue() {\n                    return SymbolToStringTag;\n                },\n                hasEffectsWhenCalled: returnTrue\n            }\n        }\n    },\n    SyntaxError: PC,\n    toLocaleString: O,\n    toString: O,\n    TypeError: PC,\n    Uint16Array: ARRAY_TYPE,\n    Uint32Array: ARRAY_TYPE,\n    Uint8Array: ARRAY_TYPE,\n    Uint8ClampedArray: ARRAY_TYPE,\n    // Technically, this is a global, but it needs special handling\n    // undefined: ?,\n    unescape: PF,\n    URIError: PC,\n    valueOf: O,\n    WeakMap: PC_WITH_ARRAY,\n    WeakRef: C,\n    WeakSet: PC_WITH_ARRAY,\n    // Additional globals shared by Node and Browser that are not strictly part of the language\n    clearInterval: C,\n    clearTimeout: C,\n    console: {\n        __proto__: null,\n        [ValueProperties]: IMPURE,\n        assert: C,\n        clear: C,\n        count: C,\n        countReset: C,\n        debug: C,\n        dir: C,\n        dirxml: C,\n        error: C,\n        exception: C,\n        group: C,\n        groupCollapsed: C,\n        groupEnd: C,\n        info: C,\n        log: C,\n        table: C,\n        time: C,\n        timeEnd: C,\n        timeLog: C,\n        trace: C,\n        warn: C\n    },\n    Intl: {\n        __proto__: null,\n        [ValueProperties]: IMPURE,\n        Collator: INTL_MEMBER,\n        DateTimeFormat: INTL_MEMBER,\n        DisplayNames: INTL_MEMBER,\n        ListFormat: INTL_MEMBER,\n        Locale: INTL_MEMBER,\n        NumberFormat: INTL_MEMBER,\n        PluralRules: INTL_MEMBER,\n        RelativeTimeFormat: INTL_MEMBER,\n        Segmenter: INTL_MEMBER\n    },\n    setInterval: C,\n    setTimeout: C,\n    TextDecoder: C,\n    TextEncoder: C,\n    URL: {\n        __proto__: null,\n        [ValueProperties]: IMPURE,\n        prototype: O,\n        canParse: PF\n    },\n    URLSearchParams: C,\n    // Browser specific globals\n    AbortController: C,\n    AbortSignal: C,\n    addEventListener: O,\n    alert: O,\n    AnalyserNode: C,\n    Animation: C,\n    AnimationEvent: C,\n    applicationCache: O,\n    ApplicationCache: C,\n    ApplicationCacheErrorEvent: C,\n    atob: O,\n    Attr: C,\n    Audio: C,\n    AudioBuffer: C,\n    AudioBufferSourceNode: C,\n    AudioContext: C,\n    AudioDestinationNode: C,\n    AudioListener: C,\n    AudioNode: C,\n    AudioParam: C,\n    AudioProcessingEvent: C,\n    AudioScheduledSourceNode: C,\n    AudioWorkletNode: C,\n    BarProp: C,\n    BaseAudioContext: C,\n    BatteryManager: C,\n    BeforeUnloadEvent: C,\n    BiquadFilterNode: C,\n    Blob: C,\n    BlobEvent: C,\n    blur: O,\n    BroadcastChannel: C,\n    btoa: O,\n    ByteLengthQueuingStrategy: C,\n    Cache: C,\n    caches: O,\n    CacheStorage: C,\n    cancelAnimationFrame: O,\n    cancelIdleCallback: O,\n    CanvasCaptureMediaStreamTrack: C,\n    CanvasGradient: C,\n    CanvasPattern: C,\n    CanvasRenderingContext2D: C,\n    ChannelMergerNode: C,\n    ChannelSplitterNode: C,\n    CharacterData: C,\n    clientInformation: O,\n    ClipboardEvent: C,\n    close: O,\n    closed: O,\n    CloseEvent: C,\n    Comment: C,\n    CompositionEvent: C,\n    confirm: O,\n    ConstantSourceNode: C,\n    ConvolverNode: C,\n    CountQueuingStrategy: C,\n    createImageBitmap: O,\n    Credential: C,\n    CredentialsContainer: C,\n    crypto: O,\n    Crypto: C,\n    CryptoKey: C,\n    CSS: C,\n    CSSConditionRule: C,\n    CSSFontFaceRule: C,\n    CSSGroupingRule: C,\n    CSSImportRule: C,\n    CSSKeyframeRule: C,\n    CSSKeyframesRule: C,\n    CSSMediaRule: C,\n    CSSNamespaceRule: C,\n    CSSPageRule: C,\n    CSSRule: C,\n    CSSRuleList: C,\n    CSSStyleDeclaration: C,\n    CSSStyleRule: C,\n    CSSStyleSheet: C,\n    CSSSupportsRule: C,\n    CustomElementRegistry: C,\n    customElements: O,\n    CustomEvent: {\n        __proto__: null,\n        [ValueProperties]: {\n            deoptimizeArgumentsOnCall({ args }) {\n                args[2]?.deoptimizePath(['detail']);\n            },\n            getLiteralValue: getTruthyLiteralValue,\n            hasEffectsWhenCalled: returnFalse\n        },\n        prototype: O\n    },\n    DataTransfer: C,\n    DataTransferItem: C,\n    DataTransferItemList: C,\n    defaultstatus: O,\n    defaultStatus: O,\n    DelayNode: C,\n    DeviceMotionEvent: C,\n    DeviceOrientationEvent: C,\n    devicePixelRatio: O,\n    dispatchEvent: O,\n    document: O,\n    Document: C,\n    DocumentFragment: C,\n    DocumentType: C,\n    DOMError: C,\n    DOMException: C,\n    DOMImplementation: C,\n    DOMMatrix: C,\n    DOMMatrixReadOnly: C,\n    DOMParser: C,\n    DOMPoint: C,\n    DOMPointReadOnly: C,\n    DOMQuad: C,\n    DOMRect: C,\n    DOMRectReadOnly: C,\n    DOMStringList: C,\n    DOMStringMap: C,\n    DOMTokenList: C,\n    DragEvent: C,\n    DynamicsCompressorNode: C,\n    Element: C,\n    ErrorEvent: C,\n    Event: C,\n    EventSource: C,\n    EventTarget: C,\n    external: O,\n    fetch: O,\n    File: C,\n    FileList: C,\n    FileReader: C,\n    find: O,\n    focus: O,\n    FocusEvent: C,\n    FontFace: C,\n    FontFaceSetLoadEvent: C,\n    FormData: C,\n    frames: O,\n    GainNode: C,\n    Gamepad: C,\n    GamepadButton: C,\n    GamepadEvent: C,\n    getComputedStyle: O,\n    getSelection: O,\n    HashChangeEvent: C,\n    Headers: C,\n    history: O,\n    History: C,\n    HTMLAllCollection: C,\n    HTMLAnchorElement: C,\n    HTMLAreaElement: C,\n    HTMLAudioElement: C,\n    HTMLBaseElement: C,\n    HTMLBodyElement: C,\n    HTMLBRElement: C,\n    HTMLButtonElement: C,\n    HTMLCanvasElement: C,\n    HTMLCollection: C,\n    HTMLContentElement: C,\n    HTMLDataElement: C,\n    HTMLDataListElement: C,\n    HTMLDetailsElement: C,\n    HTMLDialogElement: C,\n    HTMLDirectoryElement: C,\n    HTMLDivElement: C,\n    HTMLDListElement: C,\n    HTMLDocument: C,\n    HTMLElement: C,\n    HTMLEmbedElement: C,\n    HTMLFieldSetElement: C,\n    HTMLFontElement: C,\n    HTMLFormControlsCollection: C,\n    HTMLFormElement: C,\n    HTMLFrameElement: C,\n    HTMLFrameSetElement: C,\n    HTMLHeadElement: C,\n    HTMLHeadingElement: C,\n    HTMLHRElement: C,\n    HTMLHtmlElement: C,\n    HTMLIFrameElement: C,\n    HTMLImageElement: C,\n    HTMLInputElement: C,\n    HTMLLabelElement: C,\n    HTMLLegendElement: C,\n    HTMLLIElement: C,\n    HTMLLinkElement: C,\n    HTMLMapElement: C,\n    HTMLMarqueeElement: C,\n    HTMLMediaElement: C,\n    HTMLMenuElement: C,\n    HTMLMetaElement: C,\n    HTMLMeterElement: C,\n    HTMLModElement: C,\n    HTMLObjectElement: C,\n    HTMLOListElement: C,\n    HTMLOptGroupElement: C,\n    HTMLOptionElement: C,\n    HTMLOptionsCollection: C,\n    HTMLOutputElement: C,\n    HTMLParagraphElement: C,\n    HTMLParamElement: C,\n    HTMLPictureElement: C,\n    HTMLPreElement: C,\n    HTMLProgressElement: C,\n    HTMLQuoteElement: C,\n    HTMLScriptElement: C,\n    HTMLSelectElement: C,\n    HTMLShadowElement: C,\n    HTMLSlotElement: C,\n    HTMLSourceElement: C,\n    HTMLSpanElement: C,\n    HTMLStyleElement: C,\n    HTMLTableCaptionElement: C,\n    HTMLTableCellElement: C,\n    HTMLTableColElement: C,\n    HTMLTableElement: C,\n    HTMLTableRowElement: C,\n    HTMLTableSectionElement: C,\n    HTMLTemplateElement: C,\n    HTMLTextAreaElement: C,\n    HTMLTimeElement: C,\n    HTMLTitleElement: C,\n    HTMLTrackElement: C,\n    HTMLUListElement: C,\n    HTMLUnknownElement: C,\n    HTMLVideoElement: C,\n    IDBCursor: C,\n    IDBCursorWithValue: C,\n    IDBDatabase: C,\n    IDBFactory: C,\n    IDBIndex: C,\n    IDBKeyRange: C,\n    IDBObjectStore: C,\n    IDBOpenDBRequest: C,\n    IDBRequest: C,\n    IDBTransaction: C,\n    IDBVersionChangeEvent: C,\n    IdleDeadline: C,\n    IIRFilterNode: C,\n    Image: C,\n    ImageBitmap: C,\n    ImageBitmapRenderingContext: C,\n    ImageCapture: C,\n    ImageData: C,\n    indexedDB: O,\n    innerHeight: O,\n    innerWidth: O,\n    InputEvent: C,\n    IntersectionObserver: C,\n    IntersectionObserverEntry: C,\n    isSecureContext: O,\n    KeyboardEvent: C,\n    KeyframeEffect: C,\n    length: O,\n    localStorage: O,\n    location: O,\n    Location: C,\n    locationbar: O,\n    matchMedia: O,\n    MediaDeviceInfo: C,\n    MediaDevices: C,\n    MediaElementAudioSourceNode: C,\n    MediaEncryptedEvent: C,\n    MediaError: C,\n    MediaKeyMessageEvent: C,\n    MediaKeySession: C,\n    MediaKeyStatusMap: C,\n    MediaKeySystemAccess: C,\n    MediaList: C,\n    MediaQueryList: C,\n    MediaQueryListEvent: C,\n    MediaRecorder: C,\n    MediaSettingsRange: C,\n    MediaSource: C,\n    MediaStream: C,\n    MediaStreamAudioDestinationNode: C,\n    MediaStreamAudioSourceNode: C,\n    MediaStreamEvent: C,\n    MediaStreamTrack: C,\n    MediaStreamTrackEvent: C,\n    menubar: O,\n    MessageChannel: C,\n    MessageEvent: C,\n    MessagePort: C,\n    MIDIAccess: C,\n    MIDIConnectionEvent: C,\n    MIDIInput: C,\n    MIDIInputMap: C,\n    MIDIMessageEvent: C,\n    MIDIOutput: C,\n    MIDIOutputMap: C,\n    MIDIPort: C,\n    MimeType: C,\n    MimeTypeArray: C,\n    MouseEvent: C,\n    moveBy: O,\n    moveTo: O,\n    MutationEvent: C,\n    MutationObserver: C,\n    MutationRecord: C,\n    name: O,\n    NamedNodeMap: C,\n    NavigationPreloadManager: C,\n    navigator: O,\n    Navigator: C,\n    NetworkInformation: C,\n    Node: C,\n    NodeFilter: O,\n    NodeIterator: C,\n    NodeList: C,\n    Notification: C,\n    OfflineAudioCompletionEvent: C,\n    OfflineAudioContext: C,\n    offscreenBuffering: O,\n    OffscreenCanvas: C,\n    open: O,\n    openDatabase: O,\n    Option: C,\n    origin: O,\n    OscillatorNode: C,\n    outerHeight: O,\n    outerWidth: O,\n    PageTransitionEvent: C,\n    pageXOffset: O,\n    pageYOffset: O,\n    PannerNode: C,\n    parent: O,\n    Path2D: C,\n    PaymentAddress: C,\n    PaymentRequest: C,\n    PaymentRequestUpdateEvent: C,\n    PaymentResponse: C,\n    performance: O,\n    Performance: C,\n    PerformanceEntry: C,\n    PerformanceLongTaskTiming: C,\n    PerformanceMark: C,\n    PerformanceMeasure: C,\n    PerformanceNavigation: C,\n    PerformanceNavigationTiming: C,\n    PerformanceObserver: C,\n    PerformanceObserverEntryList: C,\n    PerformancePaintTiming: C,\n    PerformanceResourceTiming: C,\n    PerformanceTiming: C,\n    PeriodicWave: C,\n    Permissions: C,\n    PermissionStatus: C,\n    personalbar: O,\n    PhotoCapabilities: C,\n    Plugin: C,\n    PluginArray: C,\n    PointerEvent: C,\n    PopStateEvent: C,\n    postMessage: O,\n    Presentation: C,\n    PresentationAvailability: C,\n    PresentationConnection: C,\n    PresentationConnectionAvailableEvent: C,\n    PresentationConnectionCloseEvent: C,\n    PresentationConnectionList: C,\n    PresentationReceiver: C,\n    PresentationRequest: C,\n    print: O,\n    ProcessingInstruction: C,\n    ProgressEvent: C,\n    PromiseRejectionEvent: C,\n    prompt: O,\n    PushManager: C,\n    PushSubscription: C,\n    PushSubscriptionOptions: C,\n    queueMicrotask: O,\n    RadioNodeList: C,\n    Range: C,\n    ReadableStream: C,\n    RemotePlayback: C,\n    removeEventListener: O,\n    Request: C,\n    requestAnimationFrame: O,\n    requestIdleCallback: O,\n    resizeBy: O,\n    ResizeObserver: C,\n    ResizeObserverEntry: C,\n    resizeTo: O,\n    Response: C,\n    RTCCertificate: C,\n    RTCDataChannel: C,\n    RTCDataChannelEvent: C,\n    RTCDtlsTransport: C,\n    RTCIceCandidate: C,\n    RTCIceTransport: C,\n    RTCPeerConnection: C,\n    RTCPeerConnectionIceEvent: C,\n    RTCRtpReceiver: C,\n    RTCRtpSender: C,\n    RTCSctpTransport: C,\n    RTCSessionDescription: C,\n    RTCStatsReport: C,\n    RTCTrackEvent: C,\n    screen: O,\n    Screen: C,\n    screenLeft: O,\n    ScreenOrientation: C,\n    screenTop: O,\n    screenX: O,\n    screenY: O,\n    ScriptProcessorNode: C,\n    scroll: O,\n    scrollbars: O,\n    scrollBy: O,\n    scrollTo: O,\n    scrollX: O,\n    scrollY: O,\n    SecurityPolicyViolationEvent: C,\n    Selection: C,\n    ServiceWorker: C,\n    ServiceWorkerContainer: C,\n    ServiceWorkerRegistration: C,\n    sessionStorage: O,\n    ShadowRoot: C,\n    SharedWorker: C,\n    SourceBuffer: C,\n    SourceBufferList: C,\n    speechSynthesis: O,\n    SpeechSynthesisEvent: C,\n    SpeechSynthesisUtterance: C,\n    StaticRange: C,\n    status: O,\n    statusbar: O,\n    StereoPannerNode: C,\n    stop: O,\n    Storage: C,\n    StorageEvent: C,\n    StorageManager: C,\n    styleMedia: O,\n    StyleSheet: C,\n    StyleSheetList: C,\n    SubtleCrypto: C,\n    SVGAElement: C,\n    SVGAngle: C,\n    SVGAnimatedAngle: C,\n    SVGAnimatedBoolean: C,\n    SVGAnimatedEnumeration: C,\n    SVGAnimatedInteger: C,\n    SVGAnimatedLength: C,\n    SVGAnimatedLengthList: C,\n    SVGAnimatedNumber: C,\n    SVGAnimatedNumberList: C,\n    SVGAnimatedPreserveAspectRatio: C,\n    SVGAnimatedRect: C,\n    SVGAnimatedString: C,\n    SVGAnimatedTransformList: C,\n    SVGAnimateElement: C,\n    SVGAnimateMotionElement: C,\n    SVGAnimateTransformElement: C,\n    SVGAnimationElement: C,\n    SVGCircleElement: C,\n    SVGClipPathElement: C,\n    SVGComponentTransferFunctionElement: C,\n    SVGDefsElement: C,\n    SVGDescElement: C,\n    SVGDiscardElement: C,\n    SVGElement: C,\n    SVGEllipseElement: C,\n    SVGFEBlendElement: C,\n    SVGFEColorMatrixElement: C,\n    SVGFEComponentTransferElement: C,\n    SVGFECompositeElement: C,\n    SVGFEConvolveMatrixElement: C,\n    SVGFEDiffuseLightingElement: C,\n    SVGFEDisplacementMapElement: C,\n    SVGFEDistantLightElement: C,\n    SVGFEDropShadowElement: C,\n    SVGFEFloodElement: C,\n    SVGFEFuncAElement: C,\n    SVGFEFuncBElement: C,\n    SVGFEFuncGElement: C,\n    SVGFEFuncRElement: C,\n    SVGFEGaussianBlurElement: C,\n    SVGFEImageElement: C,\n    SVGFEMergeElement: C,\n    SVGFEMergeNodeElement: C,\n    SVGFEMorphologyElement: C,\n    SVGFEOffsetElement: C,\n    SVGFEPointLightElement: C,\n    SVGFESpecularLightingElement: C,\n    SVGFESpotLightElement: C,\n    SVGFETileElement: C,\n    SVGFETurbulenceElement: C,\n    SVGFilterElement: C,\n    SVGForeignObjectElement: C,\n    SVGGElement: C,\n    SVGGeometryElement: C,\n    SVGGradientElement: C,\n    SVGGraphicsElement: C,\n    SVGImageElement: C,\n    SVGLength: C,\n    SVGLengthList: C,\n    SVGLinearGradientElement: C,\n    SVGLineElement: C,\n    SVGMarkerElement: C,\n    SVGMaskElement: C,\n    SVGMatrix: C,\n    SVGMetadataElement: C,\n    SVGMPathElement: C,\n    SVGNumber: C,\n    SVGNumberList: C,\n    SVGPathElement: C,\n    SVGPatternElement: C,\n    SVGPoint: C,\n    SVGPointList: C,\n    SVGPolygonElement: C,\n    SVGPolylineElement: C,\n    SVGPreserveAspectRatio: C,\n    SVGRadialGradientElement: C,\n    SVGRect: C,\n    SVGRectElement: C,\n    SVGScriptElement: C,\n    SVGSetElement: C,\n    SVGStopElement: C,\n    SVGStringList: C,\n    SVGStyleElement: C,\n    SVGSVGElement: C,\n    SVGSwitchElement: C,\n    SVGSymbolElement: C,\n    SVGTextContentElement: C,\n    SVGTextElement: C,\n    SVGTextPathElement: C,\n    SVGTextPositioningElement: C,\n    SVGTitleElement: C,\n    SVGTransform: C,\n    SVGTransformList: C,\n    SVGTSpanElement: C,\n    SVGUnitTypes: C,\n    SVGUseElement: C,\n    SVGViewElement: C,\n    TaskAttributionTiming: C,\n    Text: C,\n    TextEvent: C,\n    TextMetrics: C,\n    TextTrack: C,\n    TextTrackCue: C,\n    TextTrackCueList: C,\n    TextTrackList: C,\n    TimeRanges: C,\n    toolbar: O,\n    top: O,\n    Touch: C,\n    TouchEvent: C,\n    TouchList: C,\n    TrackEvent: C,\n    TransitionEvent: C,\n    TreeWalker: C,\n    UIEvent: C,\n    ValidityState: C,\n    visualViewport: O,\n    VisualViewport: C,\n    VTTCue: C,\n    WaveShaperNode: C,\n    WebAssembly: O,\n    WebGL2RenderingContext: C,\n    WebGLActiveInfo: C,\n    WebGLBuffer: C,\n    WebGLContextEvent: C,\n    WebGLFramebuffer: C,\n    WebGLProgram: C,\n    WebGLQuery: C,\n    WebGLRenderbuffer: C,\n    WebGLRenderingContext: C,\n    WebGLSampler: C,\n    WebGLShader: C,\n    WebGLShaderPrecisionFormat: C,\n    WebGLSync: C,\n    WebGLTexture: C,\n    WebGLTransformFeedback: C,\n    WebGLUniformLocation: C,\n    WebGLVertexArrayObject: C,\n    WebSocket: C,\n    WheelEvent: C,\n    Window: C,\n    Worker: C,\n    WritableStream: C,\n    XMLDocument: C,\n    XMLHttpRequest: C,\n    XMLHttpRequestEventTarget: C,\n    XMLHttpRequestUpload: C,\n    XMLSerializer: C,\n    XPathEvaluator: C,\n    XPathExpression: C,\n    XPathResult: C,\n    XSLTProcessor: C\n};\nfor (const global of ['window', 'global', 'self', 'globalThis']) {\n    knownGlobals[global] = knownGlobals;\n}\nfunction getGlobalAtPath(path) {\n    let currentGlobal = knownGlobals;\n    for (const pathSegment of path) {\n        if (typeof pathSegment !== 'string') {\n            return null;\n        }\n        currentGlobal = currentGlobal[pathSegment];\n        if (!currentGlobal) {\n            return null;\n        }\n    }\n    return currentGlobal[ValueProperties];\n}\n\nclass GlobalVariable extends Variable {\n    constructor(name) {\n        super(name);\n        // Ensure we use live-bindings for globals as we do not know if they have\n        // been reassigned\n        this.markReassigned();\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        switch (interaction.type) {\n            // While there is no point in testing these cases as at the moment, they\n            // are also covered via other means, we keep them for completeness\n            case INTERACTION_ACCESSED:\n            case INTERACTION_ASSIGNED: {\n                if (!getGlobalAtPath([this.name, ...path].slice(0, -1))) {\n                    super.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n                }\n                return;\n            }\n            case INTERACTION_CALLED: {\n                const globalAtPath = getGlobalAtPath([this.name, ...path]);\n                if (globalAtPath) {\n                    globalAtPath.deoptimizeArgumentsOnCall(interaction);\n                }\n                else {\n                    super.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n                }\n                return;\n            }\n        }\n    }\n    getLiteralValueAtPath(path, _recursionTracker, _origin) {\n        const globalAtPath = getGlobalAtPath([this.name, ...path]);\n        return globalAtPath ? globalAtPath.getLiteralValue() : UnknownValue;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                if (path.length === 0) {\n                    // Technically, \"undefined\" is a global variable of sorts\n                    return this.name !== 'undefined' && !getGlobalAtPath([this.name]);\n                }\n                return !getGlobalAtPath([this.name, ...path].slice(0, -1));\n            }\n            case INTERACTION_ASSIGNED: {\n                return true;\n            }\n            case INTERACTION_CALLED: {\n                const globalAtPath = getGlobalAtPath([this.name, ...path]);\n                return !globalAtPath || globalAtPath.hasEffectsWhenCalled(interaction, context);\n            }\n        }\n    }\n}\n\nclass LocalVariable extends Variable {\n    constructor(name, declarator, init, context, kind) {\n        super(name);\n        this.init = init;\n        this.calledFromTryStatement = false;\n        this.additionalInitializers = null;\n        this.expressionsToBeDeoptimized = [];\n        this.declarations = declarator ? [declarator] : [];\n        this.deoptimizationTracker = context.deoptimizationTracker;\n        this.module = context.module;\n        this.kind = kind;\n    }\n    addDeclaration(identifier, init) {\n        this.declarations.push(identifier);\n        this.markInitializersForDeoptimization().push(init);\n    }\n    consolidateInitializers() {\n        if (this.additionalInitializers) {\n            for (const initializer of this.additionalInitializers) {\n                initializer.deoptimizePath(UNKNOWN_PATH);\n            }\n            this.additionalInitializers = null;\n        }\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        if (this.isReassigned) {\n            deoptimizeInteraction(interaction);\n            return;\n        }\n        recursionTracker.withTrackedEntityAtPath(path, this.init, () => this.init.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker), undefined);\n    }\n    deoptimizePath(path) {\n        if (this.isReassigned ||\n            this.deoptimizationTracker.trackEntityAtPathAndGetIfTracked(path, this)) {\n            return;\n        }\n        if (path.length === 0) {\n            this.markReassigned();\n            const expressionsToBeDeoptimized = this.expressionsToBeDeoptimized;\n            this.expressionsToBeDeoptimized = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizeCache();\n            }\n            this.init.deoptimizePath(UNKNOWN_PATH);\n        }\n        else {\n            this.init.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        if (this.isReassigned) {\n            return UnknownValue;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path, this.init, () => {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.init.getLiteralValueAtPath(path, recursionTracker, origin);\n        }, UnknownValue);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        if (this.isReassigned) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path, this.init, () => {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.init.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n        }, UNKNOWN_RETURN_EXPRESSION);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                if (this.isReassigned)\n                    return true;\n                return (!context.accessed.trackEntityAtPathAndGetIfTracked(path, this) &&\n                    this.init.hasEffectsOnInteractionAtPath(path, interaction, context));\n            }\n            case INTERACTION_ASSIGNED: {\n                if (this.included)\n                    return true;\n                if (path.length === 0)\n                    return false;\n                if (this.isReassigned)\n                    return true;\n                return (!context.assigned.trackEntityAtPathAndGetIfTracked(path, this) &&\n                    this.init.hasEffectsOnInteractionAtPath(path, interaction, context));\n            }\n            case INTERACTION_CALLED: {\n                if (this.isReassigned)\n                    return true;\n                return (!(interaction.withNew ? context.instantiated : context.called).trackEntityAtPathAndGetIfTracked(path, interaction.args, this) &&\n                    this.init.hasEffectsOnInteractionAtPath(path, interaction, context));\n            }\n        }\n    }\n    include() {\n        if (!this.included) {\n            super.include();\n            for (const declaration of this.declarations) {\n                // If node is a default export, it can save a tree-shaking run to include the full declaration now\n                if (!declaration.included)\n                    declaration.include(createInclusionContext(), false);\n                let node = declaration.parent;\n                while (!node.included) {\n                    // We do not want to properly include parents in case they are part of a dead branch\n                    // in which case .include() might pull in more dead code\n                    node.included = true;\n                    if (node.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Program)\n                        break;\n                    node = node.parent;\n                }\n            }\n        }\n    }\n    includeCallArguments(context, parameters) {\n        if (this.isReassigned || context.includedCallArguments.has(this.init)) {\n            for (const argument of parameters) {\n                argument.include(context, false);\n            }\n        }\n        else {\n            context.includedCallArguments.add(this.init);\n            this.init.includeCallArguments(context, parameters);\n            context.includedCallArguments.delete(this.init);\n        }\n    }\n    markCalledFromTryStatement() {\n        this.calledFromTryStatement = true;\n    }\n    markInitializersForDeoptimization() {\n        if (this.additionalInitializers === null) {\n            this.additionalInitializers = [this.init];\n            this.init = UNKNOWN_EXPRESSION;\n            this.markReassigned();\n        }\n        return this.additionalInitializers;\n    }\n}\n\nconst tdzVariableKinds = new Set(['class', 'const', 'let', 'var', 'using', 'await using']);\nclass IdentifierBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.variable = null;\n        this.isVariableReference = false;\n    }\n    get isTDZAccess() {\n        if (!isFlagSet(this.flags, 4 /* Flag.tdzAccessDefined */)) {\n            return null;\n        }\n        return isFlagSet(this.flags, 8 /* Flag.tdzAccess */);\n    }\n    set isTDZAccess(value) {\n        this.flags = setFlag(this.flags, 4 /* Flag.tdzAccessDefined */, true);\n        this.flags = setFlag(this.flags, 8 /* Flag.tdzAccess */, value);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizePath(path) {\n        if (path.length === 0 && !this.scope.contains(this.name)) {\n            this.disallowImportReassignment();\n        }\n        // We keep conditional chaining because an unknown Node could have an\n        // Identifier as property that might be deoptimized by default\n        this.variable?.deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.getVariableRespectingTDZ().getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        const [expression, isPure] = this.getVariableRespectingTDZ().getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n        return [expression, isPure || this.isPureFunction(path)];\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (this.isPossibleTDZ() && this.variable.kind !== 'var') {\n            return true;\n        }\n        return (this.scope.context.options.treeshake\n            .unknownGlobalSideEffects &&\n            this.variable instanceof GlobalVariable &&\n            !this.isPureFunction(EMPTY_PATH) &&\n            this.variable.hasEffectsOnInteractionAtPath(EMPTY_PATH, NODE_INTERACTION_UNKNOWN_ACCESS, context));\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                return (this.variable !== null &&\n                    !this.isPureFunction(path) &&\n                    this.getVariableRespectingTDZ().hasEffectsOnInteractionAtPath(path, interaction, context));\n            }\n            case INTERACTION_ASSIGNED: {\n                return (path.length > 0 ? this.getVariableRespectingTDZ() : this.variable).hasEffectsOnInteractionAtPath(path, interaction, context);\n            }\n            case INTERACTION_CALLED: {\n                return (!this.isPureFunction(path) &&\n                    this.getVariableRespectingTDZ().hasEffectsOnInteractionAtPath(path, interaction, context));\n            }\n        }\n    }\n    include() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (!this.included) {\n            this.included = true;\n            if (this.variable !== null) {\n                this.scope.context.includeVariableInModule(this.variable);\n            }\n        }\n    }\n    includeCallArguments(context, parameters) {\n        this.variable.includeCallArguments(context, parameters);\n    }\n    isPossibleTDZ() {\n        // return cached value to avoid issues with the next tree-shaking pass\n        const cachedTdzAccess = this.isTDZAccess;\n        if (cachedTdzAccess !== null)\n            return cachedTdzAccess;\n        if (!(this.variable instanceof LocalVariable &&\n            this.variable.kind &&\n            tdzVariableKinds.has(this.variable.kind) &&\n            // We ignore modules that did not receive a treeshaking pass yet as that\n            // causes many false positives due to circular dependencies or disabled\n            // moduleSideEffects.\n            this.variable.module.hasTreeShakingPassStarted)) {\n            return (this.isTDZAccess = false);\n        }\n        let decl_id;\n        if (this.variable.declarations &&\n            this.variable.declarations.length === 1 &&\n            (decl_id = this.variable.declarations[0]) &&\n            this.start < decl_id.start &&\n            closestParentFunctionOrProgram(this) === closestParentFunctionOrProgram(decl_id)) {\n            // a variable accessed before its declaration\n            // in the same function or at top level of module\n            return (this.isTDZAccess = true);\n        }\n        if (!this.variable.initReached) {\n            // Either a const/let TDZ violation or\n            // var use before declaration was encountered.\n            return (this.isTDZAccess = true);\n        }\n        return (this.isTDZAccess = false);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.variable instanceof LocalVariable) {\n            // When accessing a variable from a module without side effects, this\n            // means we use an export of that module and therefore need to potentially\n            // include it in the bundle.\n            if (!this.variable.module.isExecuted) {\n                markModuleAndImpureDependenciesAsExecuted(this.variable.module);\n            }\n            this.variable.consolidateInitializers();\n            this.scope.context.requestTreeshakingPass();\n        }\n        if (this.isVariableReference) {\n            this.variable.addUsedPlace(this);\n            this.scope.context.requestTreeshakingPass();\n        }\n    }\n    disallowImportReassignment() {\n        return this.scope.context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logIllegalImportReassignment)(this.name, this.scope.context.module.id), this.start);\n    }\n    getVariableRespectingTDZ() {\n        if (this.isPossibleTDZ()) {\n            return UNKNOWN_EXPRESSION;\n        }\n        return this.variable;\n    }\n    isPureFunction(path) {\n        let currentPureFunction = this.scope.context.manualPureFunctions[this.name];\n        for (const segment of path) {\n            if (currentPureFunction) {\n                if (currentPureFunction[PureFunctionKey]) {\n                    return true;\n                }\n                currentPureFunction = currentPureFunction[segment];\n            }\n            else {\n                return false;\n            }\n        }\n        return currentPureFunction?.[PureFunctionKey];\n    }\n}\nfunction closestParentFunctionOrProgram(node) {\n    while (node && !/^Program|Function/.test(node.type)) {\n        node = node.parent;\n    }\n    // one of: ArrowFunctionExpression, FunctionDeclaration, FunctionExpression or Program\n    return node;\n}\n\nclass Identifier extends IdentifierBase {\n    constructor() {\n        super(...arguments);\n        this.variable = null;\n    }\n    addExportedVariables(variables, exportNamesByVariable) {\n        if (exportNamesByVariable.has(this.variable)) {\n            variables.push(this.variable);\n        }\n    }\n    bind() {\n        if (!this.variable && is_reference(this, this.parent)) {\n            this.variable = this.scope.findVariable(this.name);\n            this.variable.addReference(this);\n            this.isVariableReference = true;\n        }\n    }\n    declare(kind, init) {\n        let variable;\n        const { treeshake } = this.scope.context.options;\n        switch (kind) {\n            case 'var': {\n                variable = this.scope.addDeclaration(this, this.scope.context, init, kind);\n                if (treeshake && treeshake.correctVarValueBeforeDeclaration) {\n                    // Necessary to make sure the init is deoptimized. We cannot call deoptimizePath here.\n                    variable.markInitializersForDeoptimization();\n                }\n                break;\n            }\n            case 'function': {\n                // in strict mode, functions are only hoisted within a scope but not across block scopes\n                variable = this.scope.addDeclaration(this, this.scope.context, init, kind);\n                break;\n            }\n            case 'let':\n            case 'const':\n            case 'using':\n            case 'await using':\n            case 'class': {\n                variable = this.scope.addDeclaration(this, this.scope.context, init, kind);\n                break;\n            }\n            case 'parameter': {\n                variable = this.scope.addParameterDeclaration(this);\n                break;\n            }\n            /* istanbul ignore next */\n            default: {\n                /* istanbul ignore next */\n                throw new Error(`Internal Error: Unexpected identifier kind ${kind}.`);\n            }\n        }\n        return [(this.variable = variable)];\n    }\n    markDeclarationReached() {\n        this.variable.initReached = true;\n    }\n    render(code, { snippets: { getPropertyAccess }, useOriginalName }, { renderedParentType, isCalleeOfRenderedParent, isShorthandProperty } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        if (this.variable) {\n            const name = this.variable.getName(getPropertyAccess, useOriginalName);\n            if (name !== this.name) {\n                code.overwrite(this.start, this.end, name, {\n                    contentOnly: true,\n                    storeName: true\n                });\n                if (isShorthandProperty) {\n                    code.prependRight(this.start, `${this.name}: `);\n                }\n            }\n            // In strict mode, any variable named \"eval\" must be the actual \"eval\" function\n            if (name === 'eval' &&\n                renderedParentType === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.CallExpression &&\n                isCalleeOfRenderedParent) {\n                code.appendRight(this.start, '0, ');\n            }\n        }\n    }\n}\n\nconst chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';\nconst base = 64;\nfunction toBase64(value) {\n    let outString = '';\n    do {\n        const currentDigit = value % base;\n        value = (value / base) | 0;\n        outString = chars[currentDigit] + outString;\n    } while (value !== 0);\n    return outString;\n}\n\nfunction getSafeName(baseName, usedNames, forbiddenNames) {\n    let safeName = baseName;\n    let count = 1;\n    while (usedNames.has(safeName) || RESERVED_NAMES.has(safeName) || forbiddenNames?.has(safeName)) {\n        safeName = `${baseName}$${toBase64(count++)}`;\n    }\n    usedNames.add(safeName);\n    return safeName;\n}\n\nclass Scope {\n    constructor() {\n        this.children = [];\n        this.variables = new Map();\n    }\n    /*\n    Redeclaration rules:\n    - var can redeclare var\n    - in function scopes, function and var can redeclare function and var\n    - var is hoisted across scopes, function remains in the scope it is declared\n    - var and function can redeclare function parameters, but parameters cannot redeclare parameters\n    - function cannot redeclare catch scope parameters\n    - var can redeclare catch scope parameters in a way\n        - if the parameter is an identifier and not a pattern\n        - then the variable is still declared in the hoisted outer scope, but the initializer is assigned to the parameter\n    - const, let, class, and function except in the cases above cannot redeclare anything\n     */\n    addDeclaration(identifier, context, init, kind) {\n        const name = identifier.name;\n        const existingVariable = this.hoistedVariables?.get(name) || this.variables.get(name);\n        if (existingVariable) {\n            const existingKind = existingVariable.kind;\n            if (kind === 'var' && existingKind === 'var') {\n                existingVariable.addDeclaration(identifier, init);\n                return existingVariable;\n            }\n            context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logRedeclarationError)(name), identifier.start);\n        }\n        const newVariable = new LocalVariable(identifier.name, identifier, init, context, kind);\n        this.variables.set(name, newVariable);\n        return newVariable;\n    }\n    addHoistedVariable(name, variable) {\n        (this.hoistedVariables ||= new Map()).set(name, variable);\n    }\n    contains(name) {\n        return this.variables.has(name);\n    }\n    findVariable(_name) {\n        /* istanbul ignore next */\n        throw new Error('Internal Error: findVariable needs to be implemented by a subclass');\n    }\n}\n\nclass ChildScope extends Scope {\n    constructor(parent, context) {\n        super();\n        this.parent = parent;\n        this.context = context;\n        this.accessedOutsideVariables = new Map();\n        parent.children.push(this);\n    }\n    addAccessedDynamicImport(importExpression) {\n        (this.accessedDynamicImports || (this.accessedDynamicImports = new Set())).add(importExpression);\n        if (this.parent instanceof ChildScope) {\n            this.parent.addAccessedDynamicImport(importExpression);\n        }\n    }\n    addAccessedGlobals(globals, accessedGlobalsByScope) {\n        const accessedGlobals = accessedGlobalsByScope.get(this) || new Set();\n        for (const name of globals) {\n            accessedGlobals.add(name);\n        }\n        accessedGlobalsByScope.set(this, accessedGlobals);\n        if (this.parent instanceof ChildScope) {\n            this.parent.addAccessedGlobals(globals, accessedGlobalsByScope);\n        }\n    }\n    addNamespaceMemberAccess(name, variable) {\n        this.accessedOutsideVariables.set(name, variable);\n        this.parent.addNamespaceMemberAccess(name, variable);\n    }\n    addReturnExpression(expression) {\n        if (this.parent instanceof ChildScope) {\n            this.parent.addReturnExpression(expression);\n        }\n    }\n    addUsedOutsideNames(usedNames, format, exportNamesByVariable, accessedGlobalsByScope) {\n        for (const variable of this.accessedOutsideVariables.values()) {\n            if (variable.included) {\n                usedNames.add(variable.getBaseVariableName());\n                if (format === 'system' && exportNamesByVariable.has(variable)) {\n                    usedNames.add('exports');\n                }\n            }\n        }\n        const accessedGlobals = accessedGlobalsByScope.get(this);\n        if (accessedGlobals) {\n            for (const name of accessedGlobals) {\n                usedNames.add(name);\n            }\n        }\n    }\n    contains(name) {\n        return this.variables.has(name) || this.parent.contains(name);\n    }\n    deconflict(format, exportNamesByVariable, accessedGlobalsByScope) {\n        const usedNames = new Set();\n        this.addUsedOutsideNames(usedNames, format, exportNamesByVariable, accessedGlobalsByScope);\n        if (this.accessedDynamicImports) {\n            for (const importExpression of this.accessedDynamicImports) {\n                if (importExpression.inlineNamespace) {\n                    usedNames.add(importExpression.inlineNamespace.getBaseVariableName());\n                }\n            }\n        }\n        for (const [name, variable] of this.variables) {\n            if (variable.included || variable.alwaysRendered) {\n                variable.setRenderNames(null, getSafeName(name, usedNames, variable.forbiddenNames));\n            }\n        }\n        for (const scope of this.children) {\n            scope.deconflict(format, exportNamesByVariable, accessedGlobalsByScope);\n        }\n    }\n    findLexicalBoundary() {\n        return this.parent.findLexicalBoundary();\n    }\n    findGlobal(name) {\n        const variable = this.parent.findVariable(name);\n        this.accessedOutsideVariables.set(name, variable);\n        return variable;\n    }\n    findVariable(name) {\n        const knownVariable = this.variables.get(name) || this.accessedOutsideVariables.get(name);\n        if (knownVariable) {\n            return knownVariable;\n        }\n        const variable = this.parent.findVariable(name);\n        this.accessedOutsideVariables.set(name, variable);\n        return variable;\n    }\n}\n\nfunction checkEffectForNodes(nodes, context) {\n    for (const node of nodes) {\n        if (node.hasEffects(context)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nclass MethodBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.accessedValue = null;\n    }\n    get computed() {\n        return isFlagSet(this.flags, 1024 /* Flag.computed */);\n    }\n    set computed(value) {\n        this.flags = setFlag(this.flags, 1024 /* Flag.computed */, value);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        if (interaction.type === INTERACTION_ACCESSED && this.kind === 'get' && path.length === 0) {\n            return this.value.deoptimizeArgumentsOnInteractionAtPath({\n                args: interaction.args,\n                type: INTERACTION_CALLED,\n                withNew: false\n            }, EMPTY_PATH, recursionTracker);\n        }\n        if (interaction.type === INTERACTION_ASSIGNED && this.kind === 'set' && path.length === 0) {\n            return this.value.deoptimizeArgumentsOnInteractionAtPath({\n                args: interaction.args,\n                type: INTERACTION_CALLED,\n                withNew: false\n            }, EMPTY_PATH, recursionTracker);\n        }\n        this.getAccessedValue()[0].deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    // As getter properties directly receive their values from fixed function\n    // expressions, there is no known situation where a getter is deoptimized.\n    deoptimizeCache() { }\n    deoptimizePath(path) {\n        this.getAccessedValue()[0].deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.getAccessedValue()[0].getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        return this.getAccessedValue()[0].getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n    }\n    hasEffects(context) {\n        return this.key.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (this.kind === 'get' && interaction.type === INTERACTION_ACCESSED && path.length === 0) {\n            return this.value.hasEffectsOnInteractionAtPath(EMPTY_PATH, {\n                args: interaction.args,\n                type: INTERACTION_CALLED,\n                withNew: false\n            }, context);\n        }\n        // setters are only called for empty paths\n        if (this.kind === 'set' && interaction.type === INTERACTION_ASSIGNED) {\n            return this.value.hasEffectsOnInteractionAtPath(EMPTY_PATH, {\n                args: interaction.args,\n                type: INTERACTION_CALLED,\n                withNew: false\n            }, context);\n        }\n        return this.getAccessedValue()[0].hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    applyDeoptimizations() { }\n    getAccessedValue() {\n        if (this.accessedValue === null) {\n            if (this.kind === 'get') {\n                this.accessedValue = UNKNOWN_RETURN_EXPRESSION;\n                return (this.accessedValue = this.value.getReturnExpressionWhenCalledAtPath(EMPTY_PATH, NODE_INTERACTION_UNKNOWN_CALL, SHARED_RECURSION_TRACKER, this));\n            }\n            else {\n                return (this.accessedValue = [this.value, false]);\n            }\n        }\n        return this.accessedValue;\n    }\n}\n\nclass MethodDefinition extends MethodBase {\n    hasEffects(context) {\n        return super.hasEffects(context) || checkEffectForNodes(this.decorators, context);\n    }\n    applyDeoptimizations() { }\n}\n\nclass BlockScope extends ChildScope {\n    constructor(parent) {\n        super(parent, parent.context);\n    }\n    addDeclaration(identifier, context, init, kind) {\n        if (kind === 'var') {\n            const name = identifier.name;\n            const existingVariable = this.hoistedVariables?.get(name) || this.variables.get(name);\n            if (existingVariable) {\n                if (existingVariable.kind === 'var' ||\n                    (kind === 'var' && existingVariable.kind === 'parameter')) {\n                    existingVariable.addDeclaration(identifier, init);\n                    return existingVariable;\n                }\n                return context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logRedeclarationError)(name), identifier.start);\n            }\n            const declaredVariable = this.parent.addDeclaration(identifier, context, init, kind);\n            // Necessary to make sure the init is deoptimized for conditional declarations.\n            // We cannot call deoptimizePath here.\n            declaredVariable.markInitializersForDeoptimization();\n            // We add the variable to this and all parent scopes to reliably detect conflicts\n            this.addHoistedVariable(name, declaredVariable);\n            return declaredVariable;\n        }\n        return super.addDeclaration(identifier, context, init, kind);\n    }\n}\n\nclass StaticBlock extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        for (const node of this.body) {\n            if (node.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        for (const node of this.body) {\n            if (includeChildrenRecursively || node.shouldBeIncluded(context))\n                node.include(context, includeChildrenRecursively);\n        }\n    }\n    render(code, options) {\n        if (this.body.length > 0) {\n            const bodyStartPos = findFirstOccurrenceOutsideComment(code.original.slice(this.start, this.end), '{') + 1;\n            renderStatementList(this.body, code, this.start + bodyStartPos, this.end - 1, options);\n        }\n        else {\n            super.render(code, options);\n        }\n    }\n}\nfunction isStaticBlock(statement) {\n    return statement.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.StaticBlock;\n}\n\nclass ObjectMember extends ExpressionEntity {\n    constructor(object, key) {\n        super();\n        this.object = object;\n        this.key = key;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.object.deoptimizeArgumentsOnInteractionAtPath(interaction, [this.key, ...path], recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.object.deoptimizePath([this.key, ...path]);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.object.getLiteralValueAtPath([this.key, ...path], recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        return this.object.getReturnExpressionWhenCalledAtPath([this.key, ...path], interaction, recursionTracker, origin);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return this.object.hasEffectsOnInteractionAtPath([this.key, ...path], interaction, context);\n    }\n}\n\nclass ClassNode extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    createScope(parentScope) {\n        this.scope = new ChildScope(parentScope, parentScope.context);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizeCache() {\n        this.getObjectEntity().deoptimizeAllProperties();\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const initEffect = this.superClass?.hasEffects(context) || this.body.hasEffects(context);\n        this.id?.markDeclarationReached();\n        return initEffect || super.hasEffects(context) || checkEffectForNodes(this.decorators, context);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return interaction.type === INTERACTION_CALLED && path.length === 0\n            ? !interaction.withNew ||\n                (this.classConstructor === null\n                    ? this.superClass?.hasEffectsOnInteractionAtPath(path, interaction, context)\n                    : this.classConstructor.hasEffectsOnInteractionAtPath(path, interaction, context)) ||\n                false\n            : this.getObjectEntity().hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        this.superClass?.include(context, includeChildrenRecursively);\n        this.body.include(context, includeChildrenRecursively);\n        for (const decorator of this.decorators)\n            decorator.include(context, includeChildrenRecursively);\n        if (this.id) {\n            this.id.markDeclarationReached();\n            this.id.include();\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.id?.declare('class', this);\n        for (const method of this.body.body) {\n            if (method instanceof MethodDefinition && method.kind === 'constructor') {\n                this.classConstructor = method;\n                return;\n            }\n        }\n        this.classConstructor = null;\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        for (const definition of this.body.body) {\n            if (!isStaticBlock(definition) &&\n                !(definition.static ||\n                    (definition instanceof MethodDefinition && definition.kind === 'constructor'))) {\n                // Calls to methods are not tracked, ensure that the return value is deoptimized\n                definition.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        this.scope.context.requestTreeshakingPass();\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        const staticProperties = [];\n        const dynamicMethods = [];\n        for (const definition of this.body.body) {\n            if (isStaticBlock(definition))\n                continue;\n            const properties = definition.static ? staticProperties : dynamicMethods;\n            const definitionKind = definition.kind;\n            // Note that class fields do not end up on the prototype\n            if (properties === dynamicMethods && !definitionKind)\n                continue;\n            const kind = definitionKind === 'set' || definitionKind === 'get' ? definitionKind : 'init';\n            let key;\n            if (definition.computed) {\n                const keyValue = definition.key.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this);\n                if (typeof keyValue === 'symbol') {\n                    properties.push({ key: UnknownKey, kind, property: definition });\n                    continue;\n                }\n                else {\n                    key = String(keyValue);\n                }\n            }\n            else {\n                key =\n                    definition.key instanceof Identifier\n                        ? definition.key.name\n                        : String(definition.key.value);\n            }\n            properties.push({ key, kind, property: definition });\n        }\n        staticProperties.unshift({\n            key: 'prototype',\n            kind: 'init',\n            property: new ObjectEntity(dynamicMethods, this.superClass ? new ObjectMember(this.superClass, 'prototype') : OBJECT_PROTOTYPE)\n        });\n        return (this.objectEntity = new ObjectEntity(staticProperties, this.superClass || OBJECT_PROTOTYPE));\n    }\n}\n\nclass ClassDeclaration extends ClassNode {\n    initialise() {\n        super.initialise();\n        if (this.id !== null) {\n            this.id.variable.isId = true;\n        }\n    }\n    parseNode(esTreeNode) {\n        if (esTreeNode.id !== null) {\n            this.id = new Identifier(this, this.scope.parent).parseNode(esTreeNode.id);\n        }\n        return super.parseNode(esTreeNode);\n    }\n    render(code, options) {\n        const { exportNamesByVariable, format, snippets: { _, getPropertyAccess } } = options;\n        if (this.id) {\n            const { variable, name } = this.id;\n            if (format === 'system' && exportNamesByVariable.has(variable)) {\n                code.appendLeft(this.end, `${_}${getSystemExportStatement([variable], options)};`);\n            }\n            const renderedVariable = variable.getName(getPropertyAccess);\n            if (renderedVariable !== name) {\n                this.decorators.map(decorator => decorator.render(code, options));\n                this.superClass?.render(code, options);\n                this.body.render(code, {\n                    ...options,\n                    useOriginalName: (_variable) => _variable === variable\n                });\n                code.prependRight(this.start, `let ${renderedVariable}${_}=${_}`);\n                code.prependLeft(this.end, ';');\n                return;\n            }\n        }\n        super.render(code, options);\n    }\n    applyDeoptimizations() {\n        super.applyDeoptimizations();\n        const { id, scope } = this;\n        if (id) {\n            const { name, variable } = id;\n            for (const accessedVariable of scope.accessedOutsideVariables.values()) {\n                if (accessedVariable !== variable) {\n                    accessedVariable.forbidName(name);\n                }\n            }\n        }\n    }\n}\n\nclass ArgumentsVariable extends LocalVariable {\n    constructor(context) {\n        super('arguments', null, UNKNOWN_EXPRESSION, context, 'other');\n        this.deoptimizedArguments = [];\n    }\n    addArgumentToBeDeoptimized(argument) {\n        if (this.included) {\n            argument.deoptimizePath(UNKNOWN_PATH);\n        }\n        else {\n            this.deoptimizedArguments.push(argument);\n        }\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > 1;\n    }\n    include() {\n        super.include();\n        for (const argument of this.deoptimizedArguments) {\n            argument.deoptimizePath(UNKNOWN_PATH);\n        }\n        this.deoptimizedArguments.length = 0;\n    }\n}\n\nconst MAX_TRACKED_INTERACTIONS = 20;\nconst NO_INTERACTIONS = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\nconst UNKNOWN_DEOPTIMIZED_FIELD = new Set([UnknownKey]);\nconst EMPTY_PATH_TRACKER = new PathTracker();\nconst UNKNOWN_DEOPTIMIZED_ENTITY = new Set([UNKNOWN_EXPRESSION]);\nclass ParameterVariable extends LocalVariable {\n    constructor(name, declarator, context) {\n        super(name, declarator, UNKNOWN_EXPRESSION, context, 'parameter');\n        this.deoptimizationInteractions = [];\n        this.deoptimizations = new PathTracker();\n        this.deoptimizedFields = new Set();\n        this.entitiesToBeDeoptimized = new Set();\n        this.expressionsUseTheKnownValue = [];\n        this.knownValue = null;\n        this.knownValueLiteral = UnknownValue;\n        this.frozenValue = null;\n    }\n    addEntityToBeDeoptimized(entity) {\n        if (entity === UNKNOWN_EXPRESSION) {\n            // As unknown expressions fully deoptimize all interactions, we can clear\n            // the interaction cache at this point provided we keep this optimization\n            // in mind when adding new interactions\n            if (!this.entitiesToBeDeoptimized.has(UNKNOWN_EXPRESSION)) {\n                this.entitiesToBeDeoptimized.add(UNKNOWN_EXPRESSION);\n                for (const { interaction } of this.deoptimizationInteractions) {\n                    deoptimizeInteraction(interaction);\n                }\n                this.deoptimizationInteractions = NO_INTERACTIONS;\n            }\n        }\n        else if (this.deoptimizedFields.has(UnknownKey)) {\n            // This means that we already deoptimized all interactions and no longer\n            // track them\n            entity.deoptimizePath(UNKNOWN_PATH);\n        }\n        else if (!this.entitiesToBeDeoptimized.has(entity)) {\n            this.entitiesToBeDeoptimized.add(entity);\n            for (const field of this.deoptimizedFields) {\n                entity.deoptimizePath([field]);\n            }\n            for (const { interaction, path } of this.deoptimizationInteractions) {\n                entity.deoptimizeArgumentsOnInteractionAtPath(interaction, path, SHARED_RECURSION_TRACKER);\n            }\n        }\n    }\n    markReassigned() {\n        if (this.isReassigned) {\n            return;\n        }\n        super.markReassigned();\n        for (const expression of this.expressionsUseTheKnownValue) {\n            expression.deoptimizeCache();\n        }\n        this.expressionsUseTheKnownValue = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n    }\n    deoptimizeCache() {\n        this.markReassigned();\n    }\n    /**\n     * Update the known value of the parameter variable.\n     * Must be called for every function call, so it can track all the arguments,\n     * and deoptimizeCache itself to mark reassigned if the argument is changed.\n     * @param argument The argument of the function call\n     */\n    updateKnownValue(argument) {\n        if (this.isReassigned) {\n            return;\n        }\n        if (this.knownValue === null) {\n            this.knownValue = argument;\n            this.knownValueLiteral = argument.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this);\n            return;\n        }\n        // the same literal or identifier, do nothing\n        if (this.knownValue === argument ||\n            (this.knownValue instanceof Identifier &&\n                argument instanceof Identifier &&\n                this.knownValue.variable === argument.variable)) {\n            return;\n        }\n        const oldValue = this.knownValueLiteral;\n        if (typeof oldValue === 'symbol') {\n            this.markReassigned();\n            return;\n        }\n        // add tracking for the new argument\n        const newValue = argument.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this);\n        if (newValue !== oldValue) {\n            this.markReassigned();\n        }\n    }\n    /**\n     * This function freezes the known value of the parameter variable,\n     * so the optimization starts with a certain ExpressionEntity.\n     * The optimization can be undone by calling `markReassigned`.\n     * @returns the frozen value\n     */\n    getKnownValue() {\n        if (this.frozenValue === null) {\n            this.frozenValue = this.knownValue || UNKNOWN_EXPRESSION;\n        }\n        return this.frozenValue;\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        if (this.isReassigned) {\n            return UnknownValue;\n        }\n        const knownValue = this.getKnownValue();\n        this.expressionsUseTheKnownValue.push(origin);\n        return recursionTracker.withTrackedEntityAtPath(path, knownValue, () => knownValue.getLiteralValueAtPath(path, recursionTracker, origin), UnknownValue);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (this.isReassigned || interaction.type === INTERACTION_ASSIGNED) {\n            return super.hasEffectsOnInteractionAtPath(path, interaction, context);\n        }\n        const knownValue = this.getKnownValue();\n        return knownValue.hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path) {\n        // For performance reasons, we fully deoptimize all deeper interactions\n        if (path.length >= 2 ||\n            this.entitiesToBeDeoptimized.has(UNKNOWN_EXPRESSION) ||\n            this.deoptimizationInteractions.length >= MAX_TRACKED_INTERACTIONS ||\n            (path.length === 1 &&\n                (this.deoptimizedFields.has(UnknownKey) ||\n                    (interaction.type === INTERACTION_CALLED && this.deoptimizedFields.has(path[0]))))) {\n            deoptimizeInteraction(interaction);\n            return;\n        }\n        if (!this.deoptimizations.trackEntityAtPathAndGetIfTracked(path, interaction.args)) {\n            for (const entity of this.entitiesToBeDeoptimized) {\n                entity.deoptimizeArgumentsOnInteractionAtPath(interaction, path, SHARED_RECURSION_TRACKER);\n            }\n            if (!this.entitiesToBeDeoptimized.has(UNKNOWN_EXPRESSION)) {\n                this.deoptimizationInteractions.push({\n                    interaction,\n                    path\n                });\n            }\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length === 0) {\n            this.markReassigned();\n            return;\n        }\n        if (this.deoptimizedFields.has(UnknownKey)) {\n            return;\n        }\n        const key = path[0];\n        if (this.deoptimizedFields.has(key)) {\n            return;\n        }\n        this.deoptimizedFields.add(key);\n        for (const entity of this.entitiesToBeDeoptimized) {\n            // We do not need a recursion tracker here as we already track whether\n            // this field is deoptimized\n            entity.deoptimizePath([key]);\n        }\n        if (key === UnknownKey) {\n            // save some memory\n            this.deoptimizationInteractions = NO_INTERACTIONS;\n            this.deoptimizations = EMPTY_PATH_TRACKER;\n            this.deoptimizedFields = UNKNOWN_DEOPTIMIZED_FIELD;\n            this.entitiesToBeDeoptimized = UNKNOWN_DEOPTIMIZED_ENTITY;\n        }\n    }\n    getReturnExpressionWhenCalledAtPath(path) {\n        // We deoptimize everything that is called as that will trivially deoptimize\n        // the corresponding return expressions as well and avoid badly performing\n        // and complicated alternatives\n        if (path.length === 0) {\n            this.deoptimizePath(UNKNOWN_PATH);\n        }\n        else if (!this.deoptimizedFields.has(path[0])) {\n            this.deoptimizePath([path[0]]);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n}\n\nclass ThisVariable extends ParameterVariable {\n    constructor(context) {\n        super('this', null, context);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return (context.replacedVariableInits.get(this) || UNKNOWN_EXPRESSION).hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n}\n\nclass CatchBodyScope extends ChildScope {\n    constructor(parent) {\n        super(parent, parent.context);\n        this.parent = parent;\n    }\n    addDeclaration(identifier, context, init, kind) {\n        if (kind === 'var') {\n            const name = identifier.name;\n            const existingVariable = this.hoistedVariables?.get(name) || this.variables.get(name);\n            if (existingVariable) {\n                const existingKind = existingVariable.kind;\n                if (existingKind === 'parameter' &&\n                    // If this is a destructured parameter, it is forbidden to redeclare\n                    existingVariable.declarations[0].parent.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.CatchClause) {\n                    // If this is a var with the same name as the catch scope parameter,\n                    // the assignment actually goes to the parameter and the var is\n                    // hoisted without assignment. Locally, it is shadowed by the\n                    // parameter\n                    const declaredVariable = this.parent.parent.addDeclaration(identifier, context, UNDEFINED_EXPRESSION, kind);\n                    // To avoid the need to rewrite the declaration, we link the variable\n                    // names. If we ever implement a logic that splits initialization and\n                    // assignment for hoisted vars, the \"renderLikeHoisted\" logic can be\n                    // removed again.\n                    // We do not need to check whether there already is a linked\n                    // variable because then declaredVariable would be that linked\n                    // variable.\n                    existingVariable.renderLikeHoisted(declaredVariable);\n                    this.addHoistedVariable(name, declaredVariable);\n                    return declaredVariable;\n                }\n                if (existingKind === 'var') {\n                    existingVariable.addDeclaration(identifier, init);\n                    return existingVariable;\n                }\n                return context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logRedeclarationError)(name), identifier.start);\n            }\n            // We only add parameters to parameter scopes\n            const declaredVariable = this.parent.parent.addDeclaration(identifier, context, init, kind);\n            // Necessary to make sure the init is deoptimized for conditional declarations.\n            // We cannot call deoptimizePath here.\n            declaredVariable.markInitializersForDeoptimization();\n            // We add the variable to this and all parent scopes to reliably detect conflicts\n            this.addHoistedVariable(name, declaredVariable);\n            return declaredVariable;\n        }\n        return super.addDeclaration(identifier, context, init, kind);\n    }\n}\n\nclass FunctionBodyScope extends ChildScope {\n    constructor(parent) {\n        super(parent, parent.context);\n    }\n    // There is stuff that is only allowed in function scopes, i.e. functions can\n    // be redeclared, functions and var can redeclare each other\n    addDeclaration(identifier, context, init, kind) {\n        const name = identifier.name;\n        const existingVariable = this.hoistedVariables?.get(name) || this.variables.get(name);\n        if (existingVariable) {\n            const existingKind = existingVariable.kind;\n            if ((kind === 'var' || kind === 'function') &&\n                (existingKind === 'var' || existingKind === 'function' || existingKind === 'parameter')) {\n                existingVariable.addDeclaration(identifier, init);\n                return existingVariable;\n            }\n            context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logRedeclarationError)(name), identifier.start);\n        }\n        const newVariable = new LocalVariable(identifier.name, identifier, init, context, kind);\n        this.variables.set(name, newVariable);\n        return newVariable;\n    }\n}\n\nclass ParameterScope extends ChildScope {\n    constructor(parent, isCatchScope) {\n        super(parent, parent.context);\n        this.parameters = [];\n        this.hasRest = false;\n        this.bodyScope = isCatchScope ? new CatchBodyScope(this) : new FunctionBodyScope(this);\n    }\n    /**\n     * Adds a parameter to this scope. Parameters must be added in the correct\n     * order, i.e. from left to right.\n     */\n    addParameterDeclaration(identifier) {\n        const { name, start } = identifier;\n        const existingParameter = this.variables.get(name);\n        if (existingParameter) {\n            return this.context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logDuplicateArgumentNameError)(name), start);\n        }\n        const variable = new ParameterVariable(name, identifier, this.context);\n        this.variables.set(name, variable);\n        // We also add it to the body scope to detect name conflicts with local\n        // variables. We still need the intermediate scope, though, as parameter\n        // defaults are NOT taken from the body scope but from the parameters or\n        // outside scope.\n        this.bodyScope.addHoistedVariable(name, variable);\n        return variable;\n    }\n    addParameterVariables(parameters, hasRest) {\n        this.parameters = parameters;\n        for (const parameterList of parameters) {\n            for (const parameter of parameterList) {\n                parameter.alwaysRendered = true;\n            }\n        }\n        this.hasRest = hasRest;\n    }\n    includeCallArguments(context, parameters) {\n        let calledFromTryStatement = false;\n        let argumentIncluded = false;\n        const restParameter = this.hasRest && this.parameters[this.parameters.length - 1];\n        for (const checkedArgument of parameters) {\n            if (checkedArgument instanceof SpreadElement) {\n                for (const argument of parameters) {\n                    argument.include(context, false);\n                }\n                break;\n            }\n        }\n        for (let index = parameters.length - 1; index >= 0; index--) {\n            const parameterVariables = this.parameters[index] || restParameter;\n            const argument = parameters[index];\n            if (parameterVariables) {\n                calledFromTryStatement = false;\n                if (parameterVariables.length === 0) {\n                    // handle empty destructuring\n                    argumentIncluded = true;\n                }\n                else {\n                    for (const variable of parameterVariables) {\n                        if (variable.included) {\n                            argumentIncluded = true;\n                        }\n                        if (variable.calledFromTryStatement) {\n                            calledFromTryStatement = true;\n                        }\n                    }\n                }\n            }\n            if (!argumentIncluded && argument.shouldBeIncluded(context)) {\n                argumentIncluded = true;\n            }\n            if (argumentIncluded) {\n                argument.include(context, calledFromTryStatement);\n            }\n        }\n    }\n}\n\nclass ReturnValueScope extends ParameterScope {\n    constructor() {\n        super(...arguments);\n        this.returnExpression = null;\n        this.returnExpressions = [];\n    }\n    addReturnExpression(expression) {\n        this.returnExpressions.push(expression);\n    }\n    getReturnExpression() {\n        if (this.returnExpression === null)\n            this.updateReturnExpression();\n        return this.returnExpression;\n    }\n    updateReturnExpression() {\n        if (this.returnExpressions.length === 1) {\n            this.returnExpression = this.returnExpressions[0];\n        }\n        else {\n            this.returnExpression = UNKNOWN_EXPRESSION;\n            for (const expression of this.returnExpressions) {\n                expression.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n    }\n}\n\nclass FunctionScope extends ReturnValueScope {\n    constructor(parent) {\n        const { context } = parent;\n        super(parent, false);\n        this.variables.set('arguments', (this.argumentsVariable = new ArgumentsVariable(context)));\n        this.variables.set('this', (this.thisVariable = new ThisVariable(context)));\n    }\n    findLexicalBoundary() {\n        return this;\n    }\n    includeCallArguments(context, parameters) {\n        super.includeCallArguments(context, parameters);\n        if (this.argumentsVariable.included) {\n            for (const argument of parameters) {\n                if (!argument.included) {\n                    argument.include(context, false);\n                }\n            }\n        }\n    }\n}\n\nclass ExpressionStatement extends NodeBase {\n    initialise() {\n        super.initialise();\n        if (this.directive &&\n            this.directive !== 'use strict' &&\n            this.parent.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Program) {\n            this.scope.context.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, \n            // This is necessary, because either way (deleting or not) can lead to errors.\n            (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logModuleLevelDirective)(this.directive, this.scope.context.module.id), this.start);\n        }\n    }\n    removeAnnotations(code) {\n        this.expression.removeAnnotations(code);\n    }\n    render(code, options) {\n        super.render(code, options);\n        if (code.original[this.end - 1] !== ';') {\n            code.appendLeft(this.end, ';');\n        }\n    }\n    shouldBeIncluded(context) {\n        if (this.directive && this.directive !== 'use strict')\n            return this.parent.type !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Program;\n        return super.shouldBeIncluded(context);\n    }\n    applyDeoptimizations() { }\n}\n\nclass BlockStatement extends NodeBase {\n    get deoptimizeBody() {\n        return isFlagSet(this.flags, 32768 /* Flag.deoptimizeBody */);\n    }\n    set deoptimizeBody(value) {\n        this.flags = setFlag(this.flags, 32768 /* Flag.deoptimizeBody */, value);\n    }\n    get directlyIncluded() {\n        return isFlagSet(this.flags, 16384 /* Flag.directlyIncluded */);\n    }\n    set directlyIncluded(value) {\n        this.flags = setFlag(this.flags, 16384 /* Flag.directlyIncluded */, value);\n    }\n    addImplicitReturnExpressionToScope() {\n        const lastStatement = this.body[this.body.length - 1];\n        if (!lastStatement || lastStatement.type !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ReturnStatement) {\n            this.scope.addReturnExpression(UNKNOWN_EXPRESSION);\n        }\n    }\n    createScope(parentScope) {\n        this.scope = this.parent.preventChildBlockScope\n            ? parentScope\n            : new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        if (this.deoptimizeBody)\n            return true;\n        for (const node of this.body) {\n            if (context.brokenFlow)\n                break;\n            if (node.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!(this.deoptimizeBody && this.directlyIncluded)) {\n            this.included = true;\n            this.directlyIncluded = true;\n            if (this.deoptimizeBody)\n                includeChildrenRecursively = true;\n            for (const node of this.body) {\n                if (includeChildrenRecursively || node.shouldBeIncluded(context))\n                    node.include(context, includeChildrenRecursively);\n            }\n        }\n    }\n    initialise() {\n        super.initialise();\n        const firstBodyStatement = this.body[0];\n        this.deoptimizeBody =\n            firstBodyStatement instanceof ExpressionStatement &&\n                firstBodyStatement.directive === 'use asm';\n    }\n    render(code, options) {\n        if (this.body.length > 0) {\n            renderStatementList(this.body, code, this.start + 1, this.end - 1, options);\n        }\n        else {\n            super.render(code, options);\n        }\n    }\n}\n\nclass RestElement extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.declarationInit = null;\n    }\n    addExportedVariables(variables, exportNamesByVariable) {\n        this.argument.addExportedVariables(variables, exportNamesByVariable);\n    }\n    declare(kind, init) {\n        this.declarationInit = init;\n        return this.argument.declare(kind, UNKNOWN_EXPRESSION);\n    }\n    deoptimizePath(path) {\n        if (path.length === 0) {\n            this.argument.deoptimizePath(EMPTY_PATH);\n        }\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return (path.length > 0 ||\n            this.argument.hasEffectsOnInteractionAtPath(EMPTY_PATH, interaction, context));\n    }\n    markDeclarationReached() {\n        this.argument.markDeclarationReached();\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.declarationInit !== null) {\n            this.declarationInit.deoptimizePath([UnknownKey, UnknownKey]);\n            this.scope.context.requestTreeshakingPass();\n        }\n    }\n}\n\nclass FunctionBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n        this.parameterVariableValuesDeoptimized = false;\n    }\n    get async() {\n        return isFlagSet(this.flags, 256 /* Flag.async */);\n    }\n    set async(value) {\n        this.flags = setFlag(this.flags, 256 /* Flag.async */, value);\n    }\n    get deoptimizedReturn() {\n        return isFlagSet(this.flags, 512 /* Flag.deoptimizedReturn */);\n    }\n    set deoptimizedReturn(value) {\n        this.flags = setFlag(this.flags, 512 /* Flag.deoptimizedReturn */, value);\n    }\n    get generator() {\n        return isFlagSet(this.flags, 4194304 /* Flag.generator */);\n    }\n    set generator(value) {\n        this.flags = setFlag(this.flags, 4194304 /* Flag.generator */, value);\n    }\n    updateParameterVariableValues(_arguments) {\n        for (let position = 0; position < this.params.length; position++) {\n            const parameter = this.params[position];\n            if (!(parameter instanceof Identifier)) {\n                continue;\n            }\n            const parameterVariable = parameter.variable;\n            const argument = _arguments[position + 1] ?? UNDEFINED_EXPRESSION;\n            parameterVariable.updateKnownValue(argument);\n        }\n    }\n    deoptimizeParameterVariableValues() {\n        for (const parameter of this.params) {\n            if (parameter instanceof Identifier) {\n                const parameterVariable = parameter.variable;\n                parameterVariable.markReassigned();\n            }\n        }\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        if (interaction.type === INTERACTION_CALLED) {\n            const { parameters } = this.scope;\n            const { args } = interaction;\n            let hasRest = false;\n            for (let position = 0; position < args.length - 1; position++) {\n                const parameter = this.params[position];\n                // Only the \"this\" argument arg[0] can be null\n                const argument = args[position + 1];\n                if (argument instanceof SpreadElement) {\n                    this.deoptimizeParameterVariableValues();\n                }\n                if (hasRest || parameter instanceof RestElement) {\n                    hasRest = true;\n                    argument.deoptimizePath(UNKNOWN_PATH);\n                }\n                else if (parameter instanceof Identifier) {\n                    parameters[position][0].addEntityToBeDeoptimized(argument);\n                    this.addArgumentToBeDeoptimized(argument);\n                }\n                else if (parameter) {\n                    argument.deoptimizePath(UNKNOWN_PATH);\n                }\n                else {\n                    this.addArgumentToBeDeoptimized(argument);\n                }\n            }\n            this.updateParameterVariableValues(args);\n        }\n        else {\n            this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n        }\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n        if (path.length === 1 && path[0] === UnknownKey) {\n            // A reassignment of UNKNOWN_PATH is considered equivalent to having lost track\n            // which means the return expression and parameters need to be reassigned\n            this.scope.getReturnExpression().deoptimizePath(UNKNOWN_PATH);\n            for (const parameterList of this.scope.parameters) {\n                for (const parameter of parameterList) {\n                    parameter.deoptimizePath(UNKNOWN_PATH);\n                    parameter.markReassigned();\n                }\n            }\n        }\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        if (path.length > 0) {\n            return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n        }\n        if (this.async) {\n            if (!this.deoptimizedReturn) {\n                this.deoptimizedReturn = true;\n                this.scope.getReturnExpression().deoptimizePath(UNKNOWN_PATH);\n                this.scope.context.requestTreeshakingPass();\n            }\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return [this.scope.getReturnExpression(), false];\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (path.length > 0 || interaction.type !== INTERACTION_CALLED) {\n            return this.getObjectEntity().hasEffectsOnInteractionAtPath(path, interaction, context);\n        }\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        if (this.async) {\n            const { propertyReadSideEffects } = this.scope.context.options\n                .treeshake;\n            const returnExpression = this.scope.getReturnExpression();\n            if (returnExpression.hasEffectsOnInteractionAtPath(['then'], NODE_INTERACTION_UNKNOWN_CALL, context) ||\n                (propertyReadSideEffects &&\n                    (propertyReadSideEffects === 'always' ||\n                        returnExpression.hasEffectsOnInteractionAtPath(['then'], NODE_INTERACTION_UNKNOWN_ACCESS, context)))) {\n                return true;\n            }\n        }\n        for (const parameter of this.params) {\n            if (parameter.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    /**\n     * If the function (expression or declaration) is only used as function calls\n     */\n    onlyFunctionCallUsed() {\n        let variable = null;\n        if (this.parent.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.VariableDeclarator) {\n            variable = this.parent.id.variable ?? null;\n        }\n        if (this.parent.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExportDefaultDeclaration) {\n            variable = this.parent.variable;\n        }\n        return variable?.getOnlyFunctionCallUsed() ?? false;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.parameterVariableValuesDeoptimized && !this.onlyFunctionCallUsed()) {\n            this.parameterVariableValuesDeoptimized = true;\n            this.deoptimizeParameterVariableValues();\n        }\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        const { brokenFlow } = context;\n        context.brokenFlow = false;\n        this.body.include(context, includeChildrenRecursively);\n        context.brokenFlow = brokenFlow;\n    }\n    includeCallArguments(context, parameters) {\n        this.scope.includeCallArguments(context, parameters);\n    }\n    initialise() {\n        super.initialise();\n        if (this.body instanceof BlockStatement) {\n            this.body.addImplicitReturnExpressionToScope();\n        }\n        else {\n            this.scope.addReturnExpression(this.body);\n        }\n        if (this.annotations &&\n            this.scope.context.options.treeshake.annotations) {\n            this.annotationNoSideEffects = this.annotations.some(comment => comment.type === 'noSideEffects');\n        }\n    }\n    parseNode(esTreeNode) {\n        const { body, params } = esTreeNode;\n        const { scope } = this;\n        const { bodyScope, context } = scope;\n        // We need to ensure that parameters are declared before the body is parsed\n        // so that the scope already knows all parameters and can detect conflicts\n        // when parsing the body.\n        const parameters = (this.params = params.map((parameter) => new (context.getNodeConstructor(parameter.type))(this, scope).parseNode(parameter)));\n        scope.addParameterVariables(parameters.map(parameter => parameter.declare('parameter', UNKNOWN_EXPRESSION)), parameters[parameters.length - 1] instanceof RestElement);\n        this.body = new (context.getNodeConstructor(body.type))(this, bodyScope).parseNode(body);\n        return super.parseNode(esTreeNode);\n    }\n    addArgumentToBeDeoptimized(_argument) { }\n    applyDeoptimizations() { }\n}\nFunctionBase.prototype.preventChildBlockScope = true;\n\nclass FunctionNode extends FunctionBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    createScope(parentScope) {\n        this.scope = new FunctionScope(parentScope);\n        this.constructedEntity = new ObjectEntity(Object.create(null), OBJECT_PROTOTYPE);\n        // This makes sure that all deoptimizations of \"this\" are applied to the\n        // constructed entity.\n        this.scope.thisVariable.addEntityToBeDeoptimized(this.constructedEntity);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        super.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n        if (interaction.type === INTERACTION_CALLED && path.length === 0 && interaction.args[0]) {\n            // args[0] is the \"this\" argument\n            this.scope.thisVariable.addEntityToBeDeoptimized(interaction.args[0]);\n        }\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        return !!this.id?.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (super.hasEffectsOnInteractionAtPath(path, interaction, context))\n            return true;\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        if (interaction.type === INTERACTION_CALLED) {\n            const thisInit = context.replacedVariableInits.get(this.scope.thisVariable);\n            context.replacedVariableInits.set(this.scope.thisVariable, interaction.withNew ? this.constructedEntity : UNKNOWN_EXPRESSION);\n            const { brokenFlow, ignore, replacedVariableInits } = context;\n            context.ignore = {\n                breaks: false,\n                continues: false,\n                labels: new Set(),\n                returnYield: true,\n                this: interaction.withNew\n            };\n            if (this.body.hasEffects(context))\n                return true;\n            context.brokenFlow = brokenFlow;\n            if (thisInit) {\n                replacedVariableInits.set(this.scope.thisVariable, thisInit);\n            }\n            else {\n                replacedVariableInits.delete(this.scope.thisVariable);\n            }\n            context.ignore = ignore;\n        }\n        return false;\n    }\n    include(context, includeChildrenRecursively) {\n        super.include(context, includeChildrenRecursively);\n        this.id?.include();\n        const hasArguments = this.scope.argumentsVariable.included;\n        for (const parameter of this.params) {\n            if (!(parameter instanceof Identifier) || hasArguments) {\n                parameter.include(context, includeChildrenRecursively);\n            }\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.id?.declare('function', this);\n    }\n    addArgumentToBeDeoptimized(argument) {\n        this.scope.argumentsVariable.addArgumentToBeDeoptimized(argument);\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        return (this.objectEntity = new ObjectEntity([\n            {\n                key: 'prototype',\n                kind: 'init',\n                property: new ObjectEntity([], OBJECT_PROTOTYPE)\n            }\n        ], OBJECT_PROTOTYPE));\n    }\n}\n\nclass FunctionDeclaration extends FunctionNode {\n    initialise() {\n        super.initialise();\n        if (this.id !== null) {\n            this.id.variable.isId = true;\n        }\n    }\n    onlyFunctionCallUsed() {\n        // call super.onlyFunctionCallUsed for export default anonymous function\n        return this.id?.variable.getOnlyFunctionCallUsed() ?? super.onlyFunctionCallUsed();\n    }\n    parseNode(esTreeNode) {\n        if (esTreeNode.id !== null) {\n            this.id = new Identifier(this, this.scope.parent).parseNode(esTreeNode.id);\n        }\n        return super.parseNode(esTreeNode);\n    }\n}\n\n// The header ends at the first non-white-space after \"default\"\nfunction getDeclarationStart(code, start) {\n    return findNonWhiteSpace(code, findFirstOccurrenceOutsideComment(code, 'default', start) + 7);\n}\nfunction getFunctionIdInsertPosition(code, start) {\n    const declarationEnd = findFirstOccurrenceOutsideComment(code, 'function', start) + 'function'.length;\n    code = code.slice(declarationEnd, findFirstOccurrenceOutsideComment(code, '(', declarationEnd));\n    const generatorStarPos = findFirstOccurrenceOutsideComment(code, '*');\n    if (generatorStarPos === -1) {\n        return declarationEnd;\n    }\n    return declarationEnd + generatorStarPos + 1;\n}\nclass ExportDefaultDeclaration extends NodeBase {\n    include(context, includeChildrenRecursively) {\n        super.include(context, includeChildrenRecursively);\n        if (includeChildrenRecursively) {\n            this.scope.context.includeVariableInModule(this.variable);\n        }\n    }\n    initialise() {\n        super.initialise();\n        const declaration = this.declaration;\n        this.declarationName =\n            (declaration.id && declaration.id.name) || this.declaration.name;\n        this.variable = this.scope.addExportDefaultDeclaration(this.declarationName || this.scope.context.getModuleName(), this, this.scope.context);\n        this.scope.context.addExport(this);\n    }\n    removeAnnotations(code) {\n        this.declaration.removeAnnotations(code);\n    }\n    render(code, options, nodeRenderOptions) {\n        const { start, end } = nodeRenderOptions;\n        const declarationStart = getDeclarationStart(code.original, this.start);\n        if (this.declaration instanceof FunctionDeclaration) {\n            this.renderNamedDeclaration(code, declarationStart, this.declaration.id === null\n                ? getFunctionIdInsertPosition(code.original, declarationStart)\n                : null, options);\n        }\n        else if (this.declaration instanceof ClassDeclaration) {\n            this.renderNamedDeclaration(code, declarationStart, this.declaration.id === null\n                ? findFirstOccurrenceOutsideComment(code.original, 'class', start) + 'class'.length\n                : null, options);\n        }\n        else if (this.variable.getOriginalVariable() !== this.variable) {\n            // Remove altogether to prevent re-declaring the same variable\n            treeshakeNode(this, code, start, end);\n            return;\n        }\n        else if (this.variable.included) {\n            this.renderVariableDeclaration(code, declarationStart, options);\n        }\n        else {\n            code.remove(this.start, declarationStart);\n            this.declaration.render(code, options, {\n                renderedSurroundingElement: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement\n            });\n            if (code.original[this.end - 1] !== ';') {\n                code.appendLeft(this.end, ';');\n            }\n            return;\n        }\n        this.declaration.render(code, options);\n    }\n    applyDeoptimizations() { }\n    renderNamedDeclaration(code, declarationStart, idInsertPosition, options) {\n        const { exportNamesByVariable, format, snippets: { getPropertyAccess } } = options;\n        const name = this.variable.getName(getPropertyAccess);\n        // Remove `export default`\n        code.remove(this.start, declarationStart);\n        if (idInsertPosition !== null) {\n            code.appendLeft(idInsertPosition, ` ${name}`);\n        }\n        if (format === 'system' &&\n            this.declaration instanceof ClassDeclaration &&\n            exportNamesByVariable.has(this.variable)) {\n            code.appendLeft(this.end, ` ${getSystemExportStatement([this.variable], options)};`);\n        }\n    }\n    renderVariableDeclaration(code, declarationStart, { format, exportNamesByVariable, snippets: { cnst, getPropertyAccess } }) {\n        const hasTrailingSemicolon = code.original.charCodeAt(this.end - 1) === 59; /*\";\"*/\n        const systemExportNames = format === 'system' && exportNamesByVariable.get(this.variable);\n        if (systemExportNames) {\n            code.overwrite(this.start, declarationStart, `${cnst} ${this.variable.getName(getPropertyAccess)} = exports(${JSON.stringify(systemExportNames[0])}, `);\n            code.appendRight(hasTrailingSemicolon ? this.end - 1 : this.end, ')' + (hasTrailingSemicolon ? '' : ';'));\n        }\n        else {\n            code.overwrite(this.start, declarationStart, `${cnst} ${this.variable.getName(getPropertyAccess)} = `);\n            if (!hasTrailingSemicolon) {\n                code.appendLeft(this.end, ';');\n            }\n        }\n    }\n}\nExportDefaultDeclaration.prototype.needsBoundaries = true;\n\nconst needsEscapeRegEx = /[\\n\\r'\\\\\\u2028\\u2029]/;\nconst quoteNewlineRegEx = /([\\n\\r'\\u2028\\u2029])/g;\nconst backSlashRegEx = /\\\\/g;\nfunction escapeId(id) {\n    if (!needsEscapeRegEx.test(id))\n        return id;\n    return id.replace(backSlashRegEx, '\\\\\\\\').replace(quoteNewlineRegEx, '\\\\$1');\n}\n\nconst INTEROP_DEFAULT_VARIABLE = '_interopDefault';\nconst INTEROP_DEFAULT_COMPAT_VARIABLE = '_interopDefaultCompat';\nconst INTEROP_NAMESPACE_VARIABLE = '_interopNamespace';\nconst INTEROP_NAMESPACE_COMPAT_VARIABLE = '_interopNamespaceCompat';\nconst INTEROP_NAMESPACE_DEFAULT_VARIABLE = '_interopNamespaceDefault';\nconst INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE = '_interopNamespaceDefaultOnly';\nconst MERGE_NAMESPACES_VARIABLE = '_mergeNamespaces';\nconst DOCUMENT_CURRENT_SCRIPT = '_documentCurrentScript';\nconst defaultInteropHelpersByInteropType = {\n    auto: INTEROP_DEFAULT_VARIABLE,\n    compat: INTEROP_DEFAULT_COMPAT_VARIABLE,\n    default: null,\n    defaultOnly: null,\n    esModule: null\n};\nconst isDefaultAProperty = (interopType, externalLiveBindings) => interopType === 'esModule' ||\n    (externalLiveBindings && (interopType === 'auto' || interopType === 'compat'));\nconst namespaceInteropHelpersByInteropType = {\n    auto: INTEROP_NAMESPACE_VARIABLE,\n    compat: INTEROP_NAMESPACE_COMPAT_VARIABLE,\n    default: INTEROP_NAMESPACE_DEFAULT_VARIABLE,\n    defaultOnly: INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE,\n    esModule: null\n};\nconst canDefaultBeTakenFromNamespace = (interopType, externalLiveBindings) => interopType !== 'esModule' && isDefaultAProperty(interopType, externalLiveBindings);\nconst getHelpersBlock = (additionalHelpers, accessedGlobals, indent, snippets, liveBindings, freeze, symbols) => {\n    const usedHelpers = new Set(additionalHelpers);\n    for (const variable of HELPER_NAMES) {\n        if (accessedGlobals.has(variable)) {\n            usedHelpers.add(variable);\n        }\n    }\n    return HELPER_NAMES.map(variable => usedHelpers.has(variable)\n        ? HELPER_GENERATORS[variable](indent, snippets, liveBindings, freeze, symbols, usedHelpers)\n        : '').join('');\n};\nconst HELPER_GENERATORS = {\n    [DOCUMENT_CURRENT_SCRIPT](_t, { _, n }) {\n        return `var ${DOCUMENT_CURRENT_SCRIPT}${_}=${_}typeof document${_}!==${_}'undefined'${_}?${_}document.currentScript${_}:${_}null;${n}`;\n    },\n    [INTEROP_DEFAULT_COMPAT_VARIABLE](_t, snippets, liveBindings) {\n        const { _, getDirectReturnFunction, n } = snippets;\n        const [left, right] = getDirectReturnFunction(['e'], {\n            functionReturn: true,\n            lineBreakIndent: null,\n            name: INTEROP_DEFAULT_COMPAT_VARIABLE\n        });\n        return (`${left}${getIsCompatNamespace(snippets)}${_}?${_}` +\n            `${liveBindings ? getDefaultLiveBinding(snippets) : getDefaultStatic(snippets)}${right}${n}${n}`);\n    },\n    [INTEROP_DEFAULT_VARIABLE](_t, snippets, liveBindings) {\n        const { _, getDirectReturnFunction, n } = snippets;\n        const [left, right] = getDirectReturnFunction(['e'], {\n            functionReturn: true,\n            lineBreakIndent: null,\n            name: INTEROP_DEFAULT_VARIABLE\n        });\n        return (`${left}e${_}&&${_}e.__esModule${_}?${_}` +\n            `${liveBindings ? getDefaultLiveBinding(snippets) : getDefaultStatic(snippets)}${right}${n}${n}`);\n    },\n    [INTEROP_NAMESPACE_COMPAT_VARIABLE](t, snippets, liveBindings, freeze, symbols, usedHelpers) {\n        const { _, getDirectReturnFunction, n } = snippets;\n        if (usedHelpers.has(INTEROP_NAMESPACE_DEFAULT_VARIABLE)) {\n            const [left, right] = getDirectReturnFunction(['e'], {\n                functionReturn: true,\n                lineBreakIndent: null,\n                name: INTEROP_NAMESPACE_COMPAT_VARIABLE\n            });\n            return `${left}${getIsCompatNamespace(snippets)}${_}?${_}e${_}:${_}${INTEROP_NAMESPACE_DEFAULT_VARIABLE}(e)${right}${n}${n}`;\n        }\n        return (`function ${INTEROP_NAMESPACE_COMPAT_VARIABLE}(e)${_}{${n}` +\n            `${t}if${_}(${getIsCompatNamespace(snippets)})${_}return e;${n}` +\n            createNamespaceObject(t, t, snippets, liveBindings, freeze, symbols) +\n            `}${n}${n}`);\n    },\n    [INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE](_t, snippets, _liveBindings, freeze, symbols) {\n        const { getDirectReturnFunction, getObject, n, _ } = snippets;\n        const [left, right] = getDirectReturnFunction(['e'], {\n            functionReturn: true,\n            lineBreakIndent: null,\n            name: INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE\n        });\n        return `${left}${getFrozen(freeze, getWithToStringTag(symbols, getObject([\n            [null, `__proto__:${_}null`],\n            ['default', 'e']\n        ], { lineBreakIndent: null }), snippets))}${right}${n}${n}`;\n    },\n    [INTEROP_NAMESPACE_DEFAULT_VARIABLE](t, snippets, liveBindings, freeze, symbols) {\n        const { _, n } = snippets;\n        return (`function ${INTEROP_NAMESPACE_DEFAULT_VARIABLE}(e)${_}{${n}` +\n            createNamespaceObject(t, t, snippets, liveBindings, freeze, symbols) +\n            `}${n}${n}`);\n    },\n    [INTEROP_NAMESPACE_VARIABLE](t, snippets, liveBindings, freeze, symbols, usedHelpers) {\n        const { _, getDirectReturnFunction, n } = snippets;\n        if (usedHelpers.has(INTEROP_NAMESPACE_DEFAULT_VARIABLE)) {\n            const [left, right] = getDirectReturnFunction(['e'], {\n                functionReturn: true,\n                lineBreakIndent: null,\n                name: INTEROP_NAMESPACE_VARIABLE\n            });\n            return `${left}e${_}&&${_}e.__esModule${_}?${_}e${_}:${_}${INTEROP_NAMESPACE_DEFAULT_VARIABLE}(e)${right}${n}${n}`;\n        }\n        return (`function ${INTEROP_NAMESPACE_VARIABLE}(e)${_}{${n}` +\n            `${t}if${_}(e${_}&&${_}e.__esModule)${_}return e;${n}` +\n            createNamespaceObject(t, t, snippets, liveBindings, freeze, symbols) +\n            `}${n}${n}`);\n    },\n    [MERGE_NAMESPACES_VARIABLE](t, snippets, liveBindings, freeze, symbols) {\n        const { _, cnst, n } = snippets;\n        const useForEach = cnst === 'var' && liveBindings;\n        return (`function ${MERGE_NAMESPACES_VARIABLE}(n, m)${_}{${n}` +\n            `${t}${loopOverNamespaces(`{${n}` +\n                `${t}${t}${t}if${_}(k${_}!==${_}'default'${_}&&${_}!(k in n))${_}{${n}` +\n                (liveBindings\n                    ? useForEach\n                        ? copyOwnPropertyLiveBinding\n                        : copyPropertyLiveBinding\n                    : copyPropertyStatic)(t, t + t + t + t, snippets) +\n                `${t}${t}${t}}${n}` +\n                `${t}${t}}`, useForEach, t, snippets)}${n}` +\n            `${t}return ${getFrozen(freeze, getWithToStringTag(symbols, 'n', snippets))};${n}` +\n            `}${n}${n}`);\n    }\n};\nconst getDefaultLiveBinding = ({ _, getObject }) => `e${_}:${_}${getObject([['default', 'e']], { lineBreakIndent: null })}`;\nconst getDefaultStatic = ({ _, getPropertyAccess }) => `e${getPropertyAccess('default')}${_}:${_}e`;\nconst getIsCompatNamespace = ({ _ }) => `e${_}&&${_}typeof e${_}===${_}'object'${_}&&${_}'default'${_}in e`;\nconst createNamespaceObject = (t, index, snippets, liveBindings, freeze, symbols) => {\n    const { _, cnst, getObject, getPropertyAccess, n, s } = snippets;\n    const copyProperty = `{${n}` +\n        (liveBindings ? copyNonDefaultOwnPropertyLiveBinding : copyPropertyStatic)(t, index + t + t, snippets) +\n        `${index}${t}}`;\n    return (`${index}${cnst} n${_}=${_}Object.create(null${symbols ? `,${_}{${_}[Symbol.toStringTag]:${_}${getToStringTagValue(getObject)}${_}}` : ''});${n}` +\n        `${index}if${_}(e)${_}{${n}` +\n        `${index}${t}${loopOverKeys(copyProperty, !liveBindings, snippets)}${n}` +\n        `${index}}${n}` +\n        `${index}n${getPropertyAccess('default')}${_}=${_}e;${n}` +\n        `${index}return ${getFrozen(freeze, 'n')}${s}${n}`);\n};\nconst loopOverKeys = (body, allowVariableLoopVariable, { _, cnst, getFunctionIntro, s }) => cnst !== 'var' || allowVariableLoopVariable\n    ? `for${_}(${cnst} k in e)${_}${body}`\n    : `Object.keys(e).forEach(${getFunctionIntro(['k'], {\n        isAsync: false,\n        name: null\n    })}${body})${s}`;\nconst loopOverNamespaces = (body, useForEach, t, { _, cnst, getDirectReturnFunction, getFunctionIntro, n }) => {\n    if (useForEach) {\n        const [left, right] = getDirectReturnFunction(['e'], {\n            functionReturn: false,\n            lineBreakIndent: { base: t, t },\n            name: null\n        });\n        return (`m.forEach(${left}` +\n            `e${_}&&${_}typeof e${_}!==${_}'string'${_}&&${_}!Array.isArray(e)${_}&&${_}Object.keys(e).forEach(${getFunctionIntro(['k'], {\n                isAsync: false,\n                name: null\n            })}${body})${right});`);\n    }\n    return (`for${_}(var i${_}=${_}0;${_}i${_}<${_}m.length;${_}i++)${_}{${n}` +\n        `${t}${t}${cnst} e${_}=${_}m[i];${n}` +\n        `${t}${t}if${_}(typeof e${_}!==${_}'string'${_}&&${_}!Array.isArray(e))${_}{${_}for${_}(${cnst} k in e)${_}${body}${_}}${n}${t}}`);\n};\nconst copyNonDefaultOwnPropertyLiveBinding = (t, index, snippets) => {\n    const { _, n } = snippets;\n    return (`${index}if${_}(k${_}!==${_}'default')${_}{${n}` +\n        copyOwnPropertyLiveBinding(t, index + t, snippets) +\n        `${index}}${n}`);\n};\nconst copyOwnPropertyLiveBinding = (t, index, { _, cnst, getDirectReturnFunction, n }) => {\n    const [left, right] = getDirectReturnFunction([], {\n        functionReturn: true,\n        lineBreakIndent: null,\n        name: null\n    });\n    return (`${index}${cnst} d${_}=${_}Object.getOwnPropertyDescriptor(e,${_}k);${n}` +\n        `${index}Object.defineProperty(n,${_}k,${_}d.get${_}?${_}d${_}:${_}{${n}` +\n        `${index}${t}enumerable:${_}true,${n}` +\n        `${index}${t}get:${_}${left}e[k]${right}${n}` +\n        `${index}});${n}`);\n};\nconst copyPropertyLiveBinding = (t, index, { _, cnst, getDirectReturnFunction, n }) => {\n    const [left, right] = getDirectReturnFunction([], {\n        functionReturn: true,\n        lineBreakIndent: null,\n        name: null\n    });\n    return (`${index}${cnst} d${_}=${_}Object.getOwnPropertyDescriptor(e,${_}k);${n}` +\n        `${index}if${_}(d)${_}{${n}` +\n        `${index}${t}Object.defineProperty(n,${_}k,${_}d.get${_}?${_}d${_}:${_}{${n}` +\n        `${index}${t}${t}enumerable:${_}true,${n}` +\n        `${index}${t}${t}get:${_}${left}e[k]${right}${n}` +\n        `${index}${t}});${n}` +\n        `${index}}${n}`);\n};\nconst copyPropertyStatic = (_t, index, { _, n }) => `${index}n[k]${_}=${_}e[k];${n}`;\nconst getFrozen = (freeze, fragment) => freeze ? `Object.freeze(${fragment})` : fragment;\nconst getWithToStringTag = (symbols, fragment, { _, getObject }) => symbols\n    ? `Object.defineProperty(${fragment},${_}Symbol.toStringTag,${_}${getToStringTagValue(getObject)})`\n    : fragment;\nconst HELPER_NAMES = Object.keys(HELPER_GENERATORS);\nfunction getToStringTagValue(getObject) {\n    return getObject([['value', \"'Module'\"]], {\n        lineBreakIndent: null\n    });\n}\n\nclass Literal extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath() { }\n    getLiteralValueAtPath(path) {\n        if (path.length > 0 ||\n            // unknown literals can also be null but do not start with an \"n\"\n            (this.value === null && this.scope.context.code.charCodeAt(this.start) !== 110) ||\n            typeof this.value === 'bigint' ||\n            // to support shims for regular expressions\n            this.scope.context.code.charCodeAt(this.start) === 47) {\n            return UnknownValue;\n        }\n        return this.value;\n    }\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length !== 1)\n            return UNKNOWN_RETURN_EXPRESSION;\n        return getMemberReturnExpressionWhenCalled(this.members, path[0]);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        switch (interaction.type) {\n            case INTERACTION_ACCESSED: {\n                return path.length > (this.value === null ? 0 : 1);\n            }\n            case INTERACTION_ASSIGNED: {\n                return true;\n            }\n            case INTERACTION_CALLED: {\n                if (this.included &&\n                    this.value instanceof RegExp &&\n                    (this.value.global || this.value.sticky)) {\n                    return true;\n                }\n                return (path.length !== 1 ||\n                    hasMemberEffectWhenCalled(this.members, path[0], interaction, context));\n            }\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.members = getLiteralMembersForValue(this.value);\n    }\n    parseNode(esTreeNode) {\n        this.value = esTreeNode.value;\n        this.regex = esTreeNode.regex;\n        return super.parseNode(esTreeNode);\n    }\n    render(code) {\n        if (typeof this.value === 'string') {\n            code.indentExclusionRanges.push([this.start + 1, this.end - 1]);\n        }\n    }\n}\n\nfunction getChainElementLiteralValueAtPath(element, object, path, recursionTracker, origin) {\n    if ('getLiteralValueAtPathAsChainElement' in object) {\n        const calleeValue = object.getLiteralValueAtPathAsChainElement(EMPTY_PATH, SHARED_RECURSION_TRACKER, origin);\n        if (calleeValue === IS_SKIPPED_CHAIN || (element.optional && calleeValue == null)) {\n            return IS_SKIPPED_CHAIN;\n        }\n    }\n    else if (element.optional &&\n        object.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, origin) == null) {\n        return IS_SKIPPED_CHAIN;\n    }\n    return element.getLiteralValueAtPath(path, recursionTracker, origin);\n}\n\n// To avoid infinite recursions\nconst MAX_PATH_DEPTH = 7;\nfunction getResolvablePropertyKey(memberExpression) {\n    return memberExpression.computed\n        ? getResolvableComputedPropertyKey(memberExpression.property)\n        : memberExpression.property.name;\n}\nfunction getResolvableComputedPropertyKey(propertyKey) {\n    if (propertyKey instanceof Literal) {\n        return String(propertyKey.value);\n    }\n    return null;\n}\nfunction getPathIfNotComputed(memberExpression) {\n    const nextPathKey = memberExpression.propertyKey;\n    const object = memberExpression.object;\n    if (typeof nextPathKey === 'string') {\n        if (object instanceof Identifier) {\n            return [\n                { key: object.name, pos: object.start },\n                { key: nextPathKey, pos: memberExpression.property.start }\n            ];\n        }\n        if (object instanceof MemberExpression) {\n            const parentPath = getPathIfNotComputed(object);\n            return (parentPath && [...parentPath, { key: nextPathKey, pos: memberExpression.property.start }]);\n        }\n    }\n    return null;\n}\nfunction getStringFromPath(path) {\n    let pathString = path[0].key;\n    for (let index = 1; index < path.length; index++) {\n        pathString += '.' + path[index].key;\n    }\n    return pathString;\n}\nclass MemberExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.variable = null;\n        this.expressionsToBeDeoptimized = [];\n    }\n    get computed() {\n        return isFlagSet(this.flags, 1024 /* Flag.computed */);\n    }\n    set computed(value) {\n        this.flags = setFlag(this.flags, 1024 /* Flag.computed */, value);\n    }\n    get optional() {\n        return isFlagSet(this.flags, 128 /* Flag.optional */);\n    }\n    set optional(value) {\n        this.flags = setFlag(this.flags, 128 /* Flag.optional */, value);\n    }\n    get assignmentDeoptimized() {\n        return isFlagSet(this.flags, 16 /* Flag.assignmentDeoptimized */);\n    }\n    set assignmentDeoptimized(value) {\n        this.flags = setFlag(this.flags, 16 /* Flag.assignmentDeoptimized */, value);\n    }\n    get bound() {\n        return isFlagSet(this.flags, 32 /* Flag.bound */);\n    }\n    set bound(value) {\n        this.flags = setFlag(this.flags, 32 /* Flag.bound */, value);\n    }\n    get isUndefined() {\n        return isFlagSet(this.flags, 64 /* Flag.isUndefined */);\n    }\n    set isUndefined(value) {\n        this.flags = setFlag(this.flags, 64 /* Flag.isUndefined */, value);\n    }\n    bind() {\n        this.bound = true;\n        const path = getPathIfNotComputed(this);\n        const baseVariable = path && this.scope.findVariable(path[0].key);\n        if (baseVariable?.isNamespace) {\n            const resolvedVariable = resolveNamespaceVariables(baseVariable, path.slice(1), this.scope.context);\n            if (!resolvedVariable) {\n                super.bind();\n            }\n            else if (resolvedVariable === 'undefined') {\n                this.isUndefined = true;\n            }\n            else {\n                this.variable = resolvedVariable;\n                this.scope.addNamespaceMemberAccess(getStringFromPath(path), resolvedVariable);\n            }\n        }\n        else {\n            super.bind();\n        }\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        if (this.variable) {\n            this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n        }\n        else if (!this.isUndefined) {\n            if (path.length < MAX_PATH_DEPTH) {\n                this.object.deoptimizeArgumentsOnInteractionAtPath(interaction, [this.getPropertyKey(), ...path], recursionTracker);\n            }\n            else {\n                deoptimizeInteraction(interaction);\n            }\n        }\n    }\n    deoptimizeCache() {\n        const { expressionsToBeDeoptimized, object } = this;\n        this.expressionsToBeDeoptimized = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n        this.propertyKey = UnknownKey;\n        object.deoptimizePath(UNKNOWN_PATH);\n        for (const expression of expressionsToBeDeoptimized) {\n            expression.deoptimizeCache();\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length === 0)\n            this.disallowNamespaceReassignment();\n        if (this.variable) {\n            this.variable.deoptimizePath(path);\n        }\n        else if (!this.isUndefined && path.length < MAX_PATH_DEPTH) {\n            const propertyKey = this.getPropertyKey();\n            this.object.deoptimizePath([\n                propertyKey === UnknownKey ? UnknownNonAccessorKey : propertyKey,\n                ...path\n            ]);\n        }\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        if (this.variable) {\n            return this.variable.getLiteralValueAtPath(path, recursionTracker, origin);\n        }\n        if (this.isUndefined) {\n            return undefined;\n        }\n        if (this.propertyKey !== UnknownKey && path.length < MAX_PATH_DEPTH) {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.object.getLiteralValueAtPath([this.getPropertyKey(), ...path], recursionTracker, origin);\n        }\n        return UnknownValue;\n    }\n    getLiteralValueAtPathAsChainElement(path, recursionTracker, origin) {\n        if (this.variable) {\n            return this.variable.getLiteralValueAtPath(path, recursionTracker, origin);\n        }\n        if (this.isUndefined) {\n            return undefined;\n        }\n        return getChainElementLiteralValueAtPath(this, this.object, path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        if (this.variable) {\n            return this.variable.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n        }\n        if (this.isUndefined) {\n            return [UNDEFINED_EXPRESSION, false];\n        }\n        if (this.propertyKey !== UnknownKey && path.length < MAX_PATH_DEPTH) {\n            this.expressionsToBeDeoptimized.push(origin);\n            return this.object.getReturnExpressionWhenCalledAtPath([this.getPropertyKey(), ...path], interaction, recursionTracker, origin);\n        }\n        return UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return (this.property.hasEffects(context) ||\n            this.object.hasEffects(context) ||\n            this.hasAccessEffect(context));\n    }\n    hasEffectsAsChainElement(context) {\n        if (this.variable || this.isUndefined)\n            return this.hasEffects(context);\n        const objectHasEffects = 'hasEffectsAsChainElement' in this.object\n            ? this.object.hasEffectsAsChainElement(context)\n            : this.object.hasEffects(context);\n        if (objectHasEffects === IS_SKIPPED_CHAIN)\n            return IS_SKIPPED_CHAIN;\n        if (this.optional &&\n            this.object.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this) == null) {\n            return objectHasEffects || IS_SKIPPED_CHAIN;\n        }\n        // We only apply deoptimizations lazily once we know we are not skipping\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return objectHasEffects || this.property.hasEffects(context) || this.hasAccessEffect(context);\n    }\n    hasEffectsAsAssignmentTarget(context, checkAccess) {\n        if (checkAccess && !this.deoptimized)\n            this.applyDeoptimizations();\n        if (!this.assignmentDeoptimized)\n            this.applyAssignmentDeoptimization();\n        return (this.property.hasEffects(context) ||\n            this.object.hasEffects(context) ||\n            (checkAccess && this.hasAccessEffect(context)) ||\n            this.hasEffectsOnInteractionAtPath(EMPTY_PATH, this.assignmentInteraction, context));\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (this.variable) {\n            return this.variable.hasEffectsOnInteractionAtPath(path, interaction, context);\n        }\n        if (this.isUndefined) {\n            return true;\n        }\n        if (path.length < MAX_PATH_DEPTH) {\n            return this.object.hasEffectsOnInteractionAtPath([this.getPropertyKey(), ...path], interaction, context);\n        }\n        return true;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.includeProperties(context, includeChildrenRecursively);\n    }\n    includeAsAssignmentTarget(context, includeChildrenRecursively, deoptimizeAccess) {\n        if (!this.assignmentDeoptimized)\n            this.applyAssignmentDeoptimization();\n        if (deoptimizeAccess) {\n            this.include(context, includeChildrenRecursively);\n        }\n        else {\n            this.includeProperties(context, includeChildrenRecursively);\n        }\n    }\n    includeCallArguments(context, parameters) {\n        if (this.variable) {\n            this.variable.includeCallArguments(context, parameters);\n        }\n        else {\n            super.includeCallArguments(context, parameters);\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.propertyKey = getResolvablePropertyKey(this);\n        this.accessInteraction = { args: [this.object], type: INTERACTION_ACCESSED };\n    }\n    render(code, options, { renderedParentType, isCalleeOfRenderedParent, renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        if (this.variable || this.isUndefined) {\n            const { snippets: { getPropertyAccess } } = options;\n            let replacement = this.variable ? this.variable.getName(getPropertyAccess) : 'undefined';\n            if (renderedParentType && isCalleeOfRenderedParent)\n                replacement = '0, ' + replacement;\n            code.overwrite(this.start, this.end, replacement, {\n                contentOnly: true,\n                storeName: true\n            });\n        }\n        else {\n            if (renderedParentType && isCalleeOfRenderedParent) {\n                code.appendRight(this.start, '0, ');\n            }\n            this.object.render(code, options, { renderedSurroundingElement });\n            this.property.render(code, options);\n        }\n    }\n    setAssignedValue(value) {\n        this.assignmentInteraction = {\n            args: [this.object, value],\n            type: INTERACTION_ASSIGNED\n        };\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        const { propertyReadSideEffects } = this.scope.context.options\n            .treeshake;\n        if (\n        // Namespaces are not bound and should not be deoptimized\n        this.bound &&\n            propertyReadSideEffects &&\n            !(this.variable || this.isUndefined)) {\n            const propertyKey = this.getPropertyKey();\n            this.object.deoptimizeArgumentsOnInteractionAtPath(this.accessInteraction, [propertyKey], SHARED_RECURSION_TRACKER);\n            this.scope.context.requestTreeshakingPass();\n        }\n        if (this.variable) {\n            this.variable.addUsedPlace(this);\n            this.scope.context.requestTreeshakingPass();\n        }\n    }\n    applyAssignmentDeoptimization() {\n        this.assignmentDeoptimized = true;\n        const { propertyReadSideEffects } = this.scope.context.options\n            .treeshake;\n        if (\n        // Namespaces are not bound and should not be deoptimized\n        this.bound &&\n            propertyReadSideEffects &&\n            !(this.variable || this.isUndefined)) {\n            this.object.deoptimizeArgumentsOnInteractionAtPath(this.assignmentInteraction, [this.getPropertyKey()], SHARED_RECURSION_TRACKER);\n            this.scope.context.requestTreeshakingPass();\n        }\n    }\n    disallowNamespaceReassignment() {\n        if (this.object instanceof Identifier) {\n            const variable = this.scope.findVariable(this.object.name);\n            if (variable.isNamespace) {\n                if (this.variable) {\n                    this.scope.context.includeVariableInModule(this.variable);\n                }\n                this.scope.context.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logIllegalImportReassignment)(this.object.name, this.scope.context.module.id), this.start);\n            }\n        }\n    }\n    getPropertyKey() {\n        if (this.propertyKey === null) {\n            this.propertyKey = UnknownKey;\n            const value = this.property.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this);\n            return (this.propertyKey =\n                value === SymbolToStringTag\n                    ? value\n                    : typeof value === 'symbol'\n                        ? UnknownKey\n                        : String(value));\n        }\n        return this.propertyKey;\n    }\n    hasAccessEffect(context) {\n        const { propertyReadSideEffects } = this.scope.context.options\n            .treeshake;\n        return (!(this.variable || this.isUndefined) &&\n            propertyReadSideEffects &&\n            (propertyReadSideEffects === 'always' ||\n                this.object.hasEffectsOnInteractionAtPath([this.getPropertyKey()], this.accessInteraction, context)));\n    }\n    includeProperties(context, includeChildrenRecursively) {\n        if (!this.included) {\n            this.included = true;\n            if (this.variable) {\n                this.scope.context.includeVariableInModule(this.variable);\n            }\n        }\n        this.object.include(context, includeChildrenRecursively);\n        this.property.include(context, includeChildrenRecursively);\n    }\n}\nfunction resolveNamespaceVariables(baseVariable, path, astContext) {\n    if (path.length === 0)\n        return baseVariable;\n    if (!baseVariable.isNamespace || baseVariable instanceof ExternalVariable)\n        return null;\n    const exportName = path[0].key;\n    const variable = baseVariable.context.traceExport(exportName);\n    if (!variable) {\n        if (path.length === 1) {\n            const fileName = baseVariable.context.fileName;\n            astContext.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingExport)(exportName, astContext.module.id, fileName), path[0].pos);\n            return 'undefined';\n        }\n        return null;\n    }\n    return resolveNamespaceVariables(variable, path.slice(1), astContext);\n}\n\nconst FILE_PREFIX = 'ROLLUP_FILE_URL_';\nconst IMPORT = 'import';\nclass MetaProperty extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.metaProperty = null;\n        this.preliminaryChunkId = null;\n        this.referenceId = null;\n    }\n    getReferencedFileName(outputPluginDriver) {\n        const { meta: { name }, metaProperty } = this;\n        if (name === IMPORT && metaProperty?.startsWith(FILE_PREFIX)) {\n            return outputPluginDriver.getFileName(metaProperty.slice(FILE_PREFIX.length));\n        }\n        return null;\n    }\n    hasEffects() {\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return path.length > 1 || type !== INTERACTION_ACCESSED;\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            if (this.meta.name === IMPORT) {\n                this.scope.context.addImportMeta(this);\n                const parent = this.parent;\n                const metaProperty = (this.metaProperty =\n                    parent instanceof MemberExpression && typeof parent.propertyKey === 'string'\n                        ? parent.propertyKey\n                        : null);\n                if (metaProperty?.startsWith(FILE_PREFIX)) {\n                    this.referenceId = metaProperty.slice(FILE_PREFIX.length);\n                }\n            }\n        }\n    }\n    render(code, renderOptions) {\n        const { format, pluginDriver, snippets } = renderOptions;\n        const { scope: { context: { module } }, meta: { name }, metaProperty, parent, preliminaryChunkId, referenceId, start, end } = this;\n        const { id: moduleId } = module;\n        if (name !== IMPORT)\n            return;\n        const chunkId = preliminaryChunkId;\n        if (referenceId) {\n            const fileName = pluginDriver.getFileName(referenceId);\n            const relativePath = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.normalize)((0,node_path__WEBPACK_IMPORTED_MODULE_1__.relative)((0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(chunkId), fileName));\n            const replacement = pluginDriver.hookFirstSync('resolveFileUrl', [\n                { chunkId, fileName, format, moduleId, referenceId, relativePath }\n            ]) || relativeUrlMechanisms[format](relativePath);\n            code.overwrite(parent.start, parent.end, replacement, { contentOnly: true });\n            return;\n        }\n        let replacement = pluginDriver.hookFirstSync('resolveImportMeta', [\n            metaProperty,\n            { chunkId, format, moduleId }\n        ]);\n        if (!replacement) {\n            replacement = importMetaMechanisms[format]?.(metaProperty, { chunkId, snippets });\n            renderOptions.accessedDocumentCurrentScript ||=\n                formatsMaybeAccessDocumentCurrentScript.includes(format) && replacement !== 'undefined';\n        }\n        if (typeof replacement === 'string') {\n            if (parent instanceof MemberExpression) {\n                code.overwrite(parent.start, parent.end, replacement, { contentOnly: true });\n            }\n            else {\n                code.overwrite(start, end, replacement, { contentOnly: true });\n            }\n        }\n    }\n    setResolution(format, accessedGlobalsByScope, preliminaryChunkId) {\n        this.preliminaryChunkId = preliminaryChunkId;\n        const accessedGlobals = (this.metaProperty?.startsWith(FILE_PREFIX) ? accessedFileUrlGlobals : accessedMetaUrlGlobals)[format];\n        if (accessedGlobals.length > 0) {\n            this.scope.addAccessedGlobals(accessedGlobals, accessedGlobalsByScope);\n        }\n    }\n}\nconst formatsMaybeAccessDocumentCurrentScript = ['cjs', 'iife', 'umd'];\nconst accessedMetaUrlGlobals = {\n    amd: ['document', 'module', 'URL'],\n    cjs: ['document', 'require', 'URL', DOCUMENT_CURRENT_SCRIPT],\n    es: [],\n    iife: ['document', 'URL', DOCUMENT_CURRENT_SCRIPT],\n    system: ['module'],\n    umd: ['document', 'require', 'URL', DOCUMENT_CURRENT_SCRIPT]\n};\nconst accessedFileUrlGlobals = {\n    amd: ['document', 'require', 'URL'],\n    cjs: ['document', 'require', 'URL'],\n    es: [],\n    iife: ['document', 'URL'],\n    system: ['module', 'URL'],\n    umd: ['document', 'require', 'URL']\n};\nconst getResolveUrl = (path, URL = 'URL') => `new ${URL}(${path}).href`;\nconst getRelativeUrlFromDocument = (relativePath, umd = false) => getResolveUrl(`'${escapeId(relativePath)}', ${umd ? `typeof document === 'undefined' ? location.href : ` : ''}document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT' && document.currentScript.src || document.baseURI`);\nconst getGenericImportMetaMechanism = (getUrl) => (property, { chunkId }) => {\n    const urlMechanism = getUrl(chunkId);\n    return property === null\n        ? `({ url: ${urlMechanism} })`\n        : property === 'url'\n            ? urlMechanism\n            : 'undefined';\n};\nconst getFileUrlFromFullPath = (path) => `require('u' + 'rl').pathToFileURL(${path}).href`;\nconst getFileUrlFromRelativePath = (path) => getFileUrlFromFullPath(`__dirname + '/${escapeId(path)}'`);\nconst getUrlFromDocument = (chunkId, umd = false) => `${umd ? `typeof document === 'undefined' ? location.href : ` : ''}(${DOCUMENT_CURRENT_SCRIPT} && ${DOCUMENT_CURRENT_SCRIPT}.tagName.toUpperCase() === 'SCRIPT' && ${DOCUMENT_CURRENT_SCRIPT}.src || new URL('${escapeId(chunkId)}', document.baseURI).href)`;\nconst relativeUrlMechanisms = {\n    amd: relativePath => {\n        if (relativePath[0] !== '.')\n            relativePath = './' + relativePath;\n        return getResolveUrl(`require.toUrl('${escapeId(relativePath)}'), document.baseURI`);\n    },\n    cjs: relativePath => `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(relativePath)} : ${getRelativeUrlFromDocument(relativePath)})`,\n    es: relativePath => getResolveUrl(`'${escapeId(relativePath)}', import.meta.url`),\n    iife: relativePath => getRelativeUrlFromDocument(relativePath),\n    system: relativePath => getResolveUrl(`'${escapeId(relativePath)}', module.meta.url`),\n    umd: relativePath => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${getFileUrlFromRelativePath(relativePath)} : ${getRelativeUrlFromDocument(relativePath, true)})`\n};\nconst importMetaMechanisms = {\n    amd: getGenericImportMetaMechanism(() => getResolveUrl(`module.uri, document.baseURI`)),\n    cjs: getGenericImportMetaMechanism(chunkId => `(typeof document === 'undefined' ? ${getFileUrlFromFullPath('__filename')} : ${getUrlFromDocument(chunkId)})`),\n    iife: getGenericImportMetaMechanism(chunkId => getUrlFromDocument(chunkId)),\n    system: (property, { snippets: { getPropertyAccess } }) => property === null ? `module.meta` : `module.meta${getPropertyAccess(property)}`,\n    umd: getGenericImportMetaMechanism(chunkId => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${getFileUrlFromFullPath('__filename')} : ${getUrlFromDocument(chunkId, true)})`)\n};\n\nclass UndefinedVariable extends Variable {\n    constructor() {\n        super('undefined');\n    }\n    getLiteralValueAtPath() {\n        return undefined;\n    }\n}\n\nclass ExportDefaultVariable extends LocalVariable {\n    constructor(name, exportDefaultDeclaration, context) {\n        super(name, exportDefaultDeclaration, exportDefaultDeclaration.declaration, context, 'other');\n        this.hasId = false;\n        this.originalId = null;\n        this.originalVariable = null;\n        const declaration = exportDefaultDeclaration.declaration;\n        if ((declaration instanceof FunctionDeclaration || declaration instanceof ClassDeclaration) &&\n            declaration.id) {\n            this.hasId = true;\n            this.originalId = declaration.id;\n        }\n        else if (declaration instanceof Identifier) {\n            this.originalId = declaration;\n        }\n    }\n    addReference(identifier) {\n        if (!this.hasId) {\n            this.name = identifier.name;\n        }\n    }\n    addUsedPlace(usedPlace) {\n        const original = this.getOriginalVariable();\n        if (original === this) {\n            super.addUsedPlace(usedPlace);\n        }\n        else {\n            original.addUsedPlace(usedPlace);\n        }\n    }\n    forbidName(name) {\n        const original = this.getOriginalVariable();\n        if (original === this) {\n            super.forbidName(name);\n        }\n        else {\n            original.forbidName(name);\n        }\n    }\n    getAssignedVariableName() {\n        return (this.originalId && this.originalId.name) || null;\n    }\n    getBaseVariableName() {\n        const original = this.getOriginalVariable();\n        return original === this ? super.getBaseVariableName() : original.getBaseVariableName();\n    }\n    getDirectOriginalVariable() {\n        return this.originalId &&\n            (this.hasId ||\n                !(this.originalId.isPossibleTDZ() ||\n                    this.originalId.variable.isReassigned ||\n                    this.originalId.variable instanceof UndefinedVariable ||\n                    // this avoids a circular dependency\n                    'syntheticNamespace' in this.originalId.variable))\n            ? this.originalId.variable\n            : null;\n    }\n    getName(getPropertyAccess) {\n        const original = this.getOriginalVariable();\n        return original === this\n            ? super.getName(getPropertyAccess)\n            : original.getName(getPropertyAccess);\n    }\n    getOriginalVariable() {\n        if (this.originalVariable)\n            return this.originalVariable;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let original = this;\n        let currentVariable;\n        const checkedVariables = new Set();\n        do {\n            checkedVariables.add(original);\n            currentVariable = original;\n            original = currentVariable.getDirectOriginalVariable();\n        } while (original instanceof ExportDefaultVariable && !checkedVariables.has(original));\n        return (this.originalVariable = original || currentVariable);\n    }\n}\n\nclass NamespaceVariable extends Variable {\n    constructor(context) {\n        super(context.getModuleName());\n        this.memberVariables = null;\n        this.mergedNamespaces = [];\n        this.referencedEarly = false;\n        this.references = [];\n        this.context = context;\n        this.module = context.module;\n    }\n    addReference(identifier) {\n        this.references.push(identifier);\n        this.name = identifier.name;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        if (path.length > 1 || (path.length === 1 && interaction.type === INTERACTION_CALLED)) {\n            const key = path[0];\n            if (typeof key === 'string') {\n                this.getMemberVariables()[key]?.deoptimizeArgumentsOnInteractionAtPath(interaction, path.slice(1), recursionTracker);\n            }\n            else {\n                deoptimizeInteraction(interaction);\n            }\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length > 1) {\n            const key = path[0];\n            if (typeof key === 'string') {\n                this.getMemberVariables()[key]?.deoptimizePath(path.slice(1));\n            }\n        }\n    }\n    getLiteralValueAtPath(path) {\n        if (path[0] === SymbolToStringTag) {\n            return 'Module';\n        }\n        return UnknownValue;\n    }\n    getMemberVariables() {\n        if (this.memberVariables) {\n            return this.memberVariables;\n        }\n        const memberVariables = Object.create(null);\n        const sortedExports = [...this.context.getExports(), ...this.context.getReexports()].sort();\n        for (const name of sortedExports) {\n            if (name[0] !== '*' && name !== this.module.info.syntheticNamedExports) {\n                const exportedVariable = this.context.traceExport(name);\n                if (exportedVariable) {\n                    memberVariables[name] = exportedVariable;\n                }\n            }\n        }\n        return (this.memberVariables = memberVariables);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        const { type } = interaction;\n        if (path.length === 0) {\n            // This can only be a call anyway\n            return true;\n        }\n        if (path.length === 1 && type !== INTERACTION_CALLED) {\n            return type === INTERACTION_ASSIGNED;\n        }\n        const key = path[0];\n        if (typeof key !== 'string') {\n            return true;\n        }\n        const memberVariable = this.getMemberVariables()[key];\n        return (!memberVariable ||\n            memberVariable.hasEffectsOnInteractionAtPath(path.slice(1), interaction, context));\n    }\n    include() {\n        super.include();\n        this.context.includeAllExports();\n    }\n    prepare(accessedGlobalsByScope) {\n        if (this.mergedNamespaces.length > 0) {\n            this.module.scope.addAccessedGlobals([MERGE_NAMESPACES_VARIABLE], accessedGlobalsByScope);\n        }\n    }\n    renderBlock(options) {\n        const { exportNamesByVariable, format, freeze, indent: t, symbols, snippets: { _, cnst, getObject, getPropertyAccess, n, s } } = options;\n        const memberVariables = this.getMemberVariables();\n        const members = Object.entries(memberVariables)\n            .filter(([_, variable]) => variable.included)\n            .map(([name, variable]) => {\n            if (this.referencedEarly || variable.isReassigned || variable === this) {\n                return [\n                    null,\n                    `get ${stringifyObjectKeyIfNeeded(name)}${_}()${_}{${_}return ${variable.getName(getPropertyAccess)}${s}${_}}`\n                ];\n            }\n            return [name, variable.getName(getPropertyAccess)];\n        });\n        members.unshift([null, `__proto__:${_}null`]);\n        let output = getObject(members, { lineBreakIndent: { base: '', t } });\n        if (this.mergedNamespaces.length > 0) {\n            const assignmentArguments = this.mergedNamespaces.map(variable => variable.getName(getPropertyAccess));\n            output = `/*#__PURE__*/${MERGE_NAMESPACES_VARIABLE}(${output},${_}[${assignmentArguments.join(`,${_}`)}])`;\n        }\n        else {\n            // The helper to merge namespaces will also take care of freezing and toStringTag\n            if (symbols) {\n                output = `/*#__PURE__*/Object.defineProperty(${output},${_}Symbol.toStringTag,${_}${getToStringTagValue(getObject)})`;\n            }\n            if (freeze) {\n                output = `/*#__PURE__*/Object.freeze(${output})`;\n            }\n        }\n        const name = this.getName(getPropertyAccess);\n        output = `${cnst} ${name}${_}=${_}${output};`;\n        if (format === 'system' && exportNamesByVariable.has(this)) {\n            output += `${n}${getSystemExportStatement([this], options)};`;\n        }\n        return output;\n    }\n    renderFirst() {\n        return this.referencedEarly;\n    }\n    setMergedNamespaces(mergedNamespaces) {\n        this.mergedNamespaces = mergedNamespaces;\n        const moduleExecIndex = this.context.getModuleExecIndex();\n        for (const identifier of this.references) {\n            const { context } = identifier.scope;\n            if (context.getModuleExecIndex() <= moduleExecIndex) {\n                this.referencedEarly = true;\n                break;\n            }\n        }\n    }\n}\nNamespaceVariable.prototype.isNamespace = true;\n\nclass SyntheticNamedExportVariable extends Variable {\n    constructor(context, name, syntheticNamespace) {\n        super(name);\n        this.baseVariable = null;\n        this.context = context;\n        this.module = context.module;\n        this.syntheticNamespace = syntheticNamespace;\n    }\n    getBaseVariable() {\n        if (this.baseVariable)\n            return this.baseVariable;\n        let baseVariable = this.syntheticNamespace;\n        while (baseVariable instanceof ExportDefaultVariable ||\n            baseVariable instanceof SyntheticNamedExportVariable) {\n            if (baseVariable instanceof ExportDefaultVariable) {\n                const original = baseVariable.getOriginalVariable();\n                if (original === baseVariable)\n                    break;\n                baseVariable = original;\n            }\n            if (baseVariable instanceof SyntheticNamedExportVariable) {\n                baseVariable = baseVariable.syntheticNamespace;\n            }\n        }\n        return (this.baseVariable = baseVariable);\n    }\n    getBaseVariableName() {\n        return this.syntheticNamespace.getBaseVariableName();\n    }\n    getName(getPropertyAccess) {\n        return `${this.syntheticNamespace.getName(getPropertyAccess)}${getPropertyAccess(this.name)}`;\n    }\n    include() {\n        super.include();\n        this.context.includeVariableInModule(this.syntheticNamespace);\n    }\n    setRenderNames(baseName, name) {\n        super.setRenderNames(baseName, name);\n    }\n}\n\nclass ExternalChunk {\n    constructor(module, options, inputBase) {\n        this.options = options;\n        this.inputBase = inputBase;\n        this.defaultVariableName = '';\n        this.namespaceVariableName = '';\n        this.variableName = '';\n        this.fileName = null;\n        this.importAttributes = null;\n        this.id = module.id;\n        this.moduleInfo = module.info;\n        this.renormalizeRenderPath = module.renormalizeRenderPath;\n        this.suggestedVariableName = module.suggestedVariableName;\n    }\n    getFileName() {\n        if (this.fileName) {\n            return this.fileName;\n        }\n        const { paths } = this.options;\n        return (this.fileName =\n            (typeof paths === 'function' ? paths(this.id) : paths[this.id]) ||\n                (this.renormalizeRenderPath ? (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.normalize)((0,node_path__WEBPACK_IMPORTED_MODULE_1__.relative)(this.inputBase, this.id)) : this.id));\n    }\n    getImportAttributes(snippets) {\n        return (this.importAttributes ||= formatAttributes(this.options.format === 'es' &&\n            this.options.externalImportAttributes &&\n            this.moduleInfo.attributes, snippets));\n    }\n    getImportPath(importer) {\n        return escapeId(this.renormalizeRenderPath\n            ? (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getImportPath)(importer, this.getFileName(), this.options.format === 'amd', false)\n            : this.getFileName());\n    }\n}\nfunction formatAttributes(attributes, { getObject }) {\n    if (!attributes) {\n        return null;\n    }\n    const assertionEntries = Object.entries(attributes).map(([key, value]) => [key, `'${value}'`]);\n    if (assertionEntries.length > 0) {\n        return getObject(assertionEntries, { lineBreakIndent: null });\n    }\n    return null;\n}\n\nfunction removeJsExtension(name) {\n    return name.endsWith('.js') ? name.slice(0, -3) : name;\n}\n\nfunction getCompleteAmdId(options, chunkId) {\n    if (options.autoId) {\n        return `${options.basePath ? options.basePath + '/' : ''}${removeJsExtension(chunkId)}`;\n    }\n    return options.id ?? '';\n}\n\nfunction getExportBlock$1(exports, dependencies, namedExportsMode, interop, snippets, t, externalLiveBindings, reexportProtoFromExternal, mechanism = 'return ') {\n    const { _, getDirectReturnFunction, getFunctionIntro, getPropertyAccess, n, s } = snippets;\n    if (!namedExportsMode) {\n        return `${n}${n}${mechanism}${getSingleDefaultExport(exports, dependencies, interop, externalLiveBindings, getPropertyAccess)};`;\n    }\n    let exportBlock = '';\n    if (namedExportsMode) {\n        for (const { defaultVariableName, importPath, isChunk, name, namedExportsMode: depNamedExportsMode, namespaceVariableName, reexports } of dependencies) {\n            if (!reexports) {\n                continue;\n            }\n            for (const specifier of reexports) {\n                if (specifier.reexported !== '*') {\n                    const importName = getReexportedImportName(name, specifier.imported, depNamedExportsMode, isChunk, defaultVariableName, namespaceVariableName, interop, importPath, externalLiveBindings, getPropertyAccess);\n                    if (exportBlock)\n                        exportBlock += n;\n                    if (specifier.imported !== '*' && specifier.needsLiveBinding) {\n                        const [left, right] = getDirectReturnFunction([], {\n                            functionReturn: true,\n                            lineBreakIndent: null,\n                            name: null\n                        });\n                        exportBlock +=\n                            `Object.defineProperty(exports,${_}${JSON.stringify(specifier.reexported)},${_}{${n}` +\n                                `${t}enumerable:${_}true,${n}` +\n                                `${t}get:${_}${left}${importName}${right}${n}});`;\n                    }\n                    else if (specifier.reexported === '__proto__') {\n                        exportBlock +=\n                            `Object.defineProperty(exports,${_}\"__proto__\",${_}{${n}` +\n                                `${t}enumerable:${_}true,${n}` +\n                                `${t}value:${_}${importName}${n}});`;\n                    }\n                    else {\n                        exportBlock += `exports${getPropertyAccess(specifier.reexported)}${_}=${_}${importName};`;\n                    }\n                }\n            }\n        }\n    }\n    for (const { exported, local } of exports) {\n        const lhs = `exports${getPropertyAccess(exported)}`;\n        const rhs = local;\n        if (lhs !== rhs) {\n            if (exportBlock)\n                exportBlock += n;\n            exportBlock +=\n                exported === '__proto__'\n                    ? `Object.defineProperty(exports,${_}\"__proto__\",${_}{${n}` +\n                        `${t}enumerable:${_}true,${n}` +\n                        `${t}value:${_}${rhs}${n}});`\n                    : `${lhs}${_}=${_}${rhs};`;\n        }\n    }\n    if (namedExportsMode) {\n        for (const { name, reexports } of dependencies) {\n            if (!reexports) {\n                continue;\n            }\n            for (const specifier of reexports) {\n                if (specifier.reexported === '*') {\n                    if (exportBlock)\n                        exportBlock += n;\n                    if (!specifier.needsLiveBinding && reexportProtoFromExternal) {\n                        const protoString = \"'__proto__'\";\n                        exportBlock +=\n                            `Object.prototype.hasOwnProperty.call(${name},${_}${protoString})${_}&&${n}` +\n                                `${t}!Object.prototype.hasOwnProperty.call(exports,${_}${protoString})${_}&&${n}` +\n                                `${t}Object.defineProperty(exports,${_}${protoString},${_}{${n}` +\n                                `${t}${t}enumerable:${_}true,${n}` +\n                                `${t}${t}value:${_}${name}[${protoString}]${n}` +\n                                `${t}});${n}${n}`;\n                    }\n                    const copyPropertyIfNecessary = `{${n}${t}if${_}(k${_}!==${_}'default'${_}&&${_}!Object.prototype.hasOwnProperty.call(exports,${_}k))${_}${getDefineProperty(name, specifier.needsLiveBinding, t, snippets)}${s}${n}}`;\n                    exportBlock += `Object.keys(${name}).forEach(${getFunctionIntro(['k'], {\n                        isAsync: false,\n                        name: null\n                    })}${copyPropertyIfNecessary});`;\n                }\n            }\n        }\n    }\n    if (exportBlock) {\n        return `${n}${n}${exportBlock}`;\n    }\n    return '';\n}\nfunction getSingleDefaultExport(exports, dependencies, interop, externalLiveBindings, getPropertyAccess) {\n    if (exports.length > 0) {\n        return exports[0].local;\n    }\n    else {\n        for (const { defaultVariableName, importPath, isChunk, name, namedExportsMode: depNamedExportsMode, namespaceVariableName, reexports } of dependencies) {\n            if (reexports) {\n                return getReexportedImportName(name, reexports[0].imported, depNamedExportsMode, isChunk, defaultVariableName, namespaceVariableName, interop, importPath, externalLiveBindings, getPropertyAccess);\n            }\n        }\n    }\n}\nfunction getReexportedImportName(moduleVariableName, imported, depNamedExportsMode, isChunk, defaultVariableName, namespaceVariableName, interop, moduleId, externalLiveBindings, getPropertyAccess) {\n    if (imported === 'default') {\n        if (!isChunk) {\n            const moduleInterop = interop(moduleId);\n            const variableName = defaultInteropHelpersByInteropType[moduleInterop]\n                ? defaultVariableName\n                : moduleVariableName;\n            return isDefaultAProperty(moduleInterop, externalLiveBindings)\n                ? `${variableName}${getPropertyAccess('default')}`\n                : variableName;\n        }\n        return depNamedExportsMode\n            ? `${moduleVariableName}${getPropertyAccess('default')}`\n            : moduleVariableName;\n    }\n    if (imported === '*') {\n        return (isChunk ? !depNamedExportsMode : namespaceInteropHelpersByInteropType[interop(moduleId)])\n            ? namespaceVariableName\n            : moduleVariableName;\n    }\n    return `${moduleVariableName}${getPropertyAccess(imported)}`;\n}\nfunction getEsModuleValue(getObject) {\n    return getObject([['value', 'true']], {\n        lineBreakIndent: null\n    });\n}\nfunction getNamespaceMarkers(hasNamedExports, addEsModule, addNamespaceToStringTag, { _, getObject }) {\n    if (hasNamedExports) {\n        if (addEsModule) {\n            if (addNamespaceToStringTag) {\n                return `Object.defineProperties(exports,${_}${getObject([\n                    ['__esModule', getEsModuleValue(getObject)],\n                    [null, `[Symbol.toStringTag]:${_}${getToStringTagValue(getObject)}`]\n                ], {\n                    lineBreakIndent: null\n                })});`;\n            }\n            return `Object.defineProperty(exports,${_}'__esModule',${_}${getEsModuleValue(getObject)});`;\n        }\n        if (addNamespaceToStringTag) {\n            return `Object.defineProperty(exports,${_}Symbol.toStringTag,${_}${getToStringTagValue(getObject)});`;\n        }\n    }\n    return '';\n}\nconst getDefineProperty = (name, needsLiveBinding, t, { _, getDirectReturnFunction, n }) => {\n    if (needsLiveBinding) {\n        const [left, right] = getDirectReturnFunction([], {\n            functionReturn: true,\n            lineBreakIndent: null,\n            name: null\n        });\n        return (`Object.defineProperty(exports,${_}k,${_}{${n}` +\n            `${t}${t}enumerable:${_}true,${n}` +\n            `${t}${t}get:${_}${left}${name}[k]${right}${n}${t}})`);\n    }\n    return `exports[k]${_}=${_}${name}[k]`;\n};\n\nfunction getInteropBlock(dependencies, interop, externalLiveBindings, freeze, symbols, accessedGlobals, indent, snippets) {\n    const { _, cnst, n } = snippets;\n    const neededInteropHelpers = new Set();\n    const interopStatements = [];\n    const addInteropStatement = (helperVariableName, helper, dependencyVariableName) => {\n        neededInteropHelpers.add(helper);\n        interopStatements.push(`${cnst} ${helperVariableName}${_}=${_}/*#__PURE__*/${helper}(${dependencyVariableName});`);\n    };\n    for (const { defaultVariableName, imports, importPath, isChunk, name, namedExportsMode, namespaceVariableName, reexports } of dependencies) {\n        if (isChunk) {\n            for (const { imported, reexported } of [\n                ...(imports || []),\n                ...(reexports || [])\n            ]) {\n                if (imported === '*' && reexported !== '*') {\n                    if (!namedExportsMode) {\n                        addInteropStatement(namespaceVariableName, INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE, name);\n                    }\n                    break;\n                }\n            }\n        }\n        else {\n            const moduleInterop = interop(importPath);\n            let hasDefault = false;\n            let hasNamespace = false;\n            for (const { imported, reexported } of [\n                ...(imports || []),\n                ...(reexports || [])\n            ]) {\n                let helper;\n                let variableName;\n                if (imported === 'default') {\n                    if (!hasDefault) {\n                        hasDefault = true;\n                        if (defaultVariableName !== namespaceVariableName) {\n                            variableName = defaultVariableName;\n                            helper = defaultInteropHelpersByInteropType[moduleInterop];\n                        }\n                    }\n                }\n                else if (imported === '*' && reexported !== '*' && !hasNamespace) {\n                    hasNamespace = true;\n                    helper = namespaceInteropHelpersByInteropType[moduleInterop];\n                    variableName = namespaceVariableName;\n                }\n                if (helper) {\n                    addInteropStatement(variableName, helper, name);\n                }\n            }\n        }\n    }\n    return `${getHelpersBlock(neededInteropHelpers, accessedGlobals, indent, snippets, externalLiveBindings, freeze, symbols)}${interopStatements.length > 0 ? `${interopStatements.join(n)}${n}${n}` : ''}`;\n}\n\nfunction addJsExtension(name) {\n    return name.endsWith('.js') ? name : name + '.js';\n}\n\n// AMD resolution will only respect the AMD baseUrl if the .js extension is omitted.\n// The assumption is that this makes sense for all relative ids:\n// https://requirejs.org/docs/api.html#jsfiles\nfunction updateExtensionForRelativeAmdId(id, forceJsExtensionForImports) {\n    if (id[0] !== '.') {\n        return id;\n    }\n    return forceJsExtensionForImports ? addJsExtension(id) : removeJsExtension(id);\n}\n\nconst builtinModules = [\n\t\"assert\",\n\t\"assert/strict\",\n\t\"async_hooks\",\n\t\"buffer\",\n\t\"child_process\",\n\t\"cluster\",\n\t\"console\",\n\t\"constants\",\n\t\"crypto\",\n\t\"dgram\",\n\t\"diagnostics_channel\",\n\t\"dns\",\n\t\"dns/promises\",\n\t\"domain\",\n\t\"events\",\n\t\"fs\",\n\t\"fs/promises\",\n\t\"http\",\n\t\"http2\",\n\t\"https\",\n\t\"inspector\",\n\t\"inspector/promises\",\n\t\"module\",\n\t\"net\",\n\t\"os\",\n\t\"path\",\n\t\"path/posix\",\n\t\"path/win32\",\n\t\"perf_hooks\",\n\t\"process\",\n\t\"punycode\",\n\t\"querystring\",\n\t\"readline\",\n\t\"readline/promises\",\n\t\"repl\",\n\t\"stream\",\n\t\"stream/consumers\",\n\t\"stream/promises\",\n\t\"stream/web\",\n\t\"string_decoder\",\n\t\"timers\",\n\t\"timers/promises\",\n\t\"tls\",\n\t\"trace_events\",\n\t\"tty\",\n\t\"url\",\n\t\"util\",\n\t\"util/types\",\n\t\"v8\",\n\t\"vm\",\n\t\"wasi\",\n\t\"worker_threads\",\n\t\"zlib\"\n];\n\nconst nodeBuiltins = new Set(builtinModules);\nfunction warnOnBuiltins(log, dependencies) {\n    const externalBuiltins = dependencies\n        .map(({ importPath }) => importPath)\n        .filter(importPath => nodeBuiltins.has(importPath) || importPath.startsWith('node:'));\n    if (externalBuiltins.length === 0)\n        return;\n    log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingNodeBuiltins)(externalBuiltins));\n}\n\nfunction amd(magicString, { accessedGlobals, dependencies, exports, hasDefaultExport, hasExports, id, indent: t, intro, isEntryFacade, isModuleFacade, namedExportsMode, log, outro, snippets }, { amd, esModule, externalLiveBindings, freeze, generatedCode: { symbols }, interop, reexportProtoFromExternal, strict }) {\n    warnOnBuiltins(log, dependencies);\n    const deps = dependencies.map(m => `'${updateExtensionForRelativeAmdId(m.importPath, amd.forceJsExtensionForImports)}'`);\n    const parameters = dependencies.map(m => m.name);\n    const { n, getNonArrowFunctionIntro, _ } = snippets;\n    if (namedExportsMode && hasExports) {\n        parameters.unshift(`exports`);\n        deps.unshift(`'exports'`);\n    }\n    if (accessedGlobals.has('require')) {\n        parameters.unshift('require');\n        deps.unshift(`'require'`);\n    }\n    if (accessedGlobals.has('module')) {\n        parameters.unshift('module');\n        deps.unshift(`'module'`);\n    }\n    const completeAmdId = getCompleteAmdId(amd, id);\n    const defineParameters = (completeAmdId ? `'${completeAmdId}',${_}` : ``) +\n        (deps.length > 0 ? `[${deps.join(`,${_}`)}],${_}` : ``);\n    const useStrict = strict ? `${_}'use strict';` : '';\n    magicString.prepend(`${intro}${getInteropBlock(dependencies, interop, externalLiveBindings, freeze, symbols, accessedGlobals, t, snippets)}`);\n    const exportBlock = getExportBlock$1(exports, dependencies, namedExportsMode, interop, snippets, t, externalLiveBindings, reexportProtoFromExternal);\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports, isEntryFacade && (esModule === true || (esModule === 'if-default-prop' && hasDefaultExport)), isModuleFacade && symbols, snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers = n + n + namespaceMarkers;\n    }\n    magicString\n        .append(`${exportBlock}${namespaceMarkers}${outro}`)\n        .indent(t)\n        // factory function should be wrapped by parentheses to avoid lazy parsing,\n        // cf. https://v8.dev/blog/preparser#pife\n        .prepend(`${amd.define}(${defineParameters}(${getNonArrowFunctionIntro(parameters, {\n        isAsync: false,\n        name: null\n    })}{${useStrict}${n}${n}`)\n        .append(`${n}${n}}));`);\n}\n\nfunction cjs(magicString, { accessedGlobals, dependencies, exports, hasDefaultExport, hasExports, indent: t, intro, isEntryFacade, isModuleFacade, namedExportsMode, outro, snippets }, { compact, esModule, externalLiveBindings, freeze, interop, generatedCode: { symbols }, reexportProtoFromExternal, strict }) {\n    const { _, n } = snippets;\n    const useStrict = strict ? `'use strict';${n}${n}` : '';\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports, isEntryFacade && (esModule === true || (esModule === 'if-default-prop' && hasDefaultExport)), isModuleFacade && symbols, snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers += n + n;\n    }\n    const importBlock = getImportBlock$1(dependencies, snippets, compact);\n    const interopBlock = getInteropBlock(dependencies, interop, externalLiveBindings, freeze, symbols, accessedGlobals, t, snippets);\n    magicString.prepend(`${useStrict}${intro}${namespaceMarkers}${importBlock}${interopBlock}`);\n    const exportBlock = getExportBlock$1(exports, dependencies, namedExportsMode, interop, snippets, t, externalLiveBindings, reexportProtoFromExternal, `module.exports${_}=${_}`);\n    magicString.append(`${exportBlock}${outro}`);\n}\nfunction getImportBlock$1(dependencies, { _, cnst, n }, compact) {\n    let importBlock = '';\n    let definingVariable = false;\n    for (const { importPath, name, reexports, imports } of dependencies) {\n        if (!reexports && !imports) {\n            if (importBlock) {\n                importBlock += compact && !definingVariable ? ',' : `;${n}`;\n            }\n            definingVariable = false;\n            importBlock += `require('${importPath}')`;\n        }\n        else {\n            importBlock += compact && definingVariable ? ',' : `${importBlock ? `;${n}` : ''}${cnst} `;\n            definingVariable = true;\n            importBlock += `${name}${_}=${_}require('${importPath}')`;\n        }\n    }\n    if (importBlock) {\n        return `${importBlock};${n}${n}`;\n    }\n    return '';\n}\n\nfunction es(magicString, { accessedGlobals, indent: t, intro, outro, dependencies, exports, snippets }, { externalLiveBindings, freeze, generatedCode: { symbols }, importAttributesKey }) {\n    const { n } = snippets;\n    const importBlock = getImportBlock(dependencies, importAttributesKey, snippets);\n    if (importBlock.length > 0)\n        intro += importBlock.join(n) + n + n;\n    intro += getHelpersBlock(null, accessedGlobals, t, snippets, externalLiveBindings, freeze, symbols);\n    if (intro)\n        magicString.prepend(intro);\n    const exportBlock = getExportBlock(exports, snippets);\n    if (exportBlock.length > 0)\n        magicString.append(n + n + exportBlock.join(n).trim());\n    if (outro)\n        magicString.append(outro);\n    magicString.trim();\n}\nfunction getImportBlock(dependencies, importAttributesKey, { _ }) {\n    const importBlock = [];\n    for (const { importPath, reexports, imports, name, attributes } of dependencies) {\n        const assertion = attributes ? `${_}${importAttributesKey}${_}${attributes}` : '';\n        const pathWithAssertion = `'${importPath}'${assertion};`;\n        if (!reexports && !imports) {\n            importBlock.push(`import${_}${pathWithAssertion}`);\n            continue;\n        }\n        if (imports) {\n            let defaultImport = null;\n            let starImport = null;\n            const importedNames = [];\n            for (const specifier of imports) {\n                if (specifier.imported === 'default') {\n                    defaultImport = specifier;\n                }\n                else if (specifier.imported === '*') {\n                    starImport = specifier;\n                }\n                else {\n                    importedNames.push(specifier);\n                }\n            }\n            if (starImport) {\n                importBlock.push(`import${_}*${_}as ${starImport.local} from${_}${pathWithAssertion}`);\n            }\n            if (defaultImport && importedNames.length === 0) {\n                importBlock.push(`import ${defaultImport.local} from${_}${pathWithAssertion}`);\n            }\n            else if (importedNames.length > 0) {\n                importBlock.push(`import ${defaultImport ? `${defaultImport.local},${_}` : ''}{${_}${importedNames\n                    .map(specifier => specifier.imported === specifier.local\n                    ? specifier.imported\n                    : `${stringifyIdentifierIfNeeded(specifier.imported)} as ${specifier.local}`)\n                    .join(`,${_}`)}${_}}${_}from${_}${pathWithAssertion}`);\n            }\n        }\n        if (reexports) {\n            let starExport = null;\n            const namespaceReexports = [];\n            const namedReexports = [];\n            for (const specifier of reexports) {\n                if (specifier.reexported === '*') {\n                    starExport = specifier;\n                }\n                else if (specifier.imported === '*') {\n                    namespaceReexports.push(specifier);\n                }\n                else {\n                    namedReexports.push(specifier);\n                }\n            }\n            if (starExport) {\n                importBlock.push(`export${_}*${_}from${_}${pathWithAssertion}`);\n            }\n            if (namespaceReexports.length > 0) {\n                if (!imports ||\n                    !imports.some(specifier => specifier.imported === '*' && specifier.local === name)) {\n                    importBlock.push(`import${_}*${_}as ${name} from${_}${pathWithAssertion}`);\n                }\n                for (const specifier of namespaceReexports) {\n                    importBlock.push(`export${_}{${_}${name === specifier.reexported\n                        ? name\n                        : `${name} as ${stringifyIdentifierIfNeeded(specifier.reexported)}`} };`);\n                }\n            }\n            if (namedReexports.length > 0) {\n                importBlock.push(`export${_}{${_}${namedReexports\n                    .map(specifier => specifier.imported === specifier.reexported\n                    ? stringifyIdentifierIfNeeded(specifier.imported)\n                    : `${stringifyIdentifierIfNeeded(specifier.imported)} as ${stringifyIdentifierIfNeeded(specifier.reexported)}`)\n                    .join(`,${_}`)}${_}}${_}from${_}${pathWithAssertion}`);\n            }\n        }\n    }\n    return importBlock;\n}\nfunction getExportBlock(exports, { _, cnst }) {\n    const exportBlock = [];\n    const exportDeclaration = new Array(exports.length);\n    let index = 0;\n    for (const specifier of exports) {\n        if (specifier.expression) {\n            exportBlock.push(`${cnst} ${specifier.local}${_}=${_}${specifier.expression};`);\n        }\n        exportDeclaration[index++] =\n            specifier.exported === specifier.local\n                ? specifier.local\n                : `${specifier.local} as ${stringifyIdentifierIfNeeded(specifier.exported)}`;\n    }\n    if (exportDeclaration.length > 0) {\n        exportBlock.push(`export${_}{${_}${exportDeclaration.join(`,${_}`)}${_}};`);\n    }\n    return exportBlock;\n}\n\nconst keypath = (keypath, getPropertyAccess) => keypath.split('.').map(getPropertyAccess).join('');\n\nfunction setupNamespace(name, root, globals, { _, getPropertyAccess, s }, compact, log) {\n    const parts = name.split('.');\n    // Check if the key exists in the object's prototype.\n    const isReserved = parts[0] in Object.prototype;\n    if (log && isReserved) {\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logReservedNamespace)(parts[0]));\n    }\n    parts[0] =\n        (typeof globals === 'function'\n            ? globals(parts[0])\n            : isReserved\n                ? parts[0]\n                : globals[parts[0]]) || parts[0];\n    parts.pop();\n    let propertyPath = root;\n    return (parts\n        .map(part => {\n        propertyPath += getPropertyAccess(part);\n        return `${propertyPath}${_}=${_}${propertyPath}${_}||${_}{}${s}`;\n    })\n        .join(compact ? ',' : '\\n') + (compact && parts.length > 0 ? ';' : '\\n'));\n}\nfunction assignToDeepVariable(deepName, root, globals, assignment, { _, getPropertyAccess }, log) {\n    const parts = deepName.split('.');\n    // Check if the key exists in the object's prototype.\n    const isReserved = parts[0] in Object.prototype;\n    if (log && isReserved) {\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logReservedNamespace)(parts[0]));\n    }\n    parts[0] =\n        (typeof globals === 'function'\n            ? globals(parts[0])\n            : isReserved\n                ? parts[0]\n                : globals[parts[0]]) || parts[0];\n    const last = parts.pop();\n    let propertyPath = root;\n    let deepAssignment = [\n        ...parts.map(part => {\n            propertyPath += getPropertyAccess(part);\n            return `${propertyPath}${_}=${_}${propertyPath}${_}||${_}{}`;\n        }),\n        `${propertyPath}${getPropertyAccess(last)}`\n    ].join(`,${_}`) + `${_}=${_}${assignment}`;\n    if (parts.length > 0) {\n        deepAssignment = `(${deepAssignment})`;\n    }\n    return deepAssignment;\n}\n\nfunction trimEmptyImports(dependencies) {\n    let index = dependencies.length;\n    while (index--) {\n        const { imports, reexports } = dependencies[index];\n        if (imports || reexports) {\n            return dependencies.slice(0, index + 1);\n        }\n    }\n    return [];\n}\n\nfunction iife(magicString, { accessedGlobals, dependencies, exports, hasDefaultExport, hasExports, indent: t, intro, namedExportsMode, log, outro, snippets }, { compact, esModule, extend, freeze, externalLiveBindings, reexportProtoFromExternal, globals, interop, name, generatedCode: { symbols }, strict }) {\n    const { _, getNonArrowFunctionIntro, getPropertyAccess, n } = snippets;\n    const isNamespaced = name && name.includes('.');\n    const useVariableAssignment = !extend && !isNamespaced;\n    if (name && useVariableAssignment && !isLegal(name)) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logIllegalIdentifierAsName)(name));\n    }\n    warnOnBuiltins(log, dependencies);\n    const external = trimEmptyImports(dependencies);\n    const deps = external.map(dep => dep.globalName || 'null');\n    const parameters = external.map(m => m.name);\n    if (hasExports && !name) {\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingNameOptionForIifeExport)());\n    }\n    if (namedExportsMode && hasExports) {\n        if (extend) {\n            deps.unshift(`this${keypath(name, getPropertyAccess)}${_}=${_}this${keypath(name, getPropertyAccess)}${_}||${_}{}`);\n            parameters.unshift('exports');\n        }\n        else {\n            deps.unshift('{}');\n            parameters.unshift('exports');\n        }\n    }\n    const useStrict = strict ? `${t}'use strict';${n}` : '';\n    const interopBlock = getInteropBlock(dependencies, interop, externalLiveBindings, freeze, symbols, accessedGlobals, t, snippets);\n    magicString.prepend(`${intro}${interopBlock}`);\n    let wrapperIntro = `(${getNonArrowFunctionIntro(parameters, {\n        isAsync: false,\n        name: null\n    })}{${n}${useStrict}${n}`;\n    if (hasExports) {\n        if (name && !(extend && namedExportsMode)) {\n            wrapperIntro =\n                (useVariableAssignment ? `var ${name}` : `this${keypath(name, getPropertyAccess)}`) +\n                    `${_}=${_}${wrapperIntro}`;\n        }\n        if (isNamespaced) {\n            wrapperIntro = setupNamespace(name, 'this', globals, snippets, compact, log) + wrapperIntro;\n        }\n    }\n    let wrapperOutro = `${n}${n}})(${deps.join(`,${_}`)});`;\n    if (hasExports && !extend && namedExportsMode) {\n        wrapperOutro = `${n}${n}${t}return exports;${wrapperOutro}`;\n    }\n    const exportBlock = getExportBlock$1(exports, dependencies, namedExportsMode, interop, snippets, t, externalLiveBindings, reexportProtoFromExternal);\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports, esModule === true || (esModule === 'if-default-prop' && hasDefaultExport), symbols, snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers = n + n + namespaceMarkers;\n    }\n    magicString\n        .append(`${exportBlock}${namespaceMarkers}${outro}`)\n        .indent(t)\n        .prepend(wrapperIntro)\n        .append(wrapperOutro);\n}\n\nconst MISSING_EXPORT_SHIM_VARIABLE = '_missingExportShim';\n\nfunction system(magicString, { accessedGlobals, dependencies, exports, hasExports, indent: t, intro, snippets, outro, usesTopLevelAwait }, { externalLiveBindings, freeze, name, generatedCode: { symbols }, strict, systemNullSetters }) {\n    const { _, getFunctionIntro, getNonArrowFunctionIntro, n, s } = snippets;\n    const { importBindings, setters, starExcludes } = analyzeDependencies(dependencies, exports, t, snippets);\n    const registeredName = name ? `'${name}',${_}` : '';\n    const wrapperParameters = accessedGlobals.has('module')\n        ? ['exports', 'module']\n        : hasExports\n            ? ['exports']\n            : [];\n    // factory function should be wrapped by parentheses to avoid lazy parsing,\n    // cf. https://v8.dev/blog/preparser#pife\n    let wrapperStart = `System.register(${registeredName}[` +\n        dependencies.map(({ importPath }) => `'${importPath}'`).join(`,${_}`) +\n        `],${_}(${getNonArrowFunctionIntro(wrapperParameters, {\n            isAsync: false,\n            name: null\n        })}{${n}${t}${strict ? \"'use strict';\" : ''}` +\n        getStarExcludesBlock(starExcludes, t, snippets) +\n        getImportBindingsBlock(importBindings, t, snippets) +\n        `${n}${t}return${_}{${setters.length > 0\n            ? `${n}${t}${t}setters:${_}[${setters\n                .map(setter => setter\n                ? `${getFunctionIntro(['module'], {\n                    isAsync: false,\n                    name: null\n                })}{${n}${t}${t}${t}${setter}${n}${t}${t}}`\n                : systemNullSetters\n                    ? `null`\n                    : `${getFunctionIntro([], { isAsync: false, name: null })}{}`)\n                .join(`,${_}`)}],`\n            : ''}${n}`;\n    wrapperStart += `${t}${t}execute:${_}(${getNonArrowFunctionIntro([], {\n        isAsync: usesTopLevelAwait,\n        name: null\n    })}{${n}${n}`;\n    const wrapperEnd = `${t}${t}})${n}${t}}${s}${n}}));`;\n    magicString\n        .prepend(intro +\n        getHelpersBlock(null, accessedGlobals, t, snippets, externalLiveBindings, freeze, symbols) +\n        getHoistedExportsBlock(exports, t, snippets))\n        .append(`${outro}${n}${n}` +\n        getSyntheticExportsBlock(exports, t, snippets) +\n        getMissingExportsBlock(exports, t, snippets))\n        .indent(`${t}${t}${t}`)\n        .append(wrapperEnd)\n        .prepend(wrapperStart);\n}\nfunction analyzeDependencies(dependencies, exports, t, { _, cnst, getObject, getPropertyAccess, n }) {\n    const importBindings = [];\n    const setters = [];\n    let starExcludes = null;\n    for (const { imports, reexports } of dependencies) {\n        const setter = [];\n        if (imports) {\n            for (const specifier of imports) {\n                importBindings.push(specifier.local);\n                if (specifier.imported === '*') {\n                    setter.push(`${specifier.local}${_}=${_}module;`);\n                }\n                else {\n                    setter.push(`${specifier.local}${_}=${_}module${getPropertyAccess(specifier.imported)};`);\n                }\n            }\n        }\n        if (reexports) {\n            const reexportedNames = [];\n            let hasStarReexport = false;\n            for (const { imported, reexported } of reexports) {\n                if (reexported === '*') {\n                    hasStarReexport = true;\n                }\n                else {\n                    reexportedNames.push([\n                        reexported,\n                        imported === '*' ? 'module' : `module${getPropertyAccess(imported)}`\n                    ]);\n                }\n            }\n            if (reexportedNames.length > 1 || hasStarReexport) {\n                if (hasStarReexport) {\n                    if (!starExcludes) {\n                        starExcludes = getStarExcludes({ dependencies, exports });\n                    }\n                    reexportedNames.unshift([null, `__proto__:${_}null`]);\n                    const exportMapping = getObject(reexportedNames, { lineBreakIndent: null });\n                    setter.push(`${cnst} setter${_}=${_}${exportMapping};`, `for${_}(${cnst} name in module)${_}{`, `${t}if${_}(!_starExcludes[name])${_}setter[name]${_}=${_}module[name];`, '}', 'exports(setter);');\n                }\n                else {\n                    const exportMapping = getObject(reexportedNames, { lineBreakIndent: null });\n                    setter.push(`exports(${exportMapping});`);\n                }\n            }\n            else {\n                const [key, value] = reexportedNames[0];\n                setter.push(`exports(${JSON.stringify(key)},${_}${value});`);\n            }\n        }\n        setters.push(setter.join(`${n}${t}${t}${t}`));\n    }\n    return { importBindings, setters, starExcludes };\n}\nconst getStarExcludes = ({ dependencies, exports }) => {\n    const starExcludes = new Set(exports.map(expt => expt.exported));\n    starExcludes.add('default');\n    for (const { reexports } of dependencies) {\n        if (reexports) {\n            for (const reexport of reexports) {\n                if (reexport.reexported !== '*')\n                    starExcludes.add(reexport.reexported);\n            }\n        }\n    }\n    return starExcludes;\n};\nconst getStarExcludesBlock = (starExcludes, t, { _, cnst, getObject, n }) => {\n    if (starExcludes) {\n        const fields = [...starExcludes].map(property => [\n            property,\n            '1'\n        ]);\n        fields.unshift([null, `__proto__:${_}null`]);\n        return `${n}${t}${cnst} _starExcludes${_}=${_}${getObject(fields, {\n            lineBreakIndent: { base: t, t }\n        })};`;\n    }\n    return '';\n};\nconst getImportBindingsBlock = (importBindings, t, { _, n }) => (importBindings.length > 0 ? `${n}${t}var ${importBindings.join(`,${_}`)};` : '');\nconst getHoistedExportsBlock = (exports, t, snippets) => getExportsBlock(exports.filter(expt => expt.hoisted).map(expt => ({ name: expt.exported, value: expt.local })), t, snippets);\nfunction getExportsBlock(exports, t, { _, n }) {\n    if (exports.length === 0) {\n        return '';\n    }\n    if (exports.length === 1) {\n        return `exports(${JSON.stringify(exports[0].name)},${_}${exports[0].value});${n}${n}`;\n    }\n    return (`exports({${n}` +\n        exports\n            .map(({ name, value }) => `${t}${stringifyObjectKeyIfNeeded(name)}:${_}${value}`)\n            .join(`,${n}`) +\n        `${n}});${n}${n}`);\n}\nconst getSyntheticExportsBlock = (exports, t, snippets) => getExportsBlock(exports\n    .filter(expt => expt.expression)\n    .map(expt => ({ name: expt.exported, value: expt.local })), t, snippets);\nconst getMissingExportsBlock = (exports, t, snippets) => getExportsBlock(exports\n    .filter(expt => expt.local === MISSING_EXPORT_SHIM_VARIABLE)\n    .map(expt => ({ name: expt.exported, value: MISSING_EXPORT_SHIM_VARIABLE })), t, snippets);\n\nfunction globalProperty(name, globalVariable, getPropertyAccess) {\n    if (!name)\n        return 'null';\n    return `${globalVariable}${keypath(name, getPropertyAccess)}`;\n}\nfunction safeAccess(name, globalVariable, { _, getPropertyAccess }) {\n    let propertyPath = globalVariable;\n    return name\n        .split('.')\n        .map(part => (propertyPath += getPropertyAccess(part)))\n        .join(`${_}&&${_}`);\n}\nfunction umd(magicString, { accessedGlobals, dependencies, exports, hasDefaultExport, hasExports, id, indent: t, intro, namedExportsMode, log, outro, snippets }, { amd, compact, esModule, extend, externalLiveBindings, freeze, interop, name, generatedCode: { symbols }, globals, noConflict, reexportProtoFromExternal, strict }) {\n    const { _, cnst, getFunctionIntro, getNonArrowFunctionIntro, getPropertyAccess, n, s } = snippets;\n    const factoryVariable = compact ? 'f' : 'factory';\n    const globalVariable = compact ? 'g' : 'global';\n    if (hasExports && !name) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingNameOptionForUmdExport)());\n    }\n    warnOnBuiltins(log, dependencies);\n    const amdDeps = dependencies.map(m => `'${updateExtensionForRelativeAmdId(m.importPath, amd.forceJsExtensionForImports)}'`);\n    const cjsDeps = dependencies.map(m => `require('${m.importPath}')`);\n    const trimmedImports = trimEmptyImports(dependencies);\n    const globalDeps = trimmedImports.map(module => globalProperty(module.globalName, globalVariable, getPropertyAccess));\n    const factoryParameters = trimmedImports.map(m => m.name);\n    if (namedExportsMode && (hasExports || noConflict)) {\n        amdDeps.unshift(`'exports'`);\n        cjsDeps.unshift(`exports`);\n        globalDeps.unshift(assignToDeepVariable(name, globalVariable, globals, `${extend ? `${globalProperty(name, globalVariable, getPropertyAccess)}${_}||${_}` : ''}{}`, snippets, log));\n        factoryParameters.unshift('exports');\n    }\n    const completeAmdId = getCompleteAmdId(amd, id);\n    const amdParameters = (completeAmdId ? `'${completeAmdId}',${_}` : ``) +\n        (amdDeps.length > 0 ? `[${amdDeps.join(`,${_}`)}],${_}` : ``);\n    const define = amd.define;\n    const cjsExport = !namedExportsMode && hasExports ? `module.exports${_}=${_}` : ``;\n    const useStrict = strict ? `${_}'use strict';${n}` : ``;\n    let iifeExport;\n    if (noConflict) {\n        const noConflictExportsVariable = compact ? 'e' : 'exports';\n        let factory;\n        if (!namedExportsMode && hasExports) {\n            factory = `${cnst} ${noConflictExportsVariable}${_}=${_}${assignToDeepVariable(name, globalVariable, globals, `${factoryVariable}(${globalDeps.join(`,${_}`)})`, snippets, log)};`;\n        }\n        else {\n            const module = globalDeps.shift();\n            factory =\n                `${cnst} ${noConflictExportsVariable}${_}=${_}${module};${n}` +\n                    `${t}${t}${factoryVariable}(${[noConflictExportsVariable, ...globalDeps].join(`,${_}`)});`;\n        }\n        iifeExport =\n            `(${getFunctionIntro([], { isAsync: false, name: null })}{${n}` +\n                `${t}${t}${cnst} current${_}=${_}${safeAccess(name, globalVariable, snippets)};${n}` +\n                `${t}${t}${factory}${n}` +\n                `${t}${t}${noConflictExportsVariable}.noConflict${_}=${_}${getFunctionIntro([], {\n                    isAsync: false,\n                    name: null\n                })}{${_}` +\n                `${globalProperty(name, globalVariable, getPropertyAccess)}${_}=${_}current;${_}return ${noConflictExportsVariable}${s}${_}};${n}` +\n                `${t}})()`;\n    }\n    else {\n        iifeExport = `${factoryVariable}(${globalDeps.join(`,${_}`)})`;\n        if (!namedExportsMode && hasExports) {\n            iifeExport = assignToDeepVariable(name, globalVariable, globals, iifeExport, snippets, log);\n        }\n    }\n    const iifeNeedsGlobal = hasExports || (noConflict && namedExportsMode) || globalDeps.length > 0;\n    const wrapperParameters = [factoryVariable];\n    if (iifeNeedsGlobal) {\n        wrapperParameters.unshift(globalVariable);\n    }\n    const globalArgument = iifeNeedsGlobal ? `this,${_}` : '';\n    const iifeStart = iifeNeedsGlobal\n        ? `(${globalVariable}${_}=${_}typeof globalThis${_}!==${_}'undefined'${_}?${_}globalThis${_}:${_}${globalVariable}${_}||${_}self,${_}`\n        : '';\n    const iifeEnd = iifeNeedsGlobal ? ')' : '';\n    const cjsIntro = iifeNeedsGlobal\n        ? `${t}typeof exports${_}===${_}'object'${_}&&${_}typeof module${_}!==${_}'undefined'${_}?` +\n            `${_}${cjsExport}${factoryVariable}(${cjsDeps.join(`,${_}`)})${_}:${n}`\n        : '';\n    const wrapperIntro = `(${getNonArrowFunctionIntro(wrapperParameters, { isAsync: false, name: null })}{${n}` +\n        cjsIntro +\n        `${t}typeof ${define}${_}===${_}'function'${_}&&${_}${define}.amd${_}?${_}${define}(${amdParameters}${factoryVariable})${_}:${n}` +\n        `${t}${iifeStart}${iifeExport}${iifeEnd};${n}` +\n        // factory function should be wrapped by parentheses to avoid lazy parsing,\n        // cf. https://v8.dev/blog/preparser#pife\n        `})(${globalArgument}(${getNonArrowFunctionIntro(factoryParameters, {\n            isAsync: false,\n            name: null\n        })}{${useStrict}${n}`;\n    const wrapperOutro = n + n + '}));';\n    magicString.prepend(`${intro}${getInteropBlock(dependencies, interop, externalLiveBindings, freeze, symbols, accessedGlobals, t, snippets)}`);\n    const exportBlock = getExportBlock$1(exports, dependencies, namedExportsMode, interop, snippets, t, externalLiveBindings, reexportProtoFromExternal);\n    let namespaceMarkers = getNamespaceMarkers(namedExportsMode && hasExports, esModule === true || (esModule === 'if-default-prop' && hasDefaultExport), symbols, snippets);\n    if (namespaceMarkers) {\n        namespaceMarkers = n + n + namespaceMarkers;\n    }\n    magicString\n        .append(`${exportBlock}${namespaceMarkers}${outro}`)\n        .trim()\n        .indent(t)\n        .append(wrapperOutro)\n        .prepend(wrapperIntro);\n}\n\nconst finalisers = { amd, cjs, es, iife, system, umd };\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction getAugmentedNamespace(n) {\n  if (n.__esModule) return n;\n  var f = n.default;\n\tif (typeof f == \"function\") {\n\t\tvar a = function a () {\n\t\t\tif (this instanceof a) {\n        return Reflect.construct(f, arguments, this.constructor);\n\t\t\t}\n\t\t\treturn f.apply(this, arguments);\n\t\t};\n\t\ta.prototype = f.prototype;\n  } else a = {};\n  Object.defineProperty(a, '__esModule', {value: true});\n\tObject.keys(n).forEach(function (k) {\n\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn n[k];\n\t\t\t}\n\t\t});\n\t});\n\treturn a;\n}\n\nvar utils = {};\n\nvar constants;\nvar hasRequiredConstants;\n\nfunction requireConstants () {\n\tif (hasRequiredConstants) return constants;\n\thasRequiredConstants = 1;\n\n\tconst WIN_SLASH = '\\\\\\\\/';\n\tconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n\n\t/**\n\t * Posix glob regex\n\t */\n\n\tconst DOT_LITERAL = '\\\\.';\n\tconst PLUS_LITERAL = '\\\\+';\n\tconst QMARK_LITERAL = '\\\\?';\n\tconst SLASH_LITERAL = '\\\\/';\n\tconst ONE_CHAR = '(?=.)';\n\tconst QMARK = '[^/]';\n\tconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\n\tconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\n\tconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\n\tconst NO_DOT = `(?!${DOT_LITERAL})`;\n\tconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\n\tconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\n\tconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\n\tconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\n\tconst STAR = `${QMARK}*?`;\n\tconst SEP = '/';\n\n\tconst POSIX_CHARS = {\n\t  DOT_LITERAL,\n\t  PLUS_LITERAL,\n\t  QMARK_LITERAL,\n\t  SLASH_LITERAL,\n\t  ONE_CHAR,\n\t  QMARK,\n\t  END_ANCHOR,\n\t  DOTS_SLASH,\n\t  NO_DOT,\n\t  NO_DOTS,\n\t  NO_DOT_SLASH,\n\t  NO_DOTS_SLASH,\n\t  QMARK_NO_DOT,\n\t  STAR,\n\t  START_ANCHOR,\n\t  SEP\n\t};\n\n\t/**\n\t * Windows glob regex\n\t */\n\n\tconst WINDOWS_CHARS = {\n\t  ...POSIX_CHARS,\n\n\t  SLASH_LITERAL: `[${WIN_SLASH}]`,\n\t  QMARK: WIN_NO_SLASH,\n\t  STAR: `${WIN_NO_SLASH}*?`,\n\t  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\n\t  NO_DOT: `(?!${DOT_LITERAL})`,\n\t  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n\t  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\n\t  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n\t  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\n\t  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\n\t  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`,\n\t  SEP: '\\\\'\n\t};\n\n\t/**\n\t * POSIX Bracket Regex\n\t */\n\n\tconst POSIX_REGEX_SOURCE = {\n\t  alnum: 'a-zA-Z0-9',\n\t  alpha: 'a-zA-Z',\n\t  ascii: '\\\\x00-\\\\x7F',\n\t  blank: ' \\\\t',\n\t  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n\t  digit: '0-9',\n\t  graph: '\\\\x21-\\\\x7E',\n\t  lower: 'a-z',\n\t  print: '\\\\x20-\\\\x7E ',\n\t  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n\t  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n\t  upper: 'A-Z',\n\t  word: 'A-Za-z0-9_',\n\t  xdigit: 'A-Fa-f0-9'\n\t};\n\n\tconstants = {\n\t  MAX_LENGTH: 1024 * 64,\n\t  POSIX_REGEX_SOURCE,\n\n\t  // regular expressions\n\t  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\n\t  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\n\t  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\n\t  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\n\t  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\n\t  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\n\n\t  // Replace globs with equivalent patterns to reduce parsing time.\n\t  REPLACEMENTS: {\n\t    '***': '*',\n\t    '**/**': '**',\n\t    '**/**/**': '**'\n\t  },\n\n\t  // Digits\n\t  CHAR_0: 48, /* 0 */\n\t  CHAR_9: 57, /* 9 */\n\n\t  // Alphabet chars.\n\t  CHAR_UPPERCASE_A: 65, /* A */\n\t  CHAR_LOWERCASE_A: 97, /* a */\n\t  CHAR_UPPERCASE_Z: 90, /* Z */\n\t  CHAR_LOWERCASE_Z: 122, /* z */\n\n\t  CHAR_LEFT_PARENTHESES: 40, /* ( */\n\t  CHAR_RIGHT_PARENTHESES: 41, /* ) */\n\n\t  CHAR_ASTERISK: 42, /* * */\n\n\t  // Non-alphabetic chars.\n\t  CHAR_AMPERSAND: 38, /* & */\n\t  CHAR_AT: 64, /* @ */\n\t  CHAR_BACKWARD_SLASH: 92, /* \\ */\n\t  CHAR_CARRIAGE_RETURN: 13, /* \\r */\n\t  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\n\t  CHAR_COLON: 58, /* : */\n\t  CHAR_COMMA: 44, /* , */\n\t  CHAR_DOT: 46, /* . */\n\t  CHAR_DOUBLE_QUOTE: 34, /* \" */\n\t  CHAR_EQUAL: 61, /* = */\n\t  CHAR_EXCLAMATION_MARK: 33, /* ! */\n\t  CHAR_FORM_FEED: 12, /* \\f */\n\t  CHAR_FORWARD_SLASH: 47, /* / */\n\t  CHAR_GRAVE_ACCENT: 96, /* ` */\n\t  CHAR_HASH: 35, /* # */\n\t  CHAR_HYPHEN_MINUS: 45, /* - */\n\t  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\n\t  CHAR_LEFT_CURLY_BRACE: 123, /* { */\n\t  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\n\t  CHAR_LINE_FEED: 10, /* \\n */\n\t  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\n\t  CHAR_PERCENT: 37, /* % */\n\t  CHAR_PLUS: 43, /* + */\n\t  CHAR_QUESTION_MARK: 63, /* ? */\n\t  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\n\t  CHAR_RIGHT_CURLY_BRACE: 125, /* } */\n\t  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\n\t  CHAR_SEMICOLON: 59, /* ; */\n\t  CHAR_SINGLE_QUOTE: 39, /* ' */\n\t  CHAR_SPACE: 32, /*   */\n\t  CHAR_TAB: 9, /* \\t */\n\t  CHAR_UNDERSCORE: 95, /* _ */\n\t  CHAR_VERTICAL_LINE: 124, /* | */\n\t  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\n\n\t  /**\n\t   * Create EXTGLOB_CHARS\n\t   */\n\n\t  extglobChars(chars) {\n\t    return {\n\t      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },\n\t      '?': { type: 'qmark', open: '(?:', close: ')?' },\n\t      '+': { type: 'plus', open: '(?:', close: ')+' },\n\t      '*': { type: 'star', open: '(?:', close: ')*' },\n\t      '@': { type: 'at', open: '(?:', close: ')' }\n\t    };\n\t  },\n\n\t  /**\n\t   * Create GLOB_CHARS\n\t   */\n\n\t  globChars(win32) {\n\t    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n\t  }\n\t};\n\treturn constants;\n}\n\n/*global navigator*/\n\nvar hasRequiredUtils;\n\nfunction requireUtils () {\n\tif (hasRequiredUtils) return utils;\n\thasRequiredUtils = 1;\n\t(function (exports) {\n\n\t\tconst {\n\t\t  REGEX_BACKSLASH,\n\t\t  REGEX_REMOVE_BACKSLASH,\n\t\t  REGEX_SPECIAL_CHARS,\n\t\t  REGEX_SPECIAL_CHARS_GLOBAL\n\t\t} = /*@__PURE__*/ requireConstants();\n\n\t\texports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\n\t\texports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\n\t\texports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\n\t\texports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\n\t\texports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\n\t\texports.isWindows = () => {\n\t\t  if (typeof navigator !== 'undefined' && navigator.platform) {\n\t\t    const platform = navigator.platform.toLowerCase();\n\t\t    return platform === 'win32' || platform === 'windows';\n\t\t  }\n\n\t\t  if (typeof process !== 'undefined' && process.platform) {\n\t\t    return process.platform === 'win32';\n\t\t  }\n\n\t\t  return false;\n\t\t};\n\n\t\texports.removeBackslashes = str => {\n\t\t  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n\t\t    return match === '\\\\' ? '' : match;\n\t\t  });\n\t\t};\n\n\t\texports.escapeLast = (input, char, lastIdx) => {\n\t\t  const idx = input.lastIndexOf(char, lastIdx);\n\t\t  if (idx === -1) return input;\n\t\t  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n\t\t  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n\t\t};\n\n\t\texports.removePrefix = (input, state = {}) => {\n\t\t  let output = input;\n\t\t  if (output.startsWith('./')) {\n\t\t    output = output.slice(2);\n\t\t    state.prefix = './';\n\t\t  }\n\t\t  return output;\n\t\t};\n\n\t\texports.wrapOutput = (input, state = {}, options = {}) => {\n\t\t  const prepend = options.contains ? '' : '^';\n\t\t  const append = options.contains ? '' : '$';\n\n\t\t  let output = `${prepend}(?:${input})${append}`;\n\t\t  if (state.negated === true) {\n\t\t    output = `(?:^(?!${output}).*$)`;\n\t\t  }\n\t\t  return output;\n\t\t};\n\n\t\texports.basename = (path, { windows } = {}) => {\n\t\t  const segs = path.split(windows ? /[\\\\/]/ : '/');\n\t\t  const last = segs[segs.length - 1];\n\n\t\t  if (last === '') {\n\t\t    return segs[segs.length - 2];\n\t\t  }\n\n\t\t  return last;\n\t\t}; \n\t} (utils));\n\treturn utils;\n}\n\nvar scan_1;\nvar hasRequiredScan;\n\nfunction requireScan () {\n\tif (hasRequiredScan) return scan_1;\n\thasRequiredScan = 1;\n\n\tconst utils = /*@__PURE__*/ requireUtils();\n\tconst {\n\t  CHAR_ASTERISK,             /* * */\n\t  CHAR_AT,                   /* @ */\n\t  CHAR_BACKWARD_SLASH,       /* \\ */\n\t  CHAR_COMMA,                /* , */\n\t  CHAR_DOT,                  /* . */\n\t  CHAR_EXCLAMATION_MARK,     /* ! */\n\t  CHAR_FORWARD_SLASH,        /* / */\n\t  CHAR_LEFT_CURLY_BRACE,     /* { */\n\t  CHAR_LEFT_PARENTHESES,     /* ( */\n\t  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n\t  CHAR_PLUS,                 /* + */\n\t  CHAR_QUESTION_MARK,        /* ? */\n\t  CHAR_RIGHT_CURLY_BRACE,    /* } */\n\t  CHAR_RIGHT_PARENTHESES,    /* ) */\n\t  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n\t} = /*@__PURE__*/ requireConstants();\n\n\tconst isPathSeparator = code => {\n\t  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n\t};\n\n\tconst depth = token => {\n\t  if (token.isPrefix !== true) {\n\t    token.depth = token.isGlobstar ? Infinity : 1;\n\t  }\n\t};\n\n\t/**\n\t * Quickly scans a glob pattern and returns an object with a handful of\n\t * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n\t * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n\t * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n\t *\n\t * ```js\n\t * const pm = require('picomatch');\n\t * console.log(pm.scan('foo/bar/*.js'));\n\t * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n\t * ```\n\t * @param {String} `str`\n\t * @param {Object} `options`\n\t * @return {Object} Returns an object with tokens and regex source string.\n\t * @api public\n\t */\n\n\tconst scan = (input, options) => {\n\t  const opts = options || {};\n\n\t  const length = input.length - 1;\n\t  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n\t  const slashes = [];\n\t  const tokens = [];\n\t  const parts = [];\n\n\t  let str = input;\n\t  let index = -1;\n\t  let start = 0;\n\t  let lastIndex = 0;\n\t  let isBrace = false;\n\t  let isBracket = false;\n\t  let isGlob = false;\n\t  let isExtglob = false;\n\t  let isGlobstar = false;\n\t  let braceEscaped = false;\n\t  let backslashes = false;\n\t  let negated = false;\n\t  let negatedExtglob = false;\n\t  let finished = false;\n\t  let braces = 0;\n\t  let prev;\n\t  let code;\n\t  let token = { value: '', depth: 0, isGlob: false };\n\n\t  const eos = () => index >= length;\n\t  const peek = () => str.charCodeAt(index + 1);\n\t  const advance = () => {\n\t    prev = code;\n\t    return str.charCodeAt(++index);\n\t  };\n\n\t  while (index < length) {\n\t    code = advance();\n\t    let next;\n\n\t    if (code === CHAR_BACKWARD_SLASH) {\n\t      backslashes = token.backslashes = true;\n\t      code = advance();\n\n\t      if (code === CHAR_LEFT_CURLY_BRACE) {\n\t        braceEscaped = true;\n\t      }\n\t      continue;\n\t    }\n\n\t    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n\t      braces++;\n\n\t      while (eos() !== true && (code = advance())) {\n\t        if (code === CHAR_BACKWARD_SLASH) {\n\t          backslashes = token.backslashes = true;\n\t          advance();\n\t          continue;\n\t        }\n\n\t        if (code === CHAR_LEFT_CURLY_BRACE) {\n\t          braces++;\n\t          continue;\n\t        }\n\n\t        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n\t          isBrace = token.isBrace = true;\n\t          isGlob = token.isGlob = true;\n\t          finished = true;\n\n\t          if (scanToEnd === true) {\n\t            continue;\n\t          }\n\n\t          break;\n\t        }\n\n\t        if (braceEscaped !== true && code === CHAR_COMMA) {\n\t          isBrace = token.isBrace = true;\n\t          isGlob = token.isGlob = true;\n\t          finished = true;\n\n\t          if (scanToEnd === true) {\n\t            continue;\n\t          }\n\n\t          break;\n\t        }\n\n\t        if (code === CHAR_RIGHT_CURLY_BRACE) {\n\t          braces--;\n\n\t          if (braces === 0) {\n\t            braceEscaped = false;\n\t            isBrace = token.isBrace = true;\n\t            finished = true;\n\t            break;\n\t          }\n\t        }\n\t      }\n\n\t      if (scanToEnd === true) {\n\t        continue;\n\t      }\n\n\t      break;\n\t    }\n\n\t    if (code === CHAR_FORWARD_SLASH) {\n\t      slashes.push(index);\n\t      tokens.push(token);\n\t      token = { value: '', depth: 0, isGlob: false };\n\n\t      if (finished === true) continue;\n\t      if (prev === CHAR_DOT && index === (start + 1)) {\n\t        start += 2;\n\t        continue;\n\t      }\n\n\t      lastIndex = index + 1;\n\t      continue;\n\t    }\n\n\t    if (opts.noext !== true) {\n\t      const isExtglobChar = code === CHAR_PLUS\n\t        || code === CHAR_AT\n\t        || code === CHAR_ASTERISK\n\t        || code === CHAR_QUESTION_MARK\n\t        || code === CHAR_EXCLAMATION_MARK;\n\n\t      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n\t        isGlob = token.isGlob = true;\n\t        isExtglob = token.isExtglob = true;\n\t        finished = true;\n\t        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n\t          negatedExtglob = true;\n\t        }\n\n\t        if (scanToEnd === true) {\n\t          while (eos() !== true && (code = advance())) {\n\t            if (code === CHAR_BACKWARD_SLASH) {\n\t              backslashes = token.backslashes = true;\n\t              code = advance();\n\t              continue;\n\t            }\n\n\t            if (code === CHAR_RIGHT_PARENTHESES) {\n\t              isGlob = token.isGlob = true;\n\t              finished = true;\n\t              break;\n\t            }\n\t          }\n\t          continue;\n\t        }\n\t        break;\n\t      }\n\t    }\n\n\t    if (code === CHAR_ASTERISK) {\n\t      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n\t      isGlob = token.isGlob = true;\n\t      finished = true;\n\n\t      if (scanToEnd === true) {\n\t        continue;\n\t      }\n\t      break;\n\t    }\n\n\t    if (code === CHAR_QUESTION_MARK) {\n\t      isGlob = token.isGlob = true;\n\t      finished = true;\n\n\t      if (scanToEnd === true) {\n\t        continue;\n\t      }\n\t      break;\n\t    }\n\n\t    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n\t      while (eos() !== true && (next = advance())) {\n\t        if (next === CHAR_BACKWARD_SLASH) {\n\t          backslashes = token.backslashes = true;\n\t          advance();\n\t          continue;\n\t        }\n\n\t        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n\t          isBracket = token.isBracket = true;\n\t          isGlob = token.isGlob = true;\n\t          finished = true;\n\t          break;\n\t        }\n\t      }\n\n\t      if (scanToEnd === true) {\n\t        continue;\n\t      }\n\n\t      break;\n\t    }\n\n\t    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n\t      negated = token.negated = true;\n\t      start++;\n\t      continue;\n\t    }\n\n\t    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n\t      isGlob = token.isGlob = true;\n\n\t      if (scanToEnd === true) {\n\t        while (eos() !== true && (code = advance())) {\n\t          if (code === CHAR_LEFT_PARENTHESES) {\n\t            backslashes = token.backslashes = true;\n\t            code = advance();\n\t            continue;\n\t          }\n\n\t          if (code === CHAR_RIGHT_PARENTHESES) {\n\t            finished = true;\n\t            break;\n\t          }\n\t        }\n\t        continue;\n\t      }\n\t      break;\n\t    }\n\n\t    if (isGlob === true) {\n\t      finished = true;\n\n\t      if (scanToEnd === true) {\n\t        continue;\n\t      }\n\n\t      break;\n\t    }\n\t  }\n\n\t  if (opts.noext === true) {\n\t    isExtglob = false;\n\t    isGlob = false;\n\t  }\n\n\t  let base = str;\n\t  let prefix = '';\n\t  let glob = '';\n\n\t  if (start > 0) {\n\t    prefix = str.slice(0, start);\n\t    str = str.slice(start);\n\t    lastIndex -= start;\n\t  }\n\n\t  if (base && isGlob === true && lastIndex > 0) {\n\t    base = str.slice(0, lastIndex);\n\t    glob = str.slice(lastIndex);\n\t  } else if (isGlob === true) {\n\t    base = '';\n\t    glob = str;\n\t  } else {\n\t    base = str;\n\t  }\n\n\t  if (base && base !== '' && base !== '/' && base !== str) {\n\t    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n\t      base = base.slice(0, -1);\n\t    }\n\t  }\n\n\t  if (opts.unescape === true) {\n\t    if (glob) glob = utils.removeBackslashes(glob);\n\n\t    if (base && backslashes === true) {\n\t      base = utils.removeBackslashes(base);\n\t    }\n\t  }\n\n\t  const state = {\n\t    prefix,\n\t    input,\n\t    start,\n\t    base,\n\t    glob,\n\t    isBrace,\n\t    isBracket,\n\t    isGlob,\n\t    isExtglob,\n\t    isGlobstar,\n\t    negated,\n\t    negatedExtglob\n\t  };\n\n\t  if (opts.tokens === true) {\n\t    state.maxDepth = 0;\n\t    if (!isPathSeparator(code)) {\n\t      tokens.push(token);\n\t    }\n\t    state.tokens = tokens;\n\t  }\n\n\t  if (opts.parts === true || opts.tokens === true) {\n\t    let prevIndex;\n\n\t    for (let idx = 0; idx < slashes.length; idx++) {\n\t      const n = prevIndex ? prevIndex + 1 : start;\n\t      const i = slashes[idx];\n\t      const value = input.slice(n, i);\n\t      if (opts.tokens) {\n\t        if (idx === 0 && start !== 0) {\n\t          tokens[idx].isPrefix = true;\n\t          tokens[idx].value = prefix;\n\t        } else {\n\t          tokens[idx].value = value;\n\t        }\n\t        depth(tokens[idx]);\n\t        state.maxDepth += tokens[idx].depth;\n\t      }\n\t      if (idx !== 0 || value !== '') {\n\t        parts.push(value);\n\t      }\n\t      prevIndex = i;\n\t    }\n\n\t    if (prevIndex && prevIndex + 1 < input.length) {\n\t      const value = input.slice(prevIndex + 1);\n\t      parts.push(value);\n\n\t      if (opts.tokens) {\n\t        tokens[tokens.length - 1].value = value;\n\t        depth(tokens[tokens.length - 1]);\n\t        state.maxDepth += tokens[tokens.length - 1].depth;\n\t      }\n\t    }\n\n\t    state.slashes = slashes;\n\t    state.parts = parts;\n\t  }\n\n\t  return state;\n\t};\n\n\tscan_1 = scan;\n\treturn scan_1;\n}\n\nvar parse_1;\nvar hasRequiredParse;\n\nfunction requireParse () {\n\tif (hasRequiredParse) return parse_1;\n\thasRequiredParse = 1;\n\n\tconst constants = /*@__PURE__*/ requireConstants();\n\tconst utils = /*@__PURE__*/ requireUtils();\n\n\t/**\n\t * Constants\n\t */\n\n\tconst {\n\t  MAX_LENGTH,\n\t  POSIX_REGEX_SOURCE,\n\t  REGEX_NON_SPECIAL_CHARS,\n\t  REGEX_SPECIAL_CHARS_BACKREF,\n\t  REPLACEMENTS\n\t} = constants;\n\n\t/**\n\t * Helpers\n\t */\n\n\tconst expandRange = (args, options) => {\n\t  if (typeof options.expandRange === 'function') {\n\t    return options.expandRange(...args, options);\n\t  }\n\n\t  args.sort();\n\t  const value = `[${args.join('-')}]`;\n\n\t  return value;\n\t};\n\n\t/**\n\t * Create the message for a syntax error\n\t */\n\n\tconst syntaxError = (type, char) => {\n\t  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\n\t};\n\n\t/**\n\t * Parse the given input string.\n\t * @param {String} input\n\t * @param {Object} options\n\t * @return {Object}\n\t */\n\n\tconst parse = (input, options) => {\n\t  if (typeof input !== 'string') {\n\t    throw new TypeError('Expected a string');\n\t  }\n\n\t  input = REPLACEMENTS[input] || input;\n\n\t  const opts = { ...options };\n\t  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n\t  let len = input.length;\n\t  if (len > max) {\n\t    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n\t  }\n\n\t  const bos = { type: 'bos', value: '', output: opts.prepend || '' };\n\t  const tokens = [bos];\n\n\t  const capture = opts.capture ? '' : '?:';\n\n\t  // create constants based on platform, for windows or posix\n\t  const PLATFORM_CHARS = constants.globChars(opts.windows);\n\t  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n\n\t  const {\n\t    DOT_LITERAL,\n\t    PLUS_LITERAL,\n\t    SLASH_LITERAL,\n\t    ONE_CHAR,\n\t    DOTS_SLASH,\n\t    NO_DOT,\n\t    NO_DOT_SLASH,\n\t    NO_DOTS_SLASH,\n\t    QMARK,\n\t    QMARK_NO_DOT,\n\t    STAR,\n\t    START_ANCHOR\n\t  } = PLATFORM_CHARS;\n\n\t  const globstar = opts => {\n\t    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n\t  };\n\n\t  const nodot = opts.dot ? '' : NO_DOT;\n\t  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n\t  let star = opts.bash === true ? globstar(opts) : STAR;\n\n\t  if (opts.capture) {\n\t    star = `(${star})`;\n\t  }\n\n\t  // minimatch options support\n\t  if (typeof opts.noext === 'boolean') {\n\t    opts.noextglob = opts.noext;\n\t  }\n\n\t  const state = {\n\t    input,\n\t    index: -1,\n\t    start: 0,\n\t    dot: opts.dot === true,\n\t    consumed: '',\n\t    output: '',\n\t    prefix: '',\n\t    backtrack: false,\n\t    negated: false,\n\t    brackets: 0,\n\t    braces: 0,\n\t    parens: 0,\n\t    quotes: 0,\n\t    globstar: false,\n\t    tokens\n\t  };\n\n\t  input = utils.removePrefix(input, state);\n\t  len = input.length;\n\n\t  const extglobs = [];\n\t  const braces = [];\n\t  const stack = [];\n\t  let prev = bos;\n\t  let value;\n\n\t  /**\n\t   * Tokenizing helpers\n\t   */\n\n\t  const eos = () => state.index === len - 1;\n\t  const peek = state.peek = (n = 1) => input[state.index + n];\n\t  const advance = state.advance = () => input[++state.index] || '';\n\t  const remaining = () => input.slice(state.index + 1);\n\t  const consume = (value = '', num = 0) => {\n\t    state.consumed += value;\n\t    state.index += num;\n\t  };\n\n\t  const append = token => {\n\t    state.output += token.output != null ? token.output : token.value;\n\t    consume(token.value);\n\t  };\n\n\t  const negate = () => {\n\t    let count = 1;\n\n\t    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n\t      advance();\n\t      state.start++;\n\t      count++;\n\t    }\n\n\t    if (count % 2 === 0) {\n\t      return false;\n\t    }\n\n\t    state.negated = true;\n\t    state.start++;\n\t    return true;\n\t  };\n\n\t  const increment = type => {\n\t    state[type]++;\n\t    stack.push(type);\n\t  };\n\n\t  const decrement = type => {\n\t    state[type]--;\n\t    stack.pop();\n\t  };\n\n\t  /**\n\t   * Push tokens onto the tokens array. This helper speeds up\n\t   * tokenizing by 1) helping us avoid backtracking as much as possible,\n\t   * and 2) helping us avoid creating extra tokens when consecutive\n\t   * characters are plain text. This improves performance and simplifies\n\t   * lookbehinds.\n\t   */\n\n\t  const push = tok => {\n\t    if (prev.type === 'globstar') {\n\t      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n\t      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\n\n\t      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n\t        state.output = state.output.slice(0, -prev.output.length);\n\t        prev.type = 'star';\n\t        prev.value = '*';\n\t        prev.output = star;\n\t        state.output += prev.output;\n\t      }\n\t    }\n\n\t    if (extglobs.length && tok.type !== 'paren') {\n\t      extglobs[extglobs.length - 1].inner += tok.value;\n\t    }\n\n\t    if (tok.value || tok.output) append(tok);\n\t    if (prev && prev.type === 'text' && tok.type === 'text') {\n\t      prev.output = (prev.output || prev.value) + tok.value;\n\t      prev.value += tok.value;\n\t      return;\n\t    }\n\n\t    tok.prev = prev;\n\t    tokens.push(tok);\n\t    prev = tok;\n\t  };\n\n\t  const extglobOpen = (type, value) => {\n\t    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };\n\n\t    token.prev = prev;\n\t    token.parens = state.parens;\n\t    token.output = state.output;\n\t    const output = (opts.capture ? '(' : '') + token.open;\n\n\t    increment('parens');\n\t    push({ type, value, output: state.output ? '' : ONE_CHAR });\n\t    push({ type: 'paren', extglob: true, value: advance(), output });\n\t    extglobs.push(token);\n\t  };\n\n\t  const extglobClose = token => {\n\t    let output = token.close + (opts.capture ? ')' : '');\n\t    let rest;\n\n\t    if (token.type === 'negate') {\n\t      let extglobStar = star;\n\n\t      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n\t        extglobStar = globstar(opts);\n\t      }\n\n\t      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n\t        output = token.close = `)$))${extglobStar}`;\n\t      }\n\n\t      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n\t        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.\n\t        // In this case, we need to parse the string and use it in the output of the original pattern.\n\t        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.\n\t        //\n\t        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.\n\t        const expression = parse(rest, { ...options, fastpaths: false }).output;\n\n\t        output = token.close = `)${expression})${extglobStar})`;\n\t      }\n\n\t      if (token.prev.type === 'bos') {\n\t        state.negatedExtglob = true;\n\t      }\n\t    }\n\n\t    push({ type: 'paren', extglob: true, value, output });\n\t    decrement('parens');\n\t  };\n\n\t  /**\n\t   * Fast paths\n\t   */\n\n\t  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n\t    let backslashes = false;\n\n\t    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\n\t      if (first === '\\\\') {\n\t        backslashes = true;\n\t        return m;\n\t      }\n\n\t      if (first === '?') {\n\t        if (esc) {\n\t          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n\t        }\n\t        if (index === 0) {\n\t          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n\t        }\n\t        return QMARK.repeat(chars.length);\n\t      }\n\n\t      if (first === '.') {\n\t        return DOT_LITERAL.repeat(chars.length);\n\t      }\n\n\t      if (first === '*') {\n\t        if (esc) {\n\t          return esc + first + (rest ? star : '');\n\t        }\n\t        return star;\n\t      }\n\t      return esc ? m : `\\\\${m}`;\n\t    });\n\n\t    if (backslashes === true) {\n\t      if (opts.unescape === true) {\n\t        output = output.replace(/\\\\/g, '');\n\t      } else {\n\t        output = output.replace(/\\\\+/g, m => {\n\t          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\n\t        });\n\t      }\n\t    }\n\n\t    if (output === input && opts.contains === true) {\n\t      state.output = input;\n\t      return state;\n\t    }\n\n\t    state.output = utils.wrapOutput(output, state, options);\n\t    return state;\n\t  }\n\n\t  /**\n\t   * Tokenize input until we reach end-of-string\n\t   */\n\n\t  while (!eos()) {\n\t    value = advance();\n\n\t    if (value === '\\u0000') {\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Escaped characters\n\t     */\n\n\t    if (value === '\\\\') {\n\t      const next = peek();\n\n\t      if (next === '/' && opts.bash !== true) {\n\t        continue;\n\t      }\n\n\t      if (next === '.' || next === ';') {\n\t        continue;\n\t      }\n\n\t      if (!next) {\n\t        value += '\\\\';\n\t        push({ type: 'text', value });\n\t        continue;\n\t      }\n\n\t      // collapse slashes to reduce potential for exploits\n\t      const match = /^\\\\+/.exec(remaining());\n\t      let slashes = 0;\n\n\t      if (match && match[0].length > 2) {\n\t        slashes = match[0].length;\n\t        state.index += slashes;\n\t        if (slashes % 2 !== 0) {\n\t          value += '\\\\';\n\t        }\n\t      }\n\n\t      if (opts.unescape === true) {\n\t        value = advance();\n\t      } else {\n\t        value += advance();\n\t      }\n\n\t      if (state.brackets === 0) {\n\t        push({ type: 'text', value });\n\t        continue;\n\t      }\n\t    }\n\n\t    /**\n\t     * If we're inside a regex character class, continue\n\t     * until we reach the closing bracket.\n\t     */\n\n\t    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n\t      if (opts.posix !== false && value === ':') {\n\t        const inner = prev.value.slice(1);\n\t        if (inner.includes('[')) {\n\t          prev.posix = true;\n\n\t          if (inner.includes(':')) {\n\t            const idx = prev.value.lastIndexOf('[');\n\t            const pre = prev.value.slice(0, idx);\n\t            const rest = prev.value.slice(idx + 2);\n\t            const posix = POSIX_REGEX_SOURCE[rest];\n\t            if (posix) {\n\t              prev.value = pre + posix;\n\t              state.backtrack = true;\n\t              advance();\n\n\t              if (!bos.output && tokens.indexOf(prev) === 1) {\n\t                bos.output = ONE_CHAR;\n\t              }\n\t              continue;\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\n\t        value = `\\\\${value}`;\n\t      }\n\n\t      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n\t        value = `\\\\${value}`;\n\t      }\n\n\t      if (opts.posix === true && value === '!' && prev.value === '[') {\n\t        value = '^';\n\t      }\n\n\t      prev.value += value;\n\t      append({ value });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * If we're inside a quoted string, continue\n\t     * until we reach the closing double quote.\n\t     */\n\n\t    if (state.quotes === 1 && value !== '\"') {\n\t      value = utils.escapeRegex(value);\n\t      prev.value += value;\n\t      append({ value });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Double quotes\n\t     */\n\n\t    if (value === '\"') {\n\t      state.quotes = state.quotes === 1 ? 0 : 1;\n\t      if (opts.keepQuotes === true) {\n\t        push({ type: 'text', value });\n\t      }\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Parentheses\n\t     */\n\n\t    if (value === '(') {\n\t      increment('parens');\n\t      push({ type: 'paren', value });\n\t      continue;\n\t    }\n\n\t    if (value === ')') {\n\t      if (state.parens === 0 && opts.strictBrackets === true) {\n\t        throw new SyntaxError(syntaxError('opening', '('));\n\t      }\n\n\t      const extglob = extglobs[extglobs.length - 1];\n\t      if (extglob && state.parens === extglob.parens + 1) {\n\t        extglobClose(extglobs.pop());\n\t        continue;\n\t      }\n\n\t      push({ type: 'paren', value, output: state.parens ? ')' : '\\\\)' });\n\t      decrement('parens');\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Square brackets\n\t     */\n\n\t    if (value === '[') {\n\t      if (opts.nobracket === true || !remaining().includes(']')) {\n\t        if (opts.nobracket !== true && opts.strictBrackets === true) {\n\t          throw new SyntaxError(syntaxError('closing', ']'));\n\t        }\n\n\t        value = `\\\\${value}`;\n\t      } else {\n\t        increment('brackets');\n\t      }\n\n\t      push({ type: 'bracket', value });\n\t      continue;\n\t    }\n\n\t    if (value === ']') {\n\t      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\n\t        push({ type: 'text', value, output: `\\\\${value}` });\n\t        continue;\n\t      }\n\n\t      if (state.brackets === 0) {\n\t        if (opts.strictBrackets === true) {\n\t          throw new SyntaxError(syntaxError('opening', '['));\n\t        }\n\n\t        push({ type: 'text', value, output: `\\\\${value}` });\n\t        continue;\n\t      }\n\n\t      decrement('brackets');\n\n\t      const prevValue = prev.value.slice(1);\n\t      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n\t        value = `/${value}`;\n\t      }\n\n\t      prev.value += value;\n\t      append({ value });\n\n\t      // when literal brackets are explicitly disabled\n\t      // assume we should match with a regex character class\n\t      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n\t        continue;\n\t      }\n\n\t      const escaped = utils.escapeRegex(prev.value);\n\t      state.output = state.output.slice(0, -prev.value.length);\n\n\t      // when literal brackets are explicitly enabled\n\t      // assume we should escape the brackets to match literal characters\n\t      if (opts.literalBrackets === true) {\n\t        state.output += escaped;\n\t        prev.value = escaped;\n\t        continue;\n\t      }\n\n\t      // when the user specifies nothing, try to match both\n\t      prev.value = `(${capture}${escaped}|${prev.value})`;\n\t      state.output += prev.value;\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Braces\n\t     */\n\n\t    if (value === '{' && opts.nobrace !== true) {\n\t      increment('braces');\n\n\t      const open = {\n\t        type: 'brace',\n\t        value,\n\t        output: '(',\n\t        outputIndex: state.output.length,\n\t        tokensIndex: state.tokens.length\n\t      };\n\n\t      braces.push(open);\n\t      push(open);\n\t      continue;\n\t    }\n\n\t    if (value === '}') {\n\t      const brace = braces[braces.length - 1];\n\n\t      if (opts.nobrace === true || !brace) {\n\t        push({ type: 'text', value, output: value });\n\t        continue;\n\t      }\n\n\t      let output = ')';\n\n\t      if (brace.dots === true) {\n\t        const arr = tokens.slice();\n\t        const range = [];\n\n\t        for (let i = arr.length - 1; i >= 0; i--) {\n\t          tokens.pop();\n\t          if (arr[i].type === 'brace') {\n\t            break;\n\t          }\n\t          if (arr[i].type !== 'dots') {\n\t            range.unshift(arr[i].value);\n\t          }\n\t        }\n\n\t        output = expandRange(range, opts);\n\t        state.backtrack = true;\n\t      }\n\n\t      if (brace.comma !== true && brace.dots !== true) {\n\t        const out = state.output.slice(0, brace.outputIndex);\n\t        const toks = state.tokens.slice(brace.tokensIndex);\n\t        brace.value = brace.output = '\\\\{';\n\t        value = output = '\\\\}';\n\t        state.output = out;\n\t        for (const t of toks) {\n\t          state.output += (t.output || t.value);\n\t        }\n\t      }\n\n\t      push({ type: 'brace', value, output });\n\t      decrement('braces');\n\t      braces.pop();\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Pipes\n\t     */\n\n\t    if (value === '|') {\n\t      if (extglobs.length > 0) {\n\t        extglobs[extglobs.length - 1].conditions++;\n\t      }\n\t      push({ type: 'text', value });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Commas\n\t     */\n\n\t    if (value === ',') {\n\t      let output = value;\n\n\t      const brace = braces[braces.length - 1];\n\t      if (brace && stack[stack.length - 1] === 'braces') {\n\t        brace.comma = true;\n\t        output = '|';\n\t      }\n\n\t      push({ type: 'comma', value, output });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Slashes\n\t     */\n\n\t    if (value === '/') {\n\t      // if the beginning of the glob is \"./\", advance the start\n\t      // to the current index, and don't add the \"./\" characters\n\t      // to the state. This greatly simplifies lookbehinds when\n\t      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n\t      if (prev.type === 'dot' && state.index === state.start + 1) {\n\t        state.start = state.index + 1;\n\t        state.consumed = '';\n\t        state.output = '';\n\t        tokens.pop();\n\t        prev = bos; // reset \"prev\" to the first token\n\t        continue;\n\t      }\n\n\t      push({ type: 'slash', value, output: SLASH_LITERAL });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Dots\n\t     */\n\n\t    if (value === '.') {\n\t      if (state.braces > 0 && prev.type === 'dot') {\n\t        if (prev.value === '.') prev.output = DOT_LITERAL;\n\t        const brace = braces[braces.length - 1];\n\t        prev.type = 'dots';\n\t        prev.output += value;\n\t        prev.value += value;\n\t        brace.dots = true;\n\t        continue;\n\t      }\n\n\t      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n\t        push({ type: 'text', value, output: DOT_LITERAL });\n\t        continue;\n\t      }\n\n\t      push({ type: 'dot', value, output: DOT_LITERAL });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Question marks\n\t     */\n\n\t    if (value === '?') {\n\t      const isGroup = prev && prev.value === '(';\n\t      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n\t        extglobOpen('qmark', value);\n\t        continue;\n\t      }\n\n\t      if (prev && prev.type === 'paren') {\n\t        const next = peek();\n\t        let output = value;\n\n\t        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\n\t          output = `\\\\${value}`;\n\t        }\n\n\t        push({ type: 'text', value, output });\n\t        continue;\n\t      }\n\n\t      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n\t        push({ type: 'qmark', value, output: QMARK_NO_DOT });\n\t        continue;\n\t      }\n\n\t      push({ type: 'qmark', value, output: QMARK });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Exclamation\n\t     */\n\n\t    if (value === '!') {\n\t      if (opts.noextglob !== true && peek() === '(') {\n\t        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n\t          extglobOpen('negate', value);\n\t          continue;\n\t        }\n\t      }\n\n\t      if (opts.nonegate !== true && state.index === 0) {\n\t        negate();\n\t        continue;\n\t      }\n\t    }\n\n\t    /**\n\t     * Plus\n\t     */\n\n\t    if (value === '+') {\n\t      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n\t        extglobOpen('plus', value);\n\t        continue;\n\t      }\n\n\t      if ((prev && prev.value === '(') || opts.regex === false) {\n\t        push({ type: 'plus', value, output: PLUS_LITERAL });\n\t        continue;\n\t      }\n\n\t      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\n\t        push({ type: 'plus', value });\n\t        continue;\n\t      }\n\n\t      push({ type: 'plus', value: PLUS_LITERAL });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Plain text\n\t     */\n\n\t    if (value === '@') {\n\t      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n\t        push({ type: 'at', extglob: true, value, output: '' });\n\t        continue;\n\t      }\n\n\t      push({ type: 'text', value });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Plain text\n\t     */\n\n\t    if (value !== '*') {\n\t      if (value === '$' || value === '^') {\n\t        value = `\\\\${value}`;\n\t      }\n\n\t      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n\t      if (match) {\n\t        value += match[0];\n\t        state.index += match[0].length;\n\t      }\n\n\t      push({ type: 'text', value });\n\t      continue;\n\t    }\n\n\t    /**\n\t     * Stars\n\t     */\n\n\t    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n\t      prev.type = 'star';\n\t      prev.star = true;\n\t      prev.value += value;\n\t      prev.output = star;\n\t      state.backtrack = true;\n\t      state.globstar = true;\n\t      consume(value);\n\t      continue;\n\t    }\n\n\t    let rest = remaining();\n\t    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n\t      extglobOpen('star', value);\n\t      continue;\n\t    }\n\n\t    if (prev.type === 'star') {\n\t      if (opts.noglobstar === true) {\n\t        consume(value);\n\t        continue;\n\t      }\n\n\t      const prior = prev.prev;\n\t      const before = prior.prev;\n\t      const isStart = prior.type === 'slash' || prior.type === 'bos';\n\t      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n\t      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\n\t        push({ type: 'star', value, output: '' });\n\t        continue;\n\t      }\n\n\t      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n\t      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n\t      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n\t        push({ type: 'star', value, output: '' });\n\t        continue;\n\t      }\n\n\t      // strip consecutive `/**/`\n\t      while (rest.slice(0, 3) === '/**') {\n\t        const after = input[state.index + 4];\n\t        if (after && after !== '/') {\n\t          break;\n\t        }\n\t        rest = rest.slice(3);\n\t        consume('/**', 3);\n\t      }\n\n\t      if (prior.type === 'bos' && eos()) {\n\t        prev.type = 'globstar';\n\t        prev.value += value;\n\t        prev.output = globstar(opts);\n\t        state.output = prev.output;\n\t        state.globstar = true;\n\t        consume(value);\n\t        continue;\n\t      }\n\n\t      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n\t        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n\t        prior.output = `(?:${prior.output}`;\n\n\t        prev.type = 'globstar';\n\t        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n\t        prev.value += value;\n\t        state.globstar = true;\n\t        state.output += prior.output + prev.output;\n\t        consume(value);\n\t        continue;\n\t      }\n\n\t      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n\t        const end = rest[1] !== void 0 ? '|$' : '';\n\n\t        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n\t        prior.output = `(?:${prior.output}`;\n\n\t        prev.type = 'globstar';\n\t        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n\t        prev.value += value;\n\n\t        state.output += prior.output + prev.output;\n\t        state.globstar = true;\n\n\t        consume(value + advance());\n\n\t        push({ type: 'slash', value: '/', output: '' });\n\t        continue;\n\t      }\n\n\t      if (prior.type === 'bos' && rest[0] === '/') {\n\t        prev.type = 'globstar';\n\t        prev.value += value;\n\t        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n\t        state.output = prev.output;\n\t        state.globstar = true;\n\t        consume(value + advance());\n\t        push({ type: 'slash', value: '/', output: '' });\n\t        continue;\n\t      }\n\n\t      // remove single star from output\n\t      state.output = state.output.slice(0, -prev.output.length);\n\n\t      // reset previous token to globstar\n\t      prev.type = 'globstar';\n\t      prev.output = globstar(opts);\n\t      prev.value += value;\n\n\t      // reset output with globstar\n\t      state.output += prev.output;\n\t      state.globstar = true;\n\t      consume(value);\n\t      continue;\n\t    }\n\n\t    const token = { type: 'star', value, output: star };\n\n\t    if (opts.bash === true) {\n\t      token.output = '.*?';\n\t      if (prev.type === 'bos' || prev.type === 'slash') {\n\t        token.output = nodot + token.output;\n\t      }\n\t      push(token);\n\t      continue;\n\t    }\n\n\t    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n\t      token.output = value;\n\t      push(token);\n\t      continue;\n\t    }\n\n\t    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n\t      if (prev.type === 'dot') {\n\t        state.output += NO_DOT_SLASH;\n\t        prev.output += NO_DOT_SLASH;\n\n\t      } else if (opts.dot === true) {\n\t        state.output += NO_DOTS_SLASH;\n\t        prev.output += NO_DOTS_SLASH;\n\n\t      } else {\n\t        state.output += nodot;\n\t        prev.output += nodot;\n\t      }\n\n\t      if (peek() !== '*') {\n\t        state.output += ONE_CHAR;\n\t        prev.output += ONE_CHAR;\n\t      }\n\t    }\n\n\t    push(token);\n\t  }\n\n\t  while (state.brackets > 0) {\n\t    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n\t    state.output = utils.escapeLast(state.output, '[');\n\t    decrement('brackets');\n\t  }\n\n\t  while (state.parens > 0) {\n\t    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n\t    state.output = utils.escapeLast(state.output, '(');\n\t    decrement('parens');\n\t  }\n\n\t  while (state.braces > 0) {\n\t    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n\t    state.output = utils.escapeLast(state.output, '{');\n\t    decrement('braces');\n\t  }\n\n\t  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n\t    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n\t  }\n\n\t  // rebuild the output if we had to backtrack at any point\n\t  if (state.backtrack === true) {\n\t    state.output = '';\n\n\t    for (const token of state.tokens) {\n\t      state.output += token.output != null ? token.output : token.value;\n\n\t      if (token.suffix) {\n\t        state.output += token.suffix;\n\t      }\n\t    }\n\t  }\n\n\t  return state;\n\t};\n\n\t/**\n\t * Fast paths for creating regular expressions for common glob patterns.\n\t * This can significantly speed up processing and has very little downside\n\t * impact when none of the fast paths match.\n\t */\n\n\tparse.fastpaths = (input, options) => {\n\t  const opts = { ...options };\n\t  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\t  const len = input.length;\n\t  if (len > max) {\n\t    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n\t  }\n\n\t  input = REPLACEMENTS[input] || input;\n\n\t  // create constants based on platform, for windows or posix\n\t  const {\n\t    DOT_LITERAL,\n\t    SLASH_LITERAL,\n\t    ONE_CHAR,\n\t    DOTS_SLASH,\n\t    NO_DOT,\n\t    NO_DOTS,\n\t    NO_DOTS_SLASH,\n\t    STAR,\n\t    START_ANCHOR\n\t  } = constants.globChars(opts.windows);\n\n\t  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n\t  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n\t  const capture = opts.capture ? '' : '?:';\n\t  const state = { negated: false, prefix: '' };\n\t  let star = opts.bash === true ? '.*?' : STAR;\n\n\t  if (opts.capture) {\n\t    star = `(${star})`;\n\t  }\n\n\t  const globstar = opts => {\n\t    if (opts.noglobstar === true) return star;\n\t    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n\t  };\n\n\t  const create = str => {\n\t    switch (str) {\n\t      case '*':\n\t        return `${nodot}${ONE_CHAR}${star}`;\n\n\t      case '.*':\n\t        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n\t      case '*.*':\n\t        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n\t      case '*/*':\n\t        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n\t      case '**':\n\t        return nodot + globstar(opts);\n\n\t      case '**/*':\n\t        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n\t      case '**/*.*':\n\t        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n\t      case '**/.*':\n\t        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n\t      default: {\n\t        const match = /^(.*?)\\.(\\w+)$/.exec(str);\n\t        if (!match) return;\n\n\t        const source = create(match[1]);\n\t        if (!source) return;\n\n\t        return source + DOT_LITERAL + match[2];\n\t      }\n\t    }\n\t  };\n\n\t  const output = utils.removePrefix(input, state);\n\t  let source = create(output);\n\n\t  if (source && opts.strictSlashes !== true) {\n\t    source += `${SLASH_LITERAL}?`;\n\t  }\n\n\t  return source;\n\t};\n\n\tparse_1 = parse;\n\treturn parse_1;\n}\n\nvar picomatch_1$1;\nvar hasRequiredPicomatch$1;\n\nfunction requirePicomatch$1 () {\n\tif (hasRequiredPicomatch$1) return picomatch_1$1;\n\thasRequiredPicomatch$1 = 1;\n\n\tconst scan = /*@__PURE__*/ requireScan();\n\tconst parse = /*@__PURE__*/ requireParse();\n\tconst utils = /*@__PURE__*/ requireUtils();\n\tconst constants = /*@__PURE__*/ requireConstants();\n\tconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n\t/**\n\t * Creates a matcher function from one or more glob patterns. The\n\t * returned function takes a string to match as its first argument,\n\t * and returns true if the string is a match. The returned matcher\n\t * function also takes a boolean as the second argument that, when true,\n\t * returns an object with additional information.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * // picomatch(glob[, options]);\n\t *\n\t * const isMatch = picomatch('*.!(*a)');\n\t * console.log(isMatch('a.a')); //=> false\n\t * console.log(isMatch('a.b')); //=> true\n\t * ```\n\t * @name picomatch\n\t * @param {String|Array} `globs` One or more glob patterns.\n\t * @param {Object=} `options`\n\t * @return {Function=} Returns a matcher function.\n\t * @api public\n\t */\n\n\tconst picomatch = (glob, options, returnState = false) => {\n\t  if (Array.isArray(glob)) {\n\t    const fns = glob.map(input => picomatch(input, options, returnState));\n\t    const arrayMatcher = str => {\n\t      for (const isMatch of fns) {\n\t        const state = isMatch(str);\n\t        if (state) return state;\n\t      }\n\t      return false;\n\t    };\n\t    return arrayMatcher;\n\t  }\n\n\t  const isState = isObject(glob) && glob.tokens && glob.input;\n\n\t  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n\t    throw new TypeError('Expected pattern to be a non-empty string');\n\t  }\n\n\t  const opts = options || {};\n\t  const posix = opts.windows;\n\t  const regex = isState\n\t    ? picomatch.compileRe(glob, options)\n\t    : picomatch.makeRe(glob, options, false, true);\n\n\t  const state = regex.state;\n\t  delete regex.state;\n\n\t  let isIgnored = () => false;\n\t  if (opts.ignore) {\n\t    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n\t    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n\t  }\n\n\t  const matcher = (input, returnObject = false) => {\n\t    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n\t    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n\t    if (typeof opts.onResult === 'function') {\n\t      opts.onResult(result);\n\t    }\n\n\t    if (isMatch === false) {\n\t      result.isMatch = false;\n\t      return returnObject ? result : false;\n\t    }\n\n\t    if (isIgnored(input)) {\n\t      if (typeof opts.onIgnore === 'function') {\n\t        opts.onIgnore(result);\n\t      }\n\t      result.isMatch = false;\n\t      return returnObject ? result : false;\n\t    }\n\n\t    if (typeof opts.onMatch === 'function') {\n\t      opts.onMatch(result);\n\t    }\n\t    return returnObject ? result : true;\n\t  };\n\n\t  if (returnState) {\n\t    matcher.state = state;\n\t  }\n\n\t  return matcher;\n\t};\n\n\t/**\n\t * Test `input` with the given `regex`. This is used by the main\n\t * `picomatch()` function to test the input string.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * // picomatch.test(input, regex[, options]);\n\t *\n\t * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n\t * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n\t * ```\n\t * @param {String} `input` String to test.\n\t * @param {RegExp} `regex`\n\t * @return {Object} Returns an object with matching info.\n\t * @api public\n\t */\n\n\tpicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n\t  if (typeof input !== 'string') {\n\t    throw new TypeError('Expected input to be a string');\n\t  }\n\n\t  if (input === '') {\n\t    return { isMatch: false, output: '' };\n\t  }\n\n\t  const opts = options || {};\n\t  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n\t  let match = input === glob;\n\t  let output = (match && format) ? format(input) : input;\n\n\t  if (match === false) {\n\t    output = format ? format(input) : input;\n\t    match = output === glob;\n\t  }\n\n\t  if (match === false || opts.capture === true) {\n\t    if (opts.matchBase === true || opts.basename === true) {\n\t      match = picomatch.matchBase(input, regex, options, posix);\n\t    } else {\n\t      match = regex.exec(output);\n\t    }\n\t  }\n\n\t  return { isMatch: Boolean(match), match, output };\n\t};\n\n\t/**\n\t * Match the basename of a filepath.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * // picomatch.matchBase(input, glob[, options]);\n\t * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n\t * ```\n\t * @param {String} `input` String to test.\n\t * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n\t * @return {Boolean}\n\t * @api public\n\t */\n\n\tpicomatch.matchBase = (input, glob, options) => {\n\t  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n\t  return regex.test(utils.basename(input));\n\t};\n\n\t/**\n\t * Returns true if **any** of the given glob `patterns` match the specified `string`.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * // picomatch.isMatch(string, patterns[, options]);\n\t *\n\t * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n\t * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n\t * ```\n\t * @param {String|Array} str The string to test.\n\t * @param {String|Array} patterns One or more glob patterns to use for matching.\n\t * @param {Object} [options] See available [options](#options).\n\t * @return {Boolean} Returns true if any patterns match `str`\n\t * @api public\n\t */\n\n\tpicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n\t/**\n\t * Parse a glob pattern to create the source string for a regular\n\t * expression.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * const result = picomatch.parse(pattern[, options]);\n\t * ```\n\t * @param {String} `pattern`\n\t * @param {Object} `options`\n\t * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n\t * @api public\n\t */\n\n\tpicomatch.parse = (pattern, options) => {\n\t  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n\t  return parse(pattern, { ...options, fastpaths: false });\n\t};\n\n\t/**\n\t * Scan a glob pattern to separate the pattern into segments.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * // picomatch.scan(input[, options]);\n\t *\n\t * const result = picomatch.scan('!./foo/*.js');\n\t * console.log(result);\n\t * { prefix: '!./',\n\t *   input: '!./foo/*.js',\n\t *   start: 3,\n\t *   base: 'foo',\n\t *   glob: '*.js',\n\t *   isBrace: false,\n\t *   isBracket: false,\n\t *   isGlob: true,\n\t *   isExtglob: false,\n\t *   isGlobstar: false,\n\t *   negated: true }\n\t * ```\n\t * @param {String} `input` Glob pattern to scan.\n\t * @param {Object} `options`\n\t * @return {Object} Returns an object with\n\t * @api public\n\t */\n\n\tpicomatch.scan = (input, options) => scan(input, options);\n\n\t/**\n\t * Compile a regular expression from the `state` object returned by the\n\t * [parse()](#parse) method.\n\t *\n\t * @param {Object} `state`\n\t * @param {Object} `options`\n\t * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n\t * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n\t * @return {RegExp}\n\t * @api public\n\t */\n\n\tpicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n\t  if (returnOutput === true) {\n\t    return state.output;\n\t  }\n\n\t  const opts = options || {};\n\t  const prepend = opts.contains ? '' : '^';\n\t  const append = opts.contains ? '' : '$';\n\n\t  let source = `${prepend}(?:${state.output})${append}`;\n\t  if (state && state.negated === true) {\n\t    source = `^(?!${source}).*$`;\n\t  }\n\n\t  const regex = picomatch.toRegex(source, options);\n\t  if (returnState === true) {\n\t    regex.state = state;\n\t  }\n\n\t  return regex;\n\t};\n\n\t/**\n\t * Create a regular expression from a parsed glob pattern.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * const state = picomatch.parse('*.js');\n\t * // picomatch.compileRe(state[, options]);\n\t *\n\t * console.log(picomatch.compileRe(state));\n\t * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n\t * ```\n\t * @param {String} `state` The object returned from the `.parse` method.\n\t * @param {Object} `options`\n\t * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n\t * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n\t * @return {RegExp} Returns a regex created from the given pattern.\n\t * @api public\n\t */\n\n\tpicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n\t  if (!input || typeof input !== 'string') {\n\t    throw new TypeError('Expected a non-empty string');\n\t  }\n\n\t  let parsed = { negated: false, fastpaths: true };\n\n\t  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n\t    parsed.output = parse.fastpaths(input, options);\n\t  }\n\n\t  if (!parsed.output) {\n\t    parsed = parse(input, options);\n\t  }\n\n\t  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n\t};\n\n\t/**\n\t * Create a regular expression from the given regex source string.\n\t *\n\t * ```js\n\t * const picomatch = require('picomatch');\n\t * // picomatch.toRegex(source[, options]);\n\t *\n\t * const { output } = picomatch.parse('*.js');\n\t * console.log(picomatch.toRegex(output));\n\t * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n\t * ```\n\t * @param {String} `source` Regular expression source string.\n\t * @param {Object} `options`\n\t * @return {RegExp}\n\t * @api public\n\t */\n\n\tpicomatch.toRegex = (source, options) => {\n\t  try {\n\t    const opts = options || {};\n\t    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n\t  } catch (err) {\n\t    if (options && options.debug === true) throw err;\n\t    return /$^/;\n\t  }\n\t};\n\n\t/**\n\t * Picomatch constants.\n\t * @return {Object}\n\t */\n\n\tpicomatch.constants = constants;\n\n\t/**\n\t * Expose \"picomatch\"\n\t */\n\n\tpicomatch_1$1 = picomatch;\n\treturn picomatch_1$1;\n}\n\nvar picomatch_1;\nvar hasRequiredPicomatch;\n\nfunction requirePicomatch () {\n\tif (hasRequiredPicomatch) return picomatch_1;\n\thasRequiredPicomatch = 1;\n\n\tconst pico = /*@__PURE__*/ requirePicomatch$1();\n\tconst utils = /*@__PURE__*/ requireUtils();\n\n\tfunction picomatch(glob, options, returnState = false) {\n\t  // default to os.platform()\n\t  if (options && (options.windows === null || options.windows === undefined)) {\n\t    // don't mutate the original options object\n\t    options = { ...options, windows: utils.isWindows() };\n\t  }\n\n\t  return pico(glob, options, returnState);\n\t}\n\n\tObject.assign(picomatch, pico);\n\tpicomatch_1 = picomatch;\n\treturn picomatch_1;\n}\n\nvar picomatchExports = /*@__PURE__*/ requirePicomatch();\nconst pm = /*@__PURE__*/getDefaultExportFromCjs(picomatchExports);\n\nconst extractors = {\n    ArrayPattern(names, param) {\n        for (const element of param.elements) {\n            if (element)\n                extractors[element.type](names, element);\n        }\n    },\n    AssignmentPattern(names, param) {\n        extractors[param.left.type](names, param.left);\n    },\n    Identifier(names, param) {\n        names.push(param.name);\n    },\n    MemberExpression() { },\n    ObjectPattern(names, param) {\n        for (const prop of param.properties) {\n            // @ts-ignore Typescript reports that this is not a valid type\n            if (prop.type === 'RestElement') {\n                extractors.RestElement(names, prop);\n            }\n            else {\n                extractors[prop.value.type](names, prop.value);\n            }\n        }\n    },\n    RestElement(names, param) {\n        extractors[param.argument.type](names, param.argument);\n    }\n};\nconst extractAssignedNames = function extractAssignedNames(param) {\n    const names = [];\n    extractors[param.type](names, param);\n    return names;\n};\n\n// Helper since Typescript can't detect readonly arrays with Array.isArray\nfunction isArray(arg) {\n    return Array.isArray(arg);\n}\nfunction ensureArray$1(thing) {\n    if (isArray(thing))\n        return thing;\n    if (thing == null)\n        return [];\n    return [thing];\n}\n\nconst normalizePathRegExp = new RegExp(`\\\\${Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).sep}`, 'g');\nconst normalizePath = function normalizePath(filename) {\n    return filename.replace(normalizePathRegExp, Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).sep);\n};\n\nfunction getMatcherString(id, resolutionBase) {\n    if (resolutionBase === false || Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(id) || id.startsWith('**')) {\n        return normalizePath(id);\n    }\n    // resolve('') is valid and will default to process.cwd()\n    const basePath = normalizePath(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(resolutionBase || ''))\n        // escape all possible (posix + win) path characters that might interfere with regex\n        .replace(/[-^$*+?.()|[\\]{}]/g, '\\\\$&');\n    // Note that we use posix.join because:\n    // 1. the basePath has been normalized to use /\n    // 2. the incoming glob (id) matcher, also uses /\n    // otherwise Node will force backslash (\\) on windows\n    return Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).join(basePath, normalizePath(id));\n}\nconst createFilter = function createFilter(include, exclude, options) {\n    const resolutionBase = options && options.resolve;\n    const getMatcher = (id) => id instanceof RegExp\n        ? id\n        : {\n            test: (what) => {\n                // this refactor is a tad overly verbose but makes for easy debugging\n                const pattern = getMatcherString(id, resolutionBase);\n                const fn = pm(pattern, { dot: true });\n                const result = fn(what);\n                return result;\n            }\n        };\n    const includeMatchers = ensureArray$1(include).map(getMatcher);\n    const excludeMatchers = ensureArray$1(exclude).map(getMatcher);\n    if (!includeMatchers.length && !excludeMatchers.length)\n        return (id) => typeof id === 'string' && !id.includes('\\0');\n    return function result(id) {\n        if (typeof id !== 'string')\n            return false;\n        if (id.includes('\\0'))\n            return false;\n        const pathId = normalizePath(id);\n        for (let i = 0; i < excludeMatchers.length; ++i) {\n            const matcher = excludeMatchers[i];\n            if (matcher.test(pathId))\n                return false;\n        }\n        for (let i = 0; i < includeMatchers.length; ++i) {\n            const matcher = includeMatchers[i];\n            if (matcher.test(pathId))\n                return true;\n        }\n        return !includeMatchers.length;\n    };\n};\n\nconst reservedWords = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public';\nconst builtins = 'arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl';\nconst forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(' '));\nforbiddenIdentifiers.add('');\n\nclass ArrayPattern extends NodeBase {\n    addExportedVariables(variables, exportNamesByVariable) {\n        for (const element of this.elements) {\n            element?.addExportedVariables(variables, exportNamesByVariable);\n        }\n    }\n    declare(kind) {\n        const variables = [];\n        for (const element of this.elements) {\n            if (element !== null) {\n                variables.push(...element.declare(kind, UNKNOWN_EXPRESSION));\n            }\n        }\n        return variables;\n    }\n    // Patterns can only be deoptimized at the empty path at the moment\n    deoptimizePath() {\n        for (const element of this.elements) {\n            element?.deoptimizePath(EMPTY_PATH);\n        }\n    }\n    // Patterns are only checked at the empty path at the moment\n    hasEffectsOnInteractionAtPath(_path, interaction, context) {\n        for (const element of this.elements) {\n            if (element?.hasEffectsOnInteractionAtPath(EMPTY_PATH, interaction, context))\n                return true;\n        }\n        return false;\n    }\n    markDeclarationReached() {\n        for (const element of this.elements) {\n            element?.markDeclarationReached();\n        }\n    }\n}\n\nclass ArrowFunctionExpression extends FunctionBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    get expression() {\n        return isFlagSet(this.flags, 8388608 /* Flag.expression */);\n    }\n    set expression(value) {\n        this.flags = setFlag(this.flags, 8388608 /* Flag.expression */, value);\n    }\n    createScope(parentScope) {\n        this.scope = new ReturnValueScope(parentScope, false);\n    }\n    hasEffects() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (super.hasEffectsOnInteractionAtPath(path, interaction, context)) {\n            return true;\n        }\n        if (this.annotationNoSideEffects) {\n            return false;\n        }\n        if (interaction.type === INTERACTION_CALLED) {\n            const { ignore, brokenFlow } = context;\n            context.ignore = {\n                breaks: false,\n                continues: false,\n                labels: new Set(),\n                returnYield: true,\n                this: false\n            };\n            if (this.body.hasEffects(context))\n                return true;\n            context.ignore = ignore;\n            context.brokenFlow = brokenFlow;\n        }\n        return false;\n    }\n    onlyFunctionCallUsed() {\n        const isIIFE = this.parent.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.CallExpression &&\n            this.parent.callee === this;\n        return isIIFE || super.onlyFunctionCallUsed();\n    }\n    include(context, includeChildrenRecursively) {\n        super.include(context, includeChildrenRecursively);\n        for (const parameter of this.params) {\n            if (!(parameter instanceof Identifier)) {\n                parameter.include(context, includeChildrenRecursively);\n            }\n        }\n    }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        return (this.objectEntity = new ObjectEntity([], OBJECT_PROTOTYPE));\n    }\n}\n\nclass ObjectPattern extends NodeBase {\n    addExportedVariables(variables, exportNamesByVariable) {\n        for (const property of this.properties) {\n            if (property.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Property) {\n                property.value.addExportedVariables(variables, exportNamesByVariable);\n            }\n            else {\n                property.argument.addExportedVariables(variables, exportNamesByVariable);\n            }\n        }\n    }\n    declare(kind, init) {\n        const variables = [];\n        for (const property of this.properties) {\n            variables.push(...property.declare(kind, init));\n        }\n        return variables;\n    }\n    deoptimizePath(path) {\n        if (path.length === 0) {\n            for (const property of this.properties) {\n                property.deoptimizePath(path);\n            }\n        }\n    }\n    hasEffectsOnInteractionAtPath(\n    // At the moment, this is only triggered for assignment left-hand sides,\n    // where the path is empty\n    _path, interaction, context) {\n        for (const property of this.properties) {\n            if (property.hasEffectsOnInteractionAtPath(EMPTY_PATH, interaction, context))\n                return true;\n        }\n        return false;\n    }\n    markDeclarationReached() {\n        for (const property of this.properties) {\n            property.markDeclarationReached();\n        }\n    }\n}\n\nclass AssignmentExpression extends NodeBase {\n    hasEffects(context) {\n        const { deoptimized, left, operator, right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        // MemberExpressions do not access the property before assignments if the\n        // operator is '='.\n        return (right.hasEffects(context) || left.hasEffectsAsAssignmentTarget(context, operator !== '='));\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return this.right.hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    include(context, includeChildrenRecursively) {\n        const { deoptimized, left, right, operator } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        if (includeChildrenRecursively ||\n            operator !== '=' ||\n            left.included ||\n            left.hasEffectsAsAssignmentTarget(createHasEffectsContext(), false)) {\n            left.includeAsAssignmentTarget(context, includeChildrenRecursively, operator !== '=');\n        }\n        right.include(context, includeChildrenRecursively);\n    }\n    initialise() {\n        super.initialise();\n        if (this.left instanceof Identifier) {\n            const variable = this.scope.variables.get(this.left.name);\n            if (variable?.kind === 'const') {\n                this.scope.context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logConstVariableReassignError)(), this.left.start);\n            }\n        }\n        this.left.setAssignedValue(this.right);\n    }\n    render(code, options, { preventASI, renderedParentType, renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        const { left, right, start, end, parent } = this;\n        if (left.included) {\n            left.render(code, options);\n            right.render(code, options);\n        }\n        else {\n            const inclusionStart = findNonWhiteSpace(code.original, findFirstOccurrenceOutsideComment(code.original, '=', left.end) + 1);\n            code.remove(start, inclusionStart);\n            if (preventASI) {\n                removeLineBreaks(code, inclusionStart, right.start);\n            }\n            right.render(code, options, {\n                renderedParentType: renderedParentType || parent.type,\n                renderedSurroundingElement: renderedSurroundingElement || parent.type\n            });\n        }\n        if (options.format === 'system') {\n            if (left instanceof Identifier) {\n                const variable = left.variable;\n                const exportNames = options.exportNamesByVariable.get(variable);\n                if (exportNames) {\n                    if (exportNames.length === 1) {\n                        renderSystemExportExpression(variable, start, end, code, options);\n                    }\n                    else {\n                        renderSystemExportSequenceAfterExpression(variable, start, end, parent.type !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement, code, options);\n                    }\n                    return;\n                }\n            }\n            else {\n                const systemPatternExports = [];\n                left.addExportedVariables(systemPatternExports, options.exportNamesByVariable);\n                if (systemPatternExports.length > 0) {\n                    renderSystemExportFunction(systemPatternExports, start, end, renderedSurroundingElement === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement, code, options);\n                    return;\n                }\n            }\n        }\n        if (left.included &&\n            left instanceof ObjectPattern &&\n            (renderedSurroundingElement === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement ||\n                renderedSurroundingElement === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ArrowFunctionExpression)) {\n            code.appendRight(start, '(');\n            code.prependLeft(end, ')');\n        }\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.right.deoptimizePath(UNKNOWN_PATH);\n        this.scope.context.requestTreeshakingPass();\n    }\n}\n\nclass AssignmentPattern extends NodeBase {\n    addExportedVariables(variables, exportNamesByVariable) {\n        this.left.addExportedVariables(variables, exportNamesByVariable);\n    }\n    declare(kind, init) {\n        return this.left.declare(kind, init);\n    }\n    deoptimizePath(path) {\n        if (path.length === 0) {\n            this.left.deoptimizePath(path);\n        }\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return (path.length > 0 || this.left.hasEffectsOnInteractionAtPath(EMPTY_PATH, interaction, context));\n    }\n    markDeclarationReached() {\n        this.left.markDeclarationReached();\n    }\n    render(code, options, { isShorthandProperty } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        this.left.render(code, options, { isShorthandProperty });\n        this.right.render(code, options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.right.deoptimizePath(UNKNOWN_PATH);\n        this.scope.context.requestTreeshakingPass();\n    }\n}\n\nclass AwaitExpression extends NodeBase {\n    hasEffects() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return true;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (!this.included) {\n            this.included = true;\n            checkTopLevelAwait: if (!this.scope.context.usesTopLevelAwait) {\n                let parent = this.parent;\n                do {\n                    if (parent instanceof FunctionNode || parent instanceof ArrowFunctionExpression)\n                        break checkTopLevelAwait;\n                } while ((parent = parent.parent));\n                this.scope.context.usesTopLevelAwait = true;\n            }\n        }\n        this.argument.include(context, includeChildrenRecursively);\n    }\n}\n\nconst binaryOperators = {\n    '!=': (left, right) => left != right,\n    '!==': (left, right) => left !== right,\n    '%': (left, right) => left % right,\n    '&': (left, right) => left & right,\n    '*': (left, right) => left * right,\n    // At the moment, \"**\" will be transpiled to Math.pow\n    '**': (left, right) => left ** right,\n    '+': (left, right) => left + right,\n    '-': (left, right) => left - right,\n    '/': (left, right) => left / right,\n    '<': (left, right) => left < right,\n    '<<': (left, right) => left << right,\n    '<=': (left, right) => left <= right,\n    '==': (left, right) => left == right,\n    '===': (left, right) => left === right,\n    '>': (left, right) => left > right,\n    '>=': (left, right) => left >= right,\n    '>>': (left, right) => left >> right,\n    '>>>': (left, right) => left >>> right,\n    '^': (left, right) => left ^ right,\n    '|': (left, right) => left | right\n    // We use the fallback for cases where we return something unknown\n    // in: () => UnknownValue,\n    // instanceof: () => UnknownValue,\n};\nclass BinaryExpression extends NodeBase {\n    deoptimizeCache() { }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        if (path.length > 0)\n            return UnknownValue;\n        const leftValue = this.left.getLiteralValueAtPath(EMPTY_PATH, recursionTracker, origin);\n        if (typeof leftValue === 'symbol')\n            return UnknownValue;\n        const rightValue = this.right.getLiteralValueAtPath(EMPTY_PATH, recursionTracker, origin);\n        if (typeof rightValue === 'symbol')\n            return UnknownValue;\n        const operatorFunction = binaryOperators[this.operator];\n        if (!operatorFunction)\n            return UnknownValue;\n        return operatorFunction(leftValue, rightValue);\n    }\n    hasEffects(context) {\n        // support some implicit type coercion runtime errors\n        if (this.operator === '+' &&\n            this.parent instanceof ExpressionStatement &&\n            this.left.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this) === '') {\n            return true;\n        }\n        return super.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > 1;\n    }\n    removeAnnotations(code) {\n        this.left.removeAnnotations(code);\n    }\n    render(code, options, { renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        this.left.render(code, options, { renderedSurroundingElement });\n        this.right.render(code, options);\n    }\n}\n\nclass BreakStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.label) {\n            if (!context.ignore.labels.has(this.label.name))\n                return true;\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            if (!context.ignore.breaks)\n                return true;\n            context.hasBreak = true;\n        }\n        context.brokenFlow = true;\n        return false;\n    }\n    include(context) {\n        this.included = true;\n        if (this.label) {\n            this.label.include();\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            context.hasBreak = true;\n        }\n        context.brokenFlow = true;\n    }\n}\n\nfunction renderCallArguments(code, options, node) {\n    if (node.arguments.length > 0) {\n        if (node.arguments[node.arguments.length - 1].included) {\n            for (const argument of node.arguments) {\n                argument.render(code, options);\n            }\n        }\n        else {\n            let lastIncludedIndex = node.arguments.length - 2;\n            while (lastIncludedIndex >= 0 && !node.arguments[lastIncludedIndex].included) {\n                lastIncludedIndex--;\n            }\n            if (lastIncludedIndex >= 0) {\n                for (let index = 0; index <= lastIncludedIndex; index++) {\n                    node.arguments[index].render(code, options);\n                }\n                code.remove(findFirstOccurrenceOutsideComment(code.original, ',', node.arguments[lastIncludedIndex].end), node.end - 1);\n            }\n            else {\n                code.remove(findFirstOccurrenceOutsideComment(code.original, '(', node.callee.end) + 1, node.end - 1);\n            }\n        }\n    }\n}\n\nclass CallExpressionBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.returnExpression = null;\n        this.deoptimizableDependentExpressions = [];\n        this.expressionsToBeDeoptimized = new Set();\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        const { args } = interaction;\n        const [returnExpression, isPure] = this.getReturnExpression(recursionTracker);\n        if (isPure)\n            return;\n        const deoptimizedExpressions = args.filter(expression => !!expression && expression !== UNKNOWN_EXPRESSION);\n        if (deoptimizedExpressions.length === 0)\n            return;\n        if (returnExpression === UNKNOWN_EXPRESSION) {\n            for (const expression of deoptimizedExpressions) {\n                expression.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n        else {\n            recursionTracker.withTrackedEntityAtPath(path, returnExpression, () => {\n                for (const expression of deoptimizedExpressions) {\n                    this.expressionsToBeDeoptimized.add(expression);\n                }\n                returnExpression.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n            }, null);\n        }\n    }\n    deoptimizeCache() {\n        if (this.returnExpression?.[0] !== UNKNOWN_EXPRESSION) {\n            this.returnExpression = UNKNOWN_RETURN_EXPRESSION;\n            const { deoptimizableDependentExpressions, expressionsToBeDeoptimized } = this;\n            this.expressionsToBeDeoptimized = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_SET;\n            this.deoptimizableDependentExpressions = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            for (const expression of deoptimizableDependentExpressions) {\n                expression.deoptimizeCache();\n            }\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizePath(UNKNOWN_PATH);\n            }\n        }\n    }\n    deoptimizePath(path) {\n        if (path.length === 0 ||\n            this.scope.context.deoptimizationTracker.trackEntityAtPathAndGetIfTracked(path, this)) {\n            return;\n        }\n        const [returnExpression] = this.getReturnExpression();\n        if (returnExpression !== UNKNOWN_EXPRESSION) {\n            returnExpression.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        const [returnExpression] = this.getReturnExpression(recursionTracker);\n        if (returnExpression === UNKNOWN_EXPRESSION) {\n            return UnknownValue;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path, returnExpression, () => {\n            this.deoptimizableDependentExpressions.push(origin);\n            return returnExpression.getLiteralValueAtPath(path, recursionTracker, origin);\n        }, UnknownValue);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        const returnExpression = this.getReturnExpression(recursionTracker);\n        if (returnExpression[0] === UNKNOWN_EXPRESSION) {\n            return returnExpression;\n        }\n        return recursionTracker.withTrackedEntityAtPath(path, returnExpression, () => {\n            this.deoptimizableDependentExpressions.push(origin);\n            const [expression, isPure] = returnExpression[0].getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n            return [expression, isPure || returnExpression[1]];\n        }, UNKNOWN_RETURN_EXPRESSION);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        const { type } = interaction;\n        if (type === INTERACTION_CALLED) {\n            const { args, withNew } = interaction;\n            if ((withNew ? context.instantiated : context.called).trackEntityAtPathAndGetIfTracked(path, args, this)) {\n                return false;\n            }\n        }\n        else if ((type === INTERACTION_ASSIGNED\n            ? context.assigned\n            : context.accessed).trackEntityAtPathAndGetIfTracked(path, this)) {\n            return false;\n        }\n        const [returnExpression, isPure] = this.getReturnExpression();\n        return ((type === INTERACTION_ASSIGNED || !isPure) &&\n            returnExpression.hasEffectsOnInteractionAtPath(path, interaction, context));\n    }\n}\n\nclass CallExpression extends CallExpressionBase {\n    get optional() {\n        return isFlagSet(this.flags, 128 /* Flag.optional */);\n    }\n    set optional(value) {\n        this.flags = setFlag(this.flags, 128 /* Flag.optional */, value);\n    }\n    bind() {\n        super.bind();\n        if (this.callee instanceof Identifier) {\n            const variable = this.scope.findVariable(this.callee.name);\n            if (variable.isNamespace) {\n                this.scope.context.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logCannotCallNamespace)(this.callee.name), this.start);\n            }\n            if (this.callee.name === 'eval') {\n                this.scope.context.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logEval)(this.scope.context.module.id), this.start);\n            }\n        }\n        this.interaction = {\n            args: [\n                this.callee instanceof MemberExpression && !this.callee.variable\n                    ? this.callee.object\n                    : null,\n                ...this.arguments\n            ],\n            type: INTERACTION_CALLED,\n            withNew: false\n        };\n    }\n    getLiteralValueAtPathAsChainElement(path, recursionTracker, origin) {\n        return getChainElementLiteralValueAtPath(this, this.callee, path, recursionTracker, origin);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        for (const argument of this.arguments) {\n            if (argument.hasEffects(context))\n                return true;\n        }\n        if (this.annotationPure) {\n            return false;\n        }\n        return (this.callee.hasEffects(context) ||\n            this.callee.hasEffectsOnInteractionAtPath(EMPTY_PATH, this.interaction, context));\n    }\n    hasEffectsAsChainElement(context) {\n        const calleeHasEffects = 'hasEffectsAsChainElement' in this.callee\n            ? this.callee.hasEffectsAsChainElement(context)\n            : this.callee.hasEffects(context);\n        if (calleeHasEffects === IS_SKIPPED_CHAIN)\n            return IS_SKIPPED_CHAIN;\n        if (this.optional &&\n            this.callee.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this) == null) {\n            return (!this.annotationPure && calleeHasEffects) || IS_SKIPPED_CHAIN;\n        }\n        // We only apply deoptimizations lazily once we know we are not skipping\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        for (const argument of this.arguments) {\n            if (argument.hasEffects(context))\n                return true;\n        }\n        return (!this.annotationPure &&\n            (calleeHasEffects ||\n                this.callee.hasEffectsOnInteractionAtPath(EMPTY_PATH, this.interaction, context)));\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (includeChildrenRecursively) {\n            super.include(context, includeChildrenRecursively);\n            if (includeChildrenRecursively === INCLUDE_PARAMETERS &&\n                this.callee instanceof Identifier &&\n                this.callee.variable) {\n                this.callee.variable.markCalledFromTryStatement();\n            }\n        }\n        else {\n            this.included = true;\n            this.callee.include(context, false);\n        }\n        this.callee.includeCallArguments(context, this.arguments);\n    }\n    initialise() {\n        super.initialise();\n        if (this.annotations &&\n            this.scope.context.options.treeshake.annotations) {\n            this.annotationPure = this.annotations.some(comment => comment.type === 'pure');\n        }\n    }\n    render(code, options, { renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        this.callee.render(code, options, {\n            isCalleeOfRenderedParent: true,\n            renderedSurroundingElement\n        });\n        renderCallArguments(code, options, this);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.callee.deoptimizeArgumentsOnInteractionAtPath(this.interaction, EMPTY_PATH, SHARED_RECURSION_TRACKER);\n        this.scope.context.requestTreeshakingPass();\n    }\n    getReturnExpression(recursionTracker = SHARED_RECURSION_TRACKER) {\n        if (this.returnExpression === null) {\n            this.returnExpression = UNKNOWN_RETURN_EXPRESSION;\n            return (this.returnExpression = this.callee.getReturnExpressionWhenCalledAtPath(EMPTY_PATH, this.interaction, recursionTracker, this));\n        }\n        return this.returnExpression;\n    }\n}\n\nclass CatchClause extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new ParameterScope(parentScope, true);\n    }\n    parseNode(esTreeNode) {\n        const { body, param, type } = esTreeNode;\n        this.type = type;\n        if (param) {\n            this.param = new (this.scope.context.getNodeConstructor(param.type))(this, this.scope).parseNode(param);\n            this.param.declare('parameter', UNKNOWN_EXPRESSION);\n        }\n        this.body = new BlockStatement(this, this.scope.bodyScope).parseNode(body);\n        return super.parseNode(esTreeNode);\n    }\n}\nCatchClause.prototype.preventChildBlockScope = true;\n\nclass ChainExpression extends NodeBase {\n    // deoptimizations are not relevant as we are not caching values\n    deoptimizeCache() { }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        const literalValue = this.expression.getLiteralValueAtPathAsChainElement(path, recursionTracker, origin);\n        return literalValue === IS_SKIPPED_CHAIN ? undefined : literalValue;\n    }\n    hasEffects(context) {\n        return this.expression.hasEffectsAsChainElement(context) === true;\n    }\n    removeAnnotations(code) {\n        this.expression.removeAnnotations(code);\n    }\n    applyDeoptimizations() { }\n}\n\nclass ClassBodyScope extends ChildScope {\n    constructor(parent, classNode) {\n        const { context } = parent;\n        super(parent, context);\n        this.variables.set('this', (this.thisVariable = new LocalVariable('this', null, classNode, context, 'other')));\n        this.instanceScope = new ChildScope(this, context);\n        this.instanceScope.variables.set('this', new ThisVariable(context));\n    }\n    findLexicalBoundary() {\n        return this;\n    }\n}\n\nclass ClassBody extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new ClassBodyScope(parentScope, this.parent);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.scope.context.includeVariableInModule(this.scope.thisVariable);\n        for (const definition of this.body) {\n            definition.include(context, includeChildrenRecursively);\n        }\n    }\n    parseNode(esTreeNode) {\n        const body = (this.body = new Array(esTreeNode.body.length));\n        let index = 0;\n        for (const definition of esTreeNode.body) {\n            body[index++] = new (this.scope.context.getNodeConstructor(definition.type))(this, definition.static ? this.scope : this.scope.instanceScope).parseNode(definition);\n        }\n        return super.parseNode(esTreeNode);\n    }\n    applyDeoptimizations() { }\n}\n\nclass ClassExpression extends ClassNode {\n    render(code, options, { renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        super.render(code, options);\n        if (renderedSurroundingElement === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement) {\n            code.appendRight(this.start, '(');\n            code.prependLeft(this.end, ')');\n        }\n    }\n}\n\nclass MultiExpression extends ExpressionEntity {\n    constructor(expressions) {\n        super();\n        this.expressions = expressions;\n    }\n    deoptimizePath(path) {\n        for (const expression of this.expressions) {\n            expression.deoptimizePath(path);\n        }\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        return [\n            new MultiExpression(this.expressions.map(expression => expression.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin)[0])),\n            false\n        ];\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        for (const expression of this.expressions) {\n            if (expression.hasEffectsOnInteractionAtPath(path, interaction, context))\n                return true;\n        }\n        return false;\n    }\n}\n\nclass ConditionalExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.expressionsToBeDeoptimized = [];\n        this.usedBranch = null;\n    }\n    get isBranchResolutionAnalysed() {\n        return isFlagSet(this.flags, 65536 /* Flag.isBranchResolutionAnalysed */);\n    }\n    set isBranchResolutionAnalysed(value) {\n        this.flags = setFlag(this.flags, 65536 /* Flag.isBranchResolutionAnalysed */, value);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.consequent.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n        this.alternate.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizeCache() {\n        if (this.usedBranch !== null) {\n            const unusedBranch = this.usedBranch === this.consequent ? this.alternate : this.consequent;\n            this.usedBranch = null;\n            unusedBranch.deoptimizePath(UNKNOWN_PATH);\n            const { expressionsToBeDeoptimized } = this;\n            this.expressionsToBeDeoptimized = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizeCache();\n            }\n        }\n    }\n    deoptimizePath(path) {\n        const usedBranch = this.getUsedBranch();\n        if (usedBranch) {\n            usedBranch.deoptimizePath(path);\n        }\n        else {\n            this.consequent.deoptimizePath(path);\n            this.alternate.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return UnknownValue;\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return [\n                new MultiExpression([\n                    this.consequent.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin)[0],\n                    this.alternate.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin)[0]\n                ]),\n                false\n            ];\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n    }\n    hasEffects(context) {\n        if (this.test.hasEffects(context))\n            return true;\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch) {\n            return this.consequent.hasEffects(context) || this.alternate.hasEffects(context);\n        }\n        return usedBranch.hasEffects(context);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch) {\n            return (this.consequent.hasEffectsOnInteractionAtPath(path, interaction, context) ||\n                this.alternate.hasEffectsOnInteractionAtPath(path, interaction, context));\n        }\n        return usedBranch.hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        const usedBranch = this.getUsedBranch();\n        if (includeChildrenRecursively || this.test.shouldBeIncluded(context) || usedBranch === null) {\n            this.test.include(context, includeChildrenRecursively);\n            this.consequent.include(context, includeChildrenRecursively);\n            this.alternate.include(context, includeChildrenRecursively);\n        }\n        else {\n            usedBranch.include(context, includeChildrenRecursively);\n        }\n    }\n    includeCallArguments(context, parameters) {\n        const usedBranch = this.getUsedBranch();\n        if (usedBranch) {\n            usedBranch.includeCallArguments(context, parameters);\n        }\n        else {\n            this.consequent.includeCallArguments(context, parameters);\n            this.alternate.includeCallArguments(context, parameters);\n        }\n    }\n    removeAnnotations(code) {\n        this.test.removeAnnotations(code);\n    }\n    render(code, options, { isCalleeOfRenderedParent, preventASI, renderedParentType, renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        const usedBranch = this.getUsedBranch();\n        if (this.test.included) {\n            this.test.render(code, options, { renderedSurroundingElement });\n            this.consequent.render(code, options);\n            this.alternate.render(code, options);\n        }\n        else {\n            const colonPos = findFirstOccurrenceOutsideComment(code.original, ':', this.consequent.end);\n            const inclusionStart = findNonWhiteSpace(code.original, (this.consequent.included\n                ? findFirstOccurrenceOutsideComment(code.original, '?', this.test.end)\n                : colonPos) + 1);\n            if (preventASI) {\n                removeLineBreaks(code, inclusionStart, usedBranch.start);\n            }\n            code.remove(this.start, inclusionStart);\n            if (this.consequent.included) {\n                code.remove(colonPos, this.end);\n            }\n            this.test.removeAnnotations(code);\n            usedBranch.render(code, options, {\n                isCalleeOfRenderedParent,\n                preventASI: true,\n                renderedParentType: renderedParentType || this.parent.type,\n                renderedSurroundingElement: renderedSurroundingElement || this.parent.type\n            });\n        }\n    }\n    getUsedBranch() {\n        if (this.isBranchResolutionAnalysed) {\n            return this.usedBranch;\n        }\n        this.isBranchResolutionAnalysed = true;\n        const testValue = this.test.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this);\n        return typeof testValue === 'symbol'\n            ? null\n            : (this.usedBranch = testValue ? this.consequent : this.alternate);\n    }\n}\n\nclass ContinueStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.label) {\n            if (!context.ignore.labels.has(this.label.name))\n                return true;\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            if (!context.ignore.continues)\n                return true;\n            context.hasContinue = true;\n        }\n        context.brokenFlow = true;\n        return false;\n    }\n    include(context) {\n        this.included = true;\n        if (this.label) {\n            this.label.include();\n            context.includedLabels.add(this.label.name);\n        }\n        else {\n            context.hasContinue = true;\n        }\n        context.brokenFlow = true;\n    }\n}\n\nclass DebuggerStatement extends NodeBase {\n    hasEffects() {\n        return true;\n    }\n}\n\nclass Decorator extends NodeBase {\n    hasEffects(context) {\n        return (this.expression.hasEffects(context) ||\n            this.expression.hasEffectsOnInteractionAtPath(EMPTY_PATH, NODE_INTERACTION_UNKNOWN_CALL, context));\n    }\n}\n\nfunction hasLoopBodyEffects(context, body) {\n    const { brokenFlow, hasBreak, hasContinue, ignore } = context;\n    const { breaks, continues } = ignore;\n    ignore.breaks = true;\n    ignore.continues = true;\n    context.hasBreak = false;\n    context.hasContinue = false;\n    if (body.hasEffects(context))\n        return true;\n    ignore.breaks = breaks;\n    ignore.continues = continues;\n    context.hasBreak = hasBreak;\n    context.hasContinue = hasContinue;\n    context.brokenFlow = brokenFlow;\n    return false;\n}\nfunction includeLoopBody(context, body, includeChildrenRecursively) {\n    const { brokenFlow, hasBreak, hasContinue } = context;\n    context.hasBreak = false;\n    context.hasContinue = false;\n    body.include(context, includeChildrenRecursively, { asSingleStatement: true });\n    context.hasBreak = hasBreak;\n    context.hasContinue = hasContinue;\n    context.brokenFlow = brokenFlow;\n}\n\nclass DoWhileStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.test.hasEffects(context))\n            return true;\n        return hasLoopBodyEffects(context, this.body);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.test.include(context, includeChildrenRecursively);\n        includeLoopBody(context, this.body, includeChildrenRecursively);\n    }\n}\n\nclass EmptyStatement extends NodeBase {\n    hasEffects() {\n        return false;\n    }\n}\n\nclass ExportAllDeclaration extends NodeBase {\n    hasEffects() {\n        return false;\n    }\n    initialise() {\n        super.initialise();\n        this.scope.context.addExport(this);\n    }\n    render(code, _options, nodeRenderOptions) {\n        code.remove(nodeRenderOptions.start, nodeRenderOptions.end);\n    }\n    applyDeoptimizations() { }\n}\nExportAllDeclaration.prototype.needsBoundaries = true;\n\nclass ExportNamedDeclaration extends NodeBase {\n    bind() {\n        // Do not bind specifiers\n        this.declaration?.bind();\n    }\n    hasEffects(context) {\n        return !!this.declaration?.hasEffects(context);\n    }\n    initialise() {\n        super.initialise();\n        this.scope.context.addExport(this);\n    }\n    removeAnnotations(code) {\n        this.declaration?.removeAnnotations(code);\n    }\n    render(code, options, nodeRenderOptions) {\n        const { start, end } = nodeRenderOptions;\n        if (this.declaration === null) {\n            code.remove(start, end);\n        }\n        else {\n            code.remove(this.start, this.declaration.start);\n            this.declaration.render(code, options, { end, start });\n        }\n    }\n    applyDeoptimizations() { }\n}\nExportNamedDeclaration.prototype.needsBoundaries = true;\n\nclass ExportSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nclass ForInStatement extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        const { body, deoptimized, left, right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        if (left.hasEffectsAsAssignmentTarget(context, false) || right.hasEffects(context))\n            return true;\n        return hasLoopBodyEffects(context, body);\n    }\n    include(context, includeChildrenRecursively) {\n        const { body, deoptimized, left, right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        left.includeAsAssignmentTarget(context, includeChildrenRecursively || true, false);\n        right.include(context, includeChildrenRecursively);\n        includeLoopBody(context, body, includeChildrenRecursively);\n    }\n    initialise() {\n        super.initialise();\n        this.left.setAssignedValue(UNKNOWN_EXPRESSION);\n    }\n    render(code, options) {\n        this.left.render(code, options, NO_SEMICOLON);\n        this.right.render(code, options, NO_SEMICOLON);\n        // handle no space between \"in\" and the right side\n        if (code.original.charCodeAt(this.right.start - 1) === 110 /* n */) {\n            code.prependLeft(this.right.start, ' ');\n        }\n        this.body.render(code, options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.scope.context.requestTreeshakingPass();\n    }\n}\n\nclass ForOfStatement extends NodeBase {\n    get await() {\n        return isFlagSet(this.flags, 131072 /* Flag.await */);\n    }\n    set await(value) {\n        this.flags = setFlag(this.flags, 131072 /* Flag.await */, value);\n    }\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects() {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        // Placeholder until proper Symbol.Iterator support\n        return true;\n    }\n    include(context, includeChildrenRecursively) {\n        const { body, deoptimized, left, right } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        left.includeAsAssignmentTarget(context, includeChildrenRecursively || true, false);\n        right.include(context, includeChildrenRecursively);\n        includeLoopBody(context, body, includeChildrenRecursively);\n    }\n    initialise() {\n        super.initialise();\n        this.left.setAssignedValue(UNKNOWN_EXPRESSION);\n    }\n    render(code, options) {\n        this.left.render(code, options, NO_SEMICOLON);\n        this.right.render(code, options, NO_SEMICOLON);\n        // handle no space between \"of\" and the right side\n        if (code.original.charCodeAt(this.right.start - 1) === 102 /* f */) {\n            code.prependLeft(this.right.start, ' ');\n        }\n        this.body.render(code, options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.left.deoptimizePath(EMPTY_PATH);\n        this.right.deoptimizePath(UNKNOWN_PATH);\n        this.scope.context.requestTreeshakingPass();\n    }\n}\n\nclass ForStatement extends NodeBase {\n    createScope(parentScope) {\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        if (this.init?.hasEffects(context) ||\n            this.test?.hasEffects(context) ||\n            this.update?.hasEffects(context)) {\n            return true;\n        }\n        return hasLoopBodyEffects(context, this.body);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.init?.include(context, includeChildrenRecursively, { asSingleStatement: true });\n        this.test?.include(context, includeChildrenRecursively);\n        this.update?.include(context, includeChildrenRecursively);\n        includeLoopBody(context, this.body, includeChildrenRecursively);\n    }\n    render(code, options) {\n        this.init?.render(code, options, NO_SEMICOLON);\n        this.test?.render(code, options, NO_SEMICOLON);\n        this.update?.render(code, options, NO_SEMICOLON);\n        this.body.render(code, options);\n    }\n}\n\nclass FunctionExpression extends FunctionNode {\n    createScope(parentScope) {\n        super.createScope((this.idScope = new ChildScope(parentScope, parentScope.context)));\n    }\n    parseNode(esTreeNode) {\n        if (esTreeNode.id !== null) {\n            this.id = new Identifier(this, this.idScope).parseNode(esTreeNode.id);\n        }\n        return super.parseNode(esTreeNode);\n    }\n    onlyFunctionCallUsed() {\n        const isIIFE = this.parent.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.CallExpression &&\n            this.parent.callee === this &&\n            (this.id === null || this.id.variable.getOnlyFunctionCallUsed());\n        return isIIFE || super.onlyFunctionCallUsed();\n    }\n    render(code, options, { renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        super.render(code, options);\n        if (renderedSurroundingElement === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement) {\n            code.appendRight(this.start, '(');\n            code.prependLeft(this.end, ')');\n        }\n    }\n}\n\nclass TrackingScope extends BlockScope {\n    constructor() {\n        super(...arguments);\n        this.hoistedDeclarations = [];\n    }\n    addDeclaration(identifier, context, init, kind) {\n        this.hoistedDeclarations.push(identifier);\n        return super.addDeclaration(identifier, context, init, kind);\n    }\n}\n\nconst unset = Symbol('unset');\nclass IfStatement extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.testValue = unset;\n    }\n    deoptimizeCache() {\n        this.testValue = UnknownValue;\n    }\n    hasEffects(context) {\n        if (this.test.hasEffects(context)) {\n            return true;\n        }\n        const testValue = this.getTestValue();\n        if (typeof testValue === 'symbol') {\n            const { brokenFlow } = context;\n            if (this.consequent.hasEffects(context))\n                return true;\n            const consequentBrokenFlow = context.brokenFlow;\n            context.brokenFlow = brokenFlow;\n            if (this.alternate === null)\n                return false;\n            if (this.alternate.hasEffects(context))\n                return true;\n            context.brokenFlow = context.brokenFlow && consequentBrokenFlow;\n            return false;\n        }\n        return testValue ? this.consequent.hasEffects(context) : !!this.alternate?.hasEffects(context);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        if (includeChildrenRecursively) {\n            this.includeRecursively(includeChildrenRecursively, context);\n        }\n        else {\n            const testValue = this.getTestValue();\n            if (typeof testValue === 'symbol') {\n                this.includeUnknownTest(context);\n            }\n            else {\n                this.includeKnownTest(context, testValue);\n            }\n        }\n    }\n    parseNode(esTreeNode) {\n        this.consequent = new (this.scope.context.getNodeConstructor(esTreeNode.consequent.type))(this, (this.consequentScope = new TrackingScope(this.scope))).parseNode(esTreeNode.consequent);\n        if (esTreeNode.alternate) {\n            this.alternate = new (this.scope.context.getNodeConstructor(esTreeNode.alternate.type))(this, (this.alternateScope = new TrackingScope(this.scope))).parseNode(esTreeNode.alternate);\n        }\n        return super.parseNode(esTreeNode);\n    }\n    render(code, options) {\n        const { snippets: { getPropertyAccess } } = options;\n        // Note that unknown test values are always included\n        const testValue = this.getTestValue();\n        const hoistedDeclarations = [];\n        const includesIfElse = this.test.included;\n        const noTreeshake = !this.scope.context.options.treeshake;\n        if (includesIfElse) {\n            this.test.render(code, options);\n        }\n        else {\n            code.remove(this.start, this.consequent.start);\n        }\n        if (this.consequent.included && (noTreeshake || typeof testValue === 'symbol' || testValue)) {\n            this.consequent.render(code, options);\n        }\n        else {\n            code.overwrite(this.consequent.start, this.consequent.end, includesIfElse ? ';' : '');\n            hoistedDeclarations.push(...this.consequentScope.hoistedDeclarations);\n        }\n        if (this.alternate) {\n            if (this.alternate.included && (noTreeshake || typeof testValue === 'symbol' || !testValue)) {\n                if (includesIfElse) {\n                    if (code.original.charCodeAt(this.alternate.start - 1) === 101) {\n                        code.prependLeft(this.alternate.start, ' ');\n                    }\n                }\n                else {\n                    code.remove(this.consequent.end, this.alternate.start);\n                }\n                this.alternate.render(code, options);\n            }\n            else {\n                if (includesIfElse && this.shouldKeepAlternateBranch()) {\n                    code.overwrite(this.alternate.start, this.end, ';');\n                }\n                else {\n                    code.remove(this.consequent.end, this.end);\n                }\n                hoistedDeclarations.push(...this.alternateScope.hoistedDeclarations);\n            }\n        }\n        this.renderHoistedDeclarations(hoistedDeclarations, code, getPropertyAccess);\n    }\n    applyDeoptimizations() { }\n    getTestValue() {\n        if (this.testValue === unset) {\n            return (this.testValue = this.test.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this));\n        }\n        return this.testValue;\n    }\n    includeKnownTest(context, testValue) {\n        if (this.test.shouldBeIncluded(context)) {\n            this.test.include(context, false);\n        }\n        if (testValue && this.consequent.shouldBeIncluded(context)) {\n            this.consequent.include(context, false, { asSingleStatement: true });\n        }\n        if (!testValue && this.alternate?.shouldBeIncluded(context)) {\n            this.alternate.include(context, false, { asSingleStatement: true });\n        }\n    }\n    includeRecursively(includeChildrenRecursively, context) {\n        this.test.include(context, includeChildrenRecursively);\n        this.consequent.include(context, includeChildrenRecursively);\n        this.alternate?.include(context, includeChildrenRecursively);\n    }\n    includeUnknownTest(context) {\n        this.test.include(context, false);\n        const { brokenFlow } = context;\n        let consequentBrokenFlow = false;\n        if (this.consequent.shouldBeIncluded(context)) {\n            this.consequent.include(context, false, { asSingleStatement: true });\n            consequentBrokenFlow = context.brokenFlow;\n            context.brokenFlow = brokenFlow;\n        }\n        if (this.alternate?.shouldBeIncluded(context)) {\n            this.alternate.include(context, false, { asSingleStatement: true });\n            context.brokenFlow = context.brokenFlow && consequentBrokenFlow;\n        }\n    }\n    renderHoistedDeclarations(hoistedDeclarations, code, getPropertyAccess) {\n        const hoistedVariables = [\n            ...new Set(hoistedDeclarations.map(identifier => {\n                const variable = identifier.variable;\n                return variable.included ? variable.getName(getPropertyAccess) : '';\n            }))\n        ]\n            .filter(Boolean)\n            .join(', ');\n        if (hoistedVariables) {\n            const parentType = this.parent.type;\n            const needsBraces = parentType !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Program && parentType !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BlockStatement;\n            code.prependRight(this.start, `${needsBraces ? '{ ' : ''}var ${hoistedVariables}; `);\n            if (needsBraces) {\n                code.appendLeft(this.end, ` }`);\n            }\n        }\n    }\n    shouldKeepAlternateBranch() {\n        let currentParent = this.parent;\n        do {\n            if (currentParent instanceof IfStatement && currentParent.alternate) {\n                return true;\n            }\n            if (currentParent instanceof BlockStatement) {\n                return false;\n            }\n            currentParent = currentParent.parent;\n        } while (currentParent);\n        return false;\n    }\n}\n\nclass ImportAttribute extends NodeBase {\n}\n\nclass ImportDeclaration extends NodeBase {\n    // Do not bind specifiers or attributes\n    bind() { }\n    hasEffects() {\n        return false;\n    }\n    initialise() {\n        super.initialise();\n        this.scope.context.addImport(this);\n    }\n    render(code, _options, nodeRenderOptions) {\n        code.remove(nodeRenderOptions.start, nodeRenderOptions.end);\n    }\n    applyDeoptimizations() { }\n}\nImportDeclaration.prototype.needsBoundaries = true;\n\nclass ImportDefaultSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nfunction isReassignedExportsMember(variable, exportNamesByVariable) {\n    return (variable.renderBaseName !== null && exportNamesByVariable.has(variable) && variable.isReassigned);\n}\n\nclass VariableDeclarator extends NodeBase {\n    declareDeclarator(kind, isUsingDeclaration) {\n        this.isUsingDeclaration = isUsingDeclaration;\n        this.id.declare(kind, this.init || UNDEFINED_EXPRESSION);\n    }\n    deoptimizePath(path) {\n        this.id.deoptimizePath(path);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const initEffect = this.init?.hasEffects(context);\n        this.id.markDeclarationReached();\n        return initEffect || this.id.hasEffects(context) || this.isUsingDeclaration;\n    }\n    include(context, includeChildrenRecursively) {\n        const { deoptimized, id, init } = this;\n        if (!deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        init?.include(context, includeChildrenRecursively);\n        id.markDeclarationReached();\n        if (includeChildrenRecursively || id.shouldBeIncluded(context)) {\n            id.include(context, includeChildrenRecursively);\n        }\n    }\n    removeAnnotations(code) {\n        this.init?.removeAnnotations(code);\n    }\n    render(code, options) {\n        const { exportNamesByVariable, snippets: { _, getPropertyAccess } } = options;\n        const { end, id, init, start } = this;\n        const renderId = id.included || this.isUsingDeclaration;\n        if (renderId) {\n            id.render(code, options);\n        }\n        else {\n            const operatorPos = findFirstOccurrenceOutsideComment(code.original, '=', id.end);\n            code.remove(start, findNonWhiteSpace(code.original, operatorPos + 1));\n        }\n        if (init) {\n            if (id instanceof Identifier && init instanceof ClassExpression && !init.id) {\n                const renderedVariable = id.variable.getName(getPropertyAccess);\n                if (renderedVariable !== id.name) {\n                    code.appendLeft(init.start + 5, ` ${id.name}`);\n                }\n            }\n            init.render(code, options, renderId ? _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK : { renderedSurroundingElement: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement });\n        }\n        else if (id instanceof Identifier &&\n            isReassignedExportsMember(id.variable, exportNamesByVariable)) {\n            code.appendLeft(end, `${_}=${_}void 0`);\n        }\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        const { id, init } = this;\n        if (init && id instanceof Identifier && init instanceof ClassExpression && !init.id) {\n            const { name, variable } = id;\n            for (const accessedVariable of init.scope.accessedOutsideVariables.values()) {\n                if (accessedVariable !== variable) {\n                    accessedVariable.forbidName(name);\n                }\n            }\n        }\n    }\n}\n\nclass ImportExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.inlineNamespace = null;\n        this.attributes = null;\n        this.mechanism = null;\n        this.namespaceExportName = undefined;\n        this.resolution = null;\n        this.resolutionString = null;\n    }\n    // Do not bind attributes\n    bind() {\n        this.source.bind();\n    }\n    /**\n     * Get imported variables for deterministic usage, valid cases are:\n     *\n     * - `const { foo } = await import('bar')`.\n     * - `(await import('bar')).foo`\n     * - `import('bar').then(({ foo }) => {})`\n     *\n     * Returns empty array if it's side-effect only import.\n     * Returns undefined if it's not fully deterministic.\n     */\n    getDeterministicImportedNames() {\n        const parent1 = this.parent;\n        // Side-effect only: import('bar')\n        if (parent1 instanceof ExpressionStatement) {\n            return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n        }\n        if (parent1 instanceof AwaitExpression) {\n            const parent2 = parent1.parent;\n            // Side-effect only: await import('bar')\n            if (parent2 instanceof ExpressionStatement) {\n                return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            }\n            // Case 1: const { foo } = await import('bar')\n            if (parent2 instanceof VariableDeclarator) {\n                const declaration = parent2.id;\n                return declaration instanceof ObjectPattern\n                    ? getDeterministicObjectDestructure(declaration)\n                    : undefined;\n            }\n            // Case 2: (await import('bar')).foo\n            if (parent2 instanceof MemberExpression) {\n                const id = parent2.property;\n                if (!parent2.computed && id instanceof Identifier) {\n                    return [id.name];\n                }\n            }\n            return;\n        }\n        // Case 3: import('bar').then(({ foo }) => {})\n        if (parent1 instanceof MemberExpression) {\n            const callExpression = parent1.parent;\n            const property = parent1.property;\n            if (!(callExpression instanceof CallExpression) || !(property instanceof Identifier)) {\n                return;\n            }\n            const memberName = property.name;\n            // side-effect only, when only chaining .catch or .finally\n            if (callExpression.parent instanceof ExpressionStatement &&\n                ['catch', 'finally'].includes(memberName)) {\n                return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            }\n            if (memberName !== 'then')\n                return;\n            // Side-effect only: import('bar').then()\n            if (callExpression.arguments.length === 0) {\n                return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            }\n            const argument = callExpression.arguments[0];\n            if (callExpression.arguments.length !== 1 ||\n                !(argument instanceof ArrowFunctionExpression || argument instanceof FunctionExpression)) {\n                return;\n            }\n            // Side-effect only: import('bar').then(() => {})\n            if (argument.params.length === 0) {\n                return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            }\n            const declaration = argument.params[0];\n            if (argument.params.length === 1 && declaration instanceof ObjectPattern) {\n                return getDeterministicObjectDestructure(declaration);\n            }\n            return;\n        }\n    }\n    hasEffects() {\n        return true;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.included) {\n            this.included = true;\n            this.scope.context.includeDynamicImport(this);\n            this.scope.addAccessedDynamicImport(this);\n        }\n        this.source.include(context, includeChildrenRecursively);\n    }\n    initialise() {\n        super.initialise();\n        this.scope.context.addDynamicImport(this);\n    }\n    parseNode(esTreeNode) {\n        this.sourceAstNode = esTreeNode.source;\n        return super.parseNode(esTreeNode);\n    }\n    render(code, options) {\n        const { snippets: { _, getDirectReturnFunction, getObject, getPropertyAccess } } = options;\n        if (this.inlineNamespace) {\n            const [left, right] = getDirectReturnFunction([], {\n                functionReturn: true,\n                lineBreakIndent: null,\n                name: null\n            });\n            code.overwrite(this.start, this.end, `Promise.resolve().then(${left}${this.inlineNamespace.getName(getPropertyAccess)}${right})`);\n            return;\n        }\n        if (this.mechanism) {\n            code.overwrite(this.start, findFirstOccurrenceOutsideComment(code.original, '(', this.start + 6) + 1, this.mechanism.left);\n            code.overwrite(this.end - 1, this.end, this.mechanism.right);\n        }\n        if (this.resolutionString) {\n            code.overwrite(this.source.start, this.source.end, this.resolutionString);\n            if (this.namespaceExportName) {\n                const [left, right] = getDirectReturnFunction(['n'], {\n                    functionReturn: true,\n                    lineBreakIndent: null,\n                    name: null\n                });\n                code.prependLeft(this.end, `.then(${left}n.${this.namespaceExportName}${right})`);\n            }\n        }\n        else {\n            this.source.render(code, options);\n        }\n        if (this.attributes !== true) {\n            if (this.options) {\n                code.overwrite(this.source.end, this.end - 1, '', { contentOnly: true });\n            }\n            if (this.attributes) {\n                code.appendLeft(this.end - 1, `,${_}${getObject([['assert', this.attributes]], {\n                    lineBreakIndent: null\n                })}`);\n            }\n        }\n    }\n    setExternalResolution(exportMode, resolution, options, snippets, pluginDriver, accessedGlobalsByScope, resolutionString, namespaceExportName, attributes) {\n        const { format } = options;\n        this.inlineNamespace = null;\n        this.resolution = resolution;\n        this.resolutionString = resolutionString;\n        this.namespaceExportName = namespaceExportName;\n        this.attributes = attributes;\n        const accessedGlobals = [...(accessedImportGlobals[format] || [])];\n        let helper;\n        ({ helper, mechanism: this.mechanism } = this.getDynamicImportMechanismAndHelper(resolution, exportMode, options, snippets, pluginDriver));\n        if (helper) {\n            accessedGlobals.push(helper);\n        }\n        if (accessedGlobals.length > 0) {\n            this.scope.addAccessedGlobals(accessedGlobals, accessedGlobalsByScope);\n        }\n    }\n    setInternalResolution(inlineNamespace) {\n        this.inlineNamespace = inlineNamespace;\n    }\n    applyDeoptimizations() { }\n    getDynamicImportMechanismAndHelper(resolution, exportMode, { compact, dynamicImportInCjs, format, generatedCode: { arrowFunctions }, interop }, { _, getDirectReturnFunction, getDirectReturnIifeLeft }, pluginDriver) {\n        const mechanism = pluginDriver.hookFirstSync('renderDynamicImport', [\n            {\n                customResolution: typeof this.resolution === 'string' ? this.resolution : null,\n                format,\n                moduleId: this.scope.context.module.id,\n                targetModuleId: this.resolution && typeof this.resolution !== 'string' ? this.resolution.id : null\n            }\n        ]);\n        if (mechanism) {\n            return { helper: null, mechanism };\n        }\n        const hasDynamicTarget = !this.resolution || typeof this.resolution === 'string';\n        switch (format) {\n            case 'cjs': {\n                if (dynamicImportInCjs &&\n                    (!resolution || typeof resolution === 'string' || resolution instanceof ExternalModule)) {\n                    return { helper: null, mechanism: null };\n                }\n                const helper = getInteropHelper(resolution, exportMode, interop);\n                let left = `require(`;\n                let right = `)`;\n                if (helper) {\n                    left = `/*#__PURE__*/${helper}(${left}`;\n                    right += ')';\n                }\n                const [functionLeft, functionRight] = getDirectReturnFunction([], {\n                    functionReturn: true,\n                    lineBreakIndent: null,\n                    name: null\n                });\n                left = `Promise.resolve().then(${functionLeft}${left}`;\n                right += `${functionRight})`;\n                if (!arrowFunctions && hasDynamicTarget) {\n                    left = getDirectReturnIifeLeft(['t'], `${left}t${right}`, {\n                        needsArrowReturnParens: false,\n                        needsWrappedFunction: true\n                    });\n                    right = ')';\n                }\n                return {\n                    helper,\n                    mechanism: { left, right }\n                };\n            }\n            case 'amd': {\n                const resolve = compact ? 'c' : 'resolve';\n                const reject = compact ? 'e' : 'reject';\n                const helper = getInteropHelper(resolution, exportMode, interop);\n                const [resolveLeft, resolveRight] = getDirectReturnFunction(['m'], {\n                    functionReturn: false,\n                    lineBreakIndent: null,\n                    name: null\n                });\n                const resolveNamespace = helper\n                    ? `${resolveLeft}${resolve}(/*#__PURE__*/${helper}(m))${resolveRight}`\n                    : resolve;\n                const [handlerLeft, handlerRight] = getDirectReturnFunction([resolve, reject], {\n                    functionReturn: false,\n                    lineBreakIndent: null,\n                    name: null\n                });\n                let left = `new Promise(${handlerLeft}require([`;\n                let right = `],${_}${resolveNamespace},${_}${reject})${handlerRight})`;\n                if (!arrowFunctions && hasDynamicTarget) {\n                    left = getDirectReturnIifeLeft(['t'], `${left}t${right}`, {\n                        needsArrowReturnParens: false,\n                        needsWrappedFunction: true\n                    });\n                    right = ')';\n                }\n                return {\n                    helper,\n                    mechanism: { left, right }\n                };\n            }\n            case 'system': {\n                return {\n                    helper: null,\n                    mechanism: {\n                        left: 'module.import(',\n                        right: ')'\n                    }\n                };\n            }\n        }\n        return { helper: null, mechanism: null };\n    }\n}\nfunction getInteropHelper(resolution, exportMode, interop) {\n    return exportMode === 'external'\n        ? namespaceInteropHelpersByInteropType[interop(resolution instanceof ExternalModule ? resolution.id : null)]\n        : exportMode === 'default'\n            ? INTEROP_NAMESPACE_DEFAULT_ONLY_VARIABLE\n            : null;\n}\nconst accessedImportGlobals = {\n    amd: ['require'],\n    cjs: ['require'],\n    system: ['module']\n};\nfunction getDeterministicObjectDestructure(objectPattern) {\n    const variables = [];\n    for (const property of objectPattern.properties) {\n        if (property.type === 'RestElement' || property.computed || property.key.type !== 'Identifier')\n            return;\n        variables.push(property.key.name);\n    }\n    return variables;\n}\n\nclass ImportNamespaceSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nclass ImportSpecifier extends NodeBase {\n    applyDeoptimizations() { }\n}\n\nclass JSXIdentifier extends IdentifierBase {\n    constructor() {\n        super(...arguments);\n        this.isNativeElement = false;\n    }\n    bind() {\n        const type = this.getType();\n        if (type === 0 /* IdentifierType.Reference */) {\n            this.variable = this.scope.findVariable(this.name);\n            this.variable.addReference(this);\n        }\n        else if (type === 1 /* IdentifierType.NativeElementName */) {\n            this.isNativeElement = true;\n        }\n    }\n    render(code, { snippets: { getPropertyAccess }, useOriginalName }) {\n        if (this.variable) {\n            const name = this.variable.getName(getPropertyAccess, useOriginalName);\n            if (name !== this.name) {\n                code.overwrite(this.start, this.end, name, {\n                    contentOnly: true,\n                    storeName: true\n                });\n            }\n        }\n        else if (this.isNativeElement &&\n            this.scope.context.options.jsx.mode !== 'preserve') {\n            code.update(this.start, this.end, JSON.stringify(this.name));\n        }\n    }\n    getType() {\n        switch (this.parent.type) {\n            case 'JSXOpeningElement':\n            case 'JSXClosingElement': {\n                return this.name.startsWith(this.name.charAt(0).toUpperCase())\n                    ? 0 /* IdentifierType.Reference */\n                    : 1 /* IdentifierType.NativeElementName */;\n            }\n            case 'JSXMemberExpression': {\n                return this.parent.object === this\n                    ? 0 /* IdentifierType.Reference */\n                    : 2 /* IdentifierType.Other */;\n            }\n            case 'JSXAttribute':\n            case 'JSXNamespacedName': {\n                return 2 /* IdentifierType.Other */;\n            }\n            default: {\n                /* istanbul ignore next */\n                throw new Error(`Unexpected parent node type for JSXIdentifier: ${this.parent.type}`);\n            }\n        }\n    }\n}\n\nclass JSXAttribute extends NodeBase {\n    render(code, options, { jsxMode } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        super.render(code, options);\n        if (['classic', 'automatic'].includes(jsxMode)) {\n            const { name, value } = this;\n            const key = name instanceof JSXIdentifier ? name.name : `${name.namespace.name}:${name.name.name}`;\n            if (!(jsxMode === 'automatic' && key === 'key')) {\n                const safeKey = stringifyObjectKeyIfNeeded(key);\n                if (key !== safeKey) {\n                    code.overwrite(name.start, name.end, safeKey, { contentOnly: true });\n                }\n                if (value) {\n                    code.overwrite(name.end, value.start, ': ', { contentOnly: true });\n                }\n                else {\n                    code.appendLeft(name.end, ': true');\n                }\n            }\n        }\n    }\n}\n\nclass JSXClosingBase extends NodeBase {\n    render(code, options) {\n        const { mode } = this.scope.context.options.jsx;\n        if (mode !== 'preserve') {\n            code.overwrite(this.start, this.end, ')', { contentOnly: true });\n        }\n        else {\n            super.render(code, options);\n        }\n    }\n}\n\nclass JSXClosingElement extends JSXClosingBase {\n}\n\nclass JSXClosingFragment extends JSXClosingBase {\n}\n\nclass JSXSpreadAttribute extends NodeBase {\n    render(code, options) {\n        this.argument.render(code, options);\n        const { mode } = this.scope.context.options.jsx;\n        if (mode !== 'preserve') {\n            code.overwrite(this.start, this.argument.start, '', { contentOnly: true });\n            code.overwrite(this.argument.end, this.end, '', { contentOnly: true });\n        }\n    }\n}\n\nclass JSXEmptyExpression extends NodeBase {\n}\n\nclass JSXExpressionContainer extends NodeBase {\n    render(code, options) {\n        const { mode } = this.scope.context.options.jsx;\n        if (mode !== 'preserve') {\n            code.remove(this.start, this.expression.start);\n            code.remove(this.expression.end, this.end);\n        }\n        this.expression.render(code, options);\n    }\n}\n\nfunction getRenderedJsxChildren(children) {\n    let renderedChildren = 0;\n    for (const child of children) {\n        if (!(child instanceof JSXExpressionContainer && child.expression instanceof JSXEmptyExpression)) {\n            renderedChildren++;\n        }\n    }\n    return renderedChildren;\n}\n\nfunction getAndIncludeFactoryVariable(factory, preserve, importSource, node) {\n    const [baseName, nestedName] = factory.split('.');\n    let factoryVariable;\n    if (importSource) {\n        factoryVariable = node.scope.context.getImportedJsxFactoryVariable(nestedName ? 'default' : baseName, node.start, importSource);\n        if (preserve) {\n            // This pretends we are accessing an included global variable of the same name\n            const globalVariable = node.scope.findGlobal(baseName);\n            globalVariable.include();\n            // This excludes this variable from renaming\n            factoryVariable.globalName = baseName;\n        }\n    }\n    else {\n        factoryVariable = node.scope.findGlobal(baseName);\n    }\n    node.scope.context.includeVariableInModule(factoryVariable);\n    if (factoryVariable instanceof LocalVariable) {\n        factoryVariable.consolidateInitializers();\n        factoryVariable.addUsedPlace(node);\n        node.scope.context.requestTreeshakingPass();\n    }\n    return factoryVariable;\n}\n\nclass JSXElementBase extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.factoryVariable = null;\n        this.factory = null;\n    }\n    initialise() {\n        super.initialise();\n        const { importSource } = (this.jsxMode = this.getRenderingMode());\n        if (importSource) {\n            this.scope.context.addImportSource(importSource);\n        }\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.included) {\n            const { factory, importSource, mode } = this.jsxMode;\n            if (factory) {\n                this.factory = factory;\n                this.factoryVariable = getAndIncludeFactoryVariable(factory, mode === 'preserve', importSource, this);\n            }\n        }\n        super.include(context, includeChildrenRecursively);\n    }\n    applyDeoptimizations() { }\n    getRenderingMode() {\n        const jsx = this.scope.context.options.jsx;\n        const { mode, factory, importSource } = jsx;\n        if (mode === 'automatic') {\n            return {\n                factory: getRenderedJsxChildren(this.children) > 1 ? 'jsxs' : 'jsx',\n                importSource: jsx.jsxImportSource,\n                mode\n            };\n        }\n        return { factory, importSource, mode };\n    }\n    renderChildren(code, options, openingEnd) {\n        const { children } = this;\n        let hasMultipleChildren = false;\n        let childrenEnd = openingEnd;\n        let firstChild = null;\n        for (const child of children) {\n            if (child instanceof JSXExpressionContainer &&\n                child.expression instanceof JSXEmptyExpression) {\n                code.remove(childrenEnd, child.end);\n            }\n            else {\n                code.appendLeft(childrenEnd, ', ');\n                child.render(code, options);\n                if (firstChild) {\n                    hasMultipleChildren = true;\n                }\n                else {\n                    firstChild = child;\n                }\n            }\n            childrenEnd = child.end;\n        }\n        return { childrenEnd, firstChild, hasMultipleChildren };\n    }\n}\n\nclass JSXElement extends JSXElementBase {\n    render(code, options) {\n        switch (this.jsxMode.mode) {\n            case 'classic': {\n                this.renderClassicMode(code, options);\n                break;\n            }\n            case 'automatic': {\n                this.renderAutomaticMode(code, options);\n                break;\n            }\n            default: {\n                super.render(code, options);\n            }\n        }\n    }\n    getRenderingMode() {\n        const jsx = this.scope.context.options.jsx;\n        const { mode, factory, importSource } = jsx;\n        if (mode === 'automatic') {\n            // In the case there is a key after a spread attribute, we fall back to\n            // classic mode, see https://github.com/facebook/react/issues/20031#issuecomment-710346866\n            // for reasoning.\n            let hasSpread = false;\n            for (const attribute of this.openingElement.attributes) {\n                if (attribute instanceof JSXSpreadAttribute) {\n                    hasSpread = true;\n                }\n                else if (hasSpread && attribute.name.name === 'key') {\n                    return { factory, importSource, mode: 'classic' };\n                }\n            }\n        }\n        return super.getRenderingMode();\n    }\n    renderClassicMode(code, options) {\n        const { snippets: { getPropertyAccess }, useOriginalName } = options;\n        const { closingElement, end, factory, factoryVariable, openingElement: { end: openingEnd, selfClosing } } = this;\n        const [, ...nestedName] = factory.split('.');\n        const { firstAttribute, hasAttributes, hasSpread, inObject, previousEnd } = this.renderAttributes(code, options, [factoryVariable.getName(getPropertyAccess, useOriginalName), ...nestedName].join('.'), false);\n        this.wrapAttributes(code, inObject, hasAttributes, hasSpread, firstAttribute, 'null', previousEnd);\n        this.renderChildren(code, options, openingEnd);\n        if (selfClosing) {\n            code.appendLeft(end, ')');\n        }\n        else {\n            closingElement.render(code, options);\n        }\n    }\n    renderAutomaticMode(code, options) {\n        const { snippets: { getPropertyAccess }, useOriginalName } = options;\n        const { closingElement, end, factoryVariable, openingElement: { end: openindEnd, selfClosing } } = this;\n        let { firstAttribute, hasAttributes, hasSpread, inObject, keyAttribute, previousEnd } = this.renderAttributes(code, options, factoryVariable.getName(getPropertyAccess, useOriginalName), true);\n        const { firstChild, hasMultipleChildren, childrenEnd } = this.renderChildren(code, options, openindEnd);\n        if (firstChild) {\n            code.prependRight(firstChild.start, `children: ${hasMultipleChildren ? '[' : ''}`);\n            if (!inObject) {\n                code.prependRight(firstChild.start, '{ ');\n                inObject = true;\n            }\n            previousEnd = closingElement.start;\n            if (hasMultipleChildren) {\n                code.appendLeft(previousEnd, ']');\n            }\n        }\n        this.wrapAttributes(code, inObject, hasAttributes || !!firstChild, hasSpread, firstAttribute || firstChild, '{}', childrenEnd);\n        if (keyAttribute) {\n            const { value } = keyAttribute;\n            // This will appear to the left of the moved code...\n            code.appendLeft(childrenEnd, ', ');\n            if (value) {\n                code.move(value.start, value.end, childrenEnd);\n            }\n            else {\n                code.appendLeft(childrenEnd, 'true');\n            }\n        }\n        if (selfClosing) {\n            // Moving the key attribute will also move the parenthesis to the right position\n            code.appendLeft(keyAttribute?.value?.end || end, ')');\n        }\n        else {\n            closingElement.render(code, options);\n        }\n    }\n    renderAttributes(code, options, factoryName, extractKeyAttribute) {\n        const { jsxMode: { mode }, openingElement } = this;\n        const { attributes, end: openingEnd, start: openingStart, name: { start: nameStart, end: nameEnd } } = openingElement;\n        code.update(openingStart, nameStart, `/*#__PURE__*/${factoryName}(`);\n        openingElement.render(code, options, { jsxMode: mode });\n        let keyAttribute = null;\n        let hasSpread = false;\n        let inObject = false;\n        let previousEnd = nameEnd;\n        let hasAttributes = false;\n        let firstAttribute = null;\n        for (const attribute of attributes) {\n            if (attribute instanceof JSXAttribute) {\n                if (extractKeyAttribute && attribute.name.name === 'key') {\n                    keyAttribute = attribute;\n                    code.remove(previousEnd, attribute.value?.start || attribute.end);\n                    continue;\n                }\n                code.appendLeft(previousEnd, ',');\n                if (!inObject) {\n                    code.prependRight(attribute.start, '{ ');\n                    inObject = true;\n                }\n                hasAttributes = true;\n            }\n            else {\n                if (inObject) {\n                    if (hasAttributes) {\n                        code.appendLeft(previousEnd, ' ');\n                    }\n                    code.appendLeft(previousEnd, '},');\n                    inObject = false;\n                }\n                else {\n                    code.appendLeft(previousEnd, ',');\n                }\n                hasSpread = true;\n            }\n            previousEnd = attribute.end;\n            if (!firstAttribute) {\n                firstAttribute = attribute;\n            }\n        }\n        code.remove(attributes.at(-1)?.end || previousEnd, openingEnd);\n        return { firstAttribute, hasAttributes, hasSpread, inObject, keyAttribute, previousEnd };\n    }\n    wrapAttributes(code, inObject, hasAttributes, hasSpread, firstAttribute, missingAttributesFallback, attributesEnd) {\n        if (inObject) {\n            code.appendLeft(attributesEnd, ' }');\n        }\n        if (hasSpread) {\n            if (hasAttributes) {\n                const { start } = firstAttribute;\n                if (firstAttribute instanceof JSXSpreadAttribute) {\n                    code.prependRight(start, '{}, ');\n                }\n                code.prependRight(start, 'Object.assign(');\n                code.appendLeft(attributesEnd, ')');\n            }\n        }\n        else if (!hasAttributes) {\n            code.appendLeft(attributesEnd, `, ${missingAttributesFallback}`);\n        }\n    }\n}\n\nclass JSXFragment extends JSXElementBase {\n    render(code, options) {\n        switch (this.jsxMode.mode) {\n            case 'classic': {\n                this.renderClassicMode(code, options);\n                break;\n            }\n            case 'automatic': {\n                this.renderAutomaticMode(code, options);\n                break;\n            }\n            default: {\n                super.render(code, options);\n            }\n        }\n    }\n    renderClassicMode(code, options) {\n        const { snippets: { getPropertyAccess }, useOriginalName } = options;\n        const { closingFragment, factory, factoryVariable, openingFragment, start } = this;\n        const [, ...nestedName] = factory.split('.');\n        openingFragment.render(code, options);\n        code.prependRight(start, `/*#__PURE__*/${[\n            factoryVariable.getName(getPropertyAccess, useOriginalName),\n            ...nestedName\n        ].join('.')}(`);\n        code.appendLeft(openingFragment.end, ', null');\n        this.renderChildren(code, options, openingFragment.end);\n        closingFragment.render(code, options);\n    }\n    renderAutomaticMode(code, options) {\n        const { snippets: { getPropertyAccess }, useOriginalName } = options;\n        const { closingFragment, factoryVariable, openingFragment, start } = this;\n        openingFragment.render(code, options);\n        code.prependRight(start, `/*#__PURE__*/${factoryVariable.getName(getPropertyAccess, useOriginalName)}(`);\n        const { firstChild, hasMultipleChildren, childrenEnd } = this.renderChildren(code, options, openingFragment.end);\n        if (firstChild) {\n            code.prependRight(firstChild.start, `{ children: ${hasMultipleChildren ? '[' : ''}`);\n            if (hasMultipleChildren) {\n                code.appendLeft(closingFragment.start, ']');\n            }\n            code.appendLeft(childrenEnd, ' }');\n        }\n        else {\n            code.appendLeft(openingFragment.end, ', {}');\n        }\n        closingFragment.render(code, options);\n    }\n}\n\nclass JSXMemberExpression extends NodeBase {\n}\n\nclass JSXNamespacedName extends NodeBase {\n}\n\nclass JSXOpeningElement extends NodeBase {\n    render(code, options, { jsxMode = this.scope.context.options.jsx.mode } = {}) {\n        this.name.render(code, options);\n        for (const attribute of this.attributes) {\n            attribute.render(code, options, { jsxMode });\n        }\n    }\n}\n\nclass JSXOpeningFragment extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.fragment = null;\n        this.fragmentVariable = null;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.included) {\n            const jsx = this.scope.context.options.jsx;\n            if (jsx.mode === 'automatic') {\n                this.fragment = 'Fragment';\n                this.fragmentVariable = getAndIncludeFactoryVariable('Fragment', false, jsx.jsxImportSource, this);\n            }\n            else {\n                const { fragment, importSource, mode } = jsx;\n                if (fragment != null) {\n                    this.fragment = fragment;\n                    this.fragmentVariable = getAndIncludeFactoryVariable(fragment, mode === 'preserve', importSource, this);\n                }\n            }\n        }\n        super.include(context, includeChildrenRecursively);\n    }\n    render(code, options) {\n        const { mode } = this.scope.context.options.jsx;\n        if (mode !== 'preserve') {\n            const { snippets: { getPropertyAccess }, useOriginalName } = options;\n            const [, ...nestedFragment] = this.fragment.split('.');\n            const fragment = [\n                this.fragmentVariable.getName(getPropertyAccess, useOriginalName),\n                ...nestedFragment\n            ].join('.');\n            code.update(this.start, this.end, fragment);\n        }\n    }\n}\n\nclass JSXSpreadChild extends NodeBase {\n    render(code, options) {\n        super.render(code, options);\n        const { mode } = this.scope.context.options.jsx;\n        if (mode !== 'preserve') {\n            code.overwrite(this.start, this.expression.start, '...', { contentOnly: true });\n            code.overwrite(this.expression.end, this.end, '', { contentOnly: true });\n        }\n    }\n}\n\nclass JSXText extends NodeBase {\n    render(code) {\n        const { mode } = this.scope.context.options.jsx;\n        if (mode !== 'preserve') {\n            code.overwrite(this.start, this.end, JSON.stringify(this.value), {\n                contentOnly: true\n            });\n        }\n    }\n}\n\nclass LabeledStatement extends NodeBase {\n    hasEffects(context) {\n        const { brokenFlow, includedLabels } = context;\n        context.ignore.labels.add(this.label.name);\n        context.includedLabels = new Set();\n        let bodyHasEffects = false;\n        if (this.body.hasEffects(context)) {\n            bodyHasEffects = true;\n        }\n        else {\n            context.ignore.labels.delete(this.label.name);\n            if (context.includedLabels.has(this.label.name)) {\n                context.includedLabels.delete(this.label.name);\n                context.brokenFlow = brokenFlow;\n            }\n        }\n        context.includedLabels = new Set([...includedLabels, ...context.includedLabels]);\n        return bodyHasEffects;\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        const { brokenFlow, includedLabels } = context;\n        context.includedLabels = new Set();\n        this.body.include(context, includeChildrenRecursively);\n        if (includeChildrenRecursively || context.includedLabels.has(this.label.name)) {\n            this.label.include();\n            context.includedLabels.delete(this.label.name);\n            context.brokenFlow = brokenFlow;\n        }\n        context.includedLabels = new Set([...includedLabels, ...context.includedLabels]);\n    }\n    render(code, options) {\n        if (this.label.included) {\n            this.label.render(code, options);\n        }\n        else {\n            code.remove(this.start, findNonWhiteSpace(code.original, findFirstOccurrenceOutsideComment(code.original, ':', this.label.end) + 1));\n        }\n        this.body.render(code, options);\n    }\n}\n\nclass LogicalExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        // We collect deoptimization information if usedBranch !== null\n        this.expressionsToBeDeoptimized = [];\n        this.usedBranch = null;\n    }\n    //private isBranchResolutionAnalysed = false;\n    get isBranchResolutionAnalysed() {\n        return isFlagSet(this.flags, 65536 /* Flag.isBranchResolutionAnalysed */);\n    }\n    set isBranchResolutionAnalysed(value) {\n        this.flags = setFlag(this.flags, 65536 /* Flag.isBranchResolutionAnalysed */, value);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.left.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n        this.right.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizeCache() {\n        if (this.usedBranch) {\n            const unusedBranch = this.usedBranch === this.left ? this.right : this.left;\n            this.usedBranch = null;\n            unusedBranch.deoptimizePath(UNKNOWN_PATH);\n            const { scope: { context }, expressionsToBeDeoptimized } = this;\n            this.expressionsToBeDeoptimized = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n            for (const expression of expressionsToBeDeoptimized) {\n                expression.deoptimizeCache();\n            }\n            // Request another pass because we need to ensure \"include\" runs again if\n            // it is rendered\n            context.requestTreeshakingPass();\n        }\n    }\n    deoptimizePath(path) {\n        const usedBranch = this.getUsedBranch();\n        if (usedBranch) {\n            usedBranch.deoptimizePath(path);\n        }\n        else {\n            this.left.deoptimizePath(path);\n            this.right.deoptimizePath(path);\n        }\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return UnknownValue;\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch)\n            return [\n                new MultiExpression([\n                    this.left.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin)[0],\n                    this.right.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin)[0]\n                ]),\n                false\n            ];\n        this.expressionsToBeDeoptimized.push(origin);\n        return usedBranch.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n    }\n    hasEffects(context) {\n        if (this.left.hasEffects(context)) {\n            return true;\n        }\n        if (this.getUsedBranch() !== this.left) {\n            return this.right.hasEffects(context);\n        }\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        const usedBranch = this.getUsedBranch();\n        if (!usedBranch) {\n            return (this.left.hasEffectsOnInteractionAtPath(path, interaction, context) ||\n                this.right.hasEffectsOnInteractionAtPath(path, interaction, context));\n        }\n        return usedBranch.hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        const usedBranch = this.getUsedBranch();\n        if (includeChildrenRecursively ||\n            (usedBranch === this.right && this.left.shouldBeIncluded(context)) ||\n            !usedBranch) {\n            this.left.include(context, includeChildrenRecursively);\n            this.right.include(context, includeChildrenRecursively);\n        }\n        else {\n            usedBranch.include(context, includeChildrenRecursively);\n        }\n    }\n    removeAnnotations(code) {\n        this.left.removeAnnotations(code);\n    }\n    render(code, options, { isCalleeOfRenderedParent, preventASI, renderedParentType, renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        if (!this.left.included || !this.right.included) {\n            const operatorPos = findFirstOccurrenceOutsideComment(code.original, this.operator, this.left.end);\n            if (this.right.included) {\n                const removePos = findNonWhiteSpace(code.original, operatorPos + 2);\n                code.remove(this.start, removePos);\n                if (preventASI) {\n                    removeLineBreaks(code, removePos, this.right.start);\n                }\n                this.left.removeAnnotations(code);\n            }\n            else {\n                code.remove(findLastWhiteSpaceReverse(code.original, this.left.end, operatorPos), this.end);\n            }\n            this.getUsedBranch().render(code, options, {\n                isCalleeOfRenderedParent,\n                preventASI,\n                renderedParentType: renderedParentType || this.parent.type,\n                renderedSurroundingElement: renderedSurroundingElement || this.parent.type\n            });\n        }\n        else {\n            this.left.render(code, options, {\n                preventASI,\n                renderedSurroundingElement\n            });\n            this.right.render(code, options);\n        }\n    }\n    getUsedBranch() {\n        if (!this.isBranchResolutionAnalysed) {\n            this.isBranchResolutionAnalysed = true;\n            const leftValue = this.left.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this);\n            if (typeof leftValue === 'symbol') {\n                return null;\n            }\n            else {\n                this.usedBranch =\n                    (this.operator === '||' && leftValue) ||\n                        (this.operator === '&&' && !leftValue) ||\n                        (this.operator === '??' && leftValue != null)\n                        ? this.left\n                        : this.right;\n            }\n        }\n        return this.usedBranch;\n    }\n}\n\nclass NewExpression extends NodeBase {\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        for (const argument of this.arguments) {\n            if (argument.hasEffects(context))\n                return true;\n        }\n        if (this.annotationPure) {\n            return false;\n        }\n        return (this.callee.hasEffects(context) ||\n            this.callee.hasEffectsOnInteractionAtPath(EMPTY_PATH, this.interaction, context));\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return path.length > 0 || type !== INTERACTION_ACCESSED;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (includeChildrenRecursively) {\n            super.include(context, includeChildrenRecursively);\n        }\n        else {\n            this.included = true;\n            this.callee.include(context, false);\n        }\n        this.callee.includeCallArguments(context, this.arguments);\n    }\n    initialise() {\n        super.initialise();\n        this.interaction = {\n            args: [null, ...this.arguments],\n            type: INTERACTION_CALLED,\n            withNew: true\n        };\n        if (this.annotations &&\n            this.scope.context.options.treeshake.annotations) {\n            this.annotationPure = this.annotations.some(comment => comment.type === 'pure');\n        }\n    }\n    render(code, options) {\n        this.callee.render(code, options);\n        renderCallArguments(code, options, this);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.callee.deoptimizeArgumentsOnInteractionAtPath(this.interaction, EMPTY_PATH, SHARED_RECURSION_TRACKER);\n        this.scope.context.requestTreeshakingPass();\n    }\n}\n\nclass ObjectExpression extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.objectEntity = null;\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.getObjectEntity().deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizeCache() {\n        this.getObjectEntity().deoptimizeAllProperties();\n    }\n    deoptimizePath(path) {\n        this.getObjectEntity().deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.getObjectEntity().getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return this.getObjectEntity().hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    render(code, options, { renderedSurroundingElement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        super.render(code, options);\n        if (renderedSurroundingElement === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement ||\n            renderedSurroundingElement === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ArrowFunctionExpression) {\n            code.appendRight(this.start, '(');\n            code.prependLeft(this.end, ')');\n        }\n    }\n    applyDeoptimizations() { }\n    getObjectEntity() {\n        if (this.objectEntity !== null) {\n            return this.objectEntity;\n        }\n        let prototype = OBJECT_PROTOTYPE;\n        const properties = [];\n        for (const property of this.properties) {\n            if (property instanceof SpreadElement) {\n                properties.push({ key: UnknownKey, kind: 'init', property });\n                continue;\n            }\n            let key;\n            if (property.computed) {\n                const keyValue = property.key.getLiteralValueAtPath(EMPTY_PATH, SHARED_RECURSION_TRACKER, this);\n                if (typeof keyValue === 'symbol') {\n                    properties.push({ key: UnknownKey, kind: property.kind, property });\n                    continue;\n                }\n                else {\n                    key = String(keyValue);\n                }\n            }\n            else {\n                key =\n                    property.key instanceof Identifier\n                        ? property.key.name\n                        : String(property.key.value);\n                if (key === '__proto__' && property.kind === 'init') {\n                    prototype =\n                        property.value instanceof Literal && property.value.value === null\n                            ? null\n                            : property.value;\n                    continue;\n                }\n            }\n            properties.push({ key, kind: property.kind, property });\n        }\n        return (this.objectEntity = new ObjectEntity(properties, prototype));\n    }\n}\n\nclass PanicError extends NodeBase {\n    initialise() {\n        const id = this.scope.context.module.id;\n        // This simulates the current nested error structure. We could also just\n        // replace it with a flat error.\n        const parseError = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getRollupError)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logParseError)(this.message));\n        const moduleParseError = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logModuleParseError)(parseError, id);\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)(moduleParseError);\n    }\n}\n\nclass ParseError extends NodeBase {\n    initialise() {\n        const pos = this.start;\n        const id = this.scope.context.module.id;\n        // This simulates the current nested error structure. We could also just\n        // replace it with a flat error.\n        const parseError = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getRollupError)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logParseError)(this.message, pos));\n        const moduleParseError = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logModuleParseError)(parseError, id);\n        this.scope.context.error(moduleParseError, pos);\n    }\n}\n\nclass PrivateIdentifier extends NodeBase {\n}\n\nclass Program extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.hasCachedEffect = null;\n        this.hasLoggedEffect = false;\n    }\n    hasCachedEffects() {\n        if (!this.included) {\n            return false;\n        }\n        return this.hasCachedEffect === null\n            ? (this.hasCachedEffect = this.hasEffects(createHasEffectsContext()))\n            : this.hasCachedEffect;\n    }\n    hasEffects(context) {\n        for (const node of this.body) {\n            if (node.hasEffects(context)) {\n                if (this.scope.context.options.experimentalLogSideEffects && !this.hasLoggedEffect) {\n                    this.hasLoggedEffect = true;\n                    const { code, log, module } = this.scope.context;\n                    log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_INFO, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFirstSideEffect)(code, module.id, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.locate)(code, node.start, { offsetLine: 1 })), node.start);\n                }\n                return (this.hasCachedEffect = true);\n            }\n        }\n        return false;\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        for (const node of this.body) {\n            if (includeChildrenRecursively || node.shouldBeIncluded(context)) {\n                node.include(context, includeChildrenRecursively);\n            }\n        }\n    }\n    initialise() {\n        super.initialise();\n        if (this.invalidAnnotations)\n            for (const { start, end, type } of this.invalidAnnotations) {\n                this.scope.context.magicString.remove(start, end);\n                if (type === 'pure' || type === 'noSideEffects') {\n                    this.scope.context.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidAnnotation)(this.scope.context.code.slice(start, end), this.scope.context.module.id, type), start);\n                }\n            }\n    }\n    render(code, options) {\n        let start = this.start;\n        if (code.original.startsWith('#!')) {\n            start = Math.min(code.original.indexOf('\\n') + 1, this.end);\n            code.remove(0, start);\n        }\n        if (this.body.length > 0) {\n            // Keep all consecutive lines that start with a comment\n            while (code.original[start] === '/' && /[*/]/.test(code.original[start + 1])) {\n                const firstLineBreak = findFirstLineBreakOutsideComment(code.original.slice(start, this.body[0].start));\n                if (firstLineBreak[0] === -1) {\n                    break;\n                }\n                start += firstLineBreak[1];\n            }\n            renderStatementList(this.body, code, start, this.end, options);\n        }\n        else {\n            super.render(code, options);\n        }\n    }\n    applyDeoptimizations() { }\n}\n\nclass Property extends MethodBase {\n    constructor() {\n        super(...arguments);\n        this.declarationInit = null;\n    }\n    //declare method: boolean;\n    get method() {\n        return isFlagSet(this.flags, 262144 /* Flag.method */);\n    }\n    set method(value) {\n        this.flags = setFlag(this.flags, 262144 /* Flag.method */, value);\n    }\n    //declare shorthand: boolean;\n    get shorthand() {\n        return isFlagSet(this.flags, 524288 /* Flag.shorthand */);\n    }\n    set shorthand(value) {\n        this.flags = setFlag(this.flags, 524288 /* Flag.shorthand */, value);\n    }\n    declare(kind, init) {\n        this.declarationInit = init;\n        return this.value.declare(kind, UNKNOWN_EXPRESSION);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        const propertyReadSideEffects = this.scope.context.options.treeshake.propertyReadSideEffects;\n        return ((this.parent.type === 'ObjectPattern' && propertyReadSideEffects === 'always') ||\n            this.key.hasEffects(context) ||\n            this.value.hasEffects(context));\n    }\n    markDeclarationReached() {\n        this.value.markDeclarationReached();\n    }\n    render(code, options) {\n        if (!this.shorthand) {\n            this.key.render(code, options);\n        }\n        this.value.render(code, options, { isShorthandProperty: this.shorthand });\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.declarationInit !== null) {\n            this.declarationInit.deoptimizePath([UnknownKey, UnknownKey]);\n            this.scope.context.requestTreeshakingPass();\n        }\n    }\n}\n\nclass PropertyDefinition extends NodeBase {\n    get computed() {\n        return isFlagSet(this.flags, 1024 /* Flag.computed */);\n    }\n    set computed(value) {\n        this.flags = setFlag(this.flags, 1024 /* Flag.computed */, value);\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.value?.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.value?.deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.value\n            ? this.value.getLiteralValueAtPath(path, recursionTracker, origin)\n            : UnknownValue;\n    }\n    getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin) {\n        return this.value\n            ? this.value.getReturnExpressionWhenCalledAtPath(path, interaction, recursionTracker, origin)\n            : UNKNOWN_RETURN_EXPRESSION;\n    }\n    hasEffects(context) {\n        return (this.key.hasEffects(context) ||\n            (this.static && !!this.value?.hasEffects(context)) ||\n            checkEffectForNodes(this.decorators, context));\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return !this.value || this.value.hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    applyDeoptimizations() { }\n}\n\nclass ReturnStatement extends NodeBase {\n    hasEffects(context) {\n        if (!context.ignore.returnYield || this.argument?.hasEffects(context))\n            return true;\n        context.brokenFlow = true;\n        return false;\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.argument?.include(context, includeChildrenRecursively);\n        context.brokenFlow = true;\n    }\n    initialise() {\n        super.initialise();\n        this.scope.addReturnExpression(this.argument || UNKNOWN_EXPRESSION);\n    }\n    render(code, options) {\n        if (this.argument) {\n            this.argument.render(code, options, { preventASI: true });\n            if (this.argument.start === this.start + 6 /* 'return'.length */) {\n                code.prependLeft(this.start + 6, ' ');\n            }\n        }\n    }\n}\n\nclass SequenceExpression extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.expressions[this.expressions.length - 1].deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.expressions[this.expressions.length - 1].deoptimizePath(path);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        return this.expressions[this.expressions.length - 1].getLiteralValueAtPath(path, recursionTracker, origin);\n    }\n    hasEffects(context) {\n        for (const expression of this.expressions) {\n            if (expression.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        return this.expressions[this.expressions.length - 1].hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        const lastExpression = this.expressions[this.expressions.length - 1];\n        for (const expression of this.expressions) {\n            if (includeChildrenRecursively ||\n                (expression === lastExpression && !(this.parent instanceof ExpressionStatement)) ||\n                expression.shouldBeIncluded(context))\n                expression.include(context, includeChildrenRecursively);\n        }\n    }\n    removeAnnotations(code) {\n        this.expressions[0].removeAnnotations(code);\n    }\n    render(code, options, { renderedParentType, isCalleeOfRenderedParent, preventASI } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        let includedNodes = 0;\n        let lastSeparatorPos = null;\n        const lastNode = this.expressions[this.expressions.length - 1];\n        for (const { node, separator, start, end } of getCommaSeparatedNodesWithBoundaries(this.expressions, code, this.start, this.end)) {\n            if (!node.included) {\n                treeshakeNode(node, code, start, end);\n                continue;\n            }\n            includedNodes++;\n            lastSeparatorPos = separator;\n            if (includedNodes === 1 && preventASI) {\n                removeLineBreaks(code, start, node.start);\n            }\n            if (includedNodes === 1) {\n                const parentType = renderedParentType || this.parent.type;\n                node.render(code, options, {\n                    isCalleeOfRenderedParent: isCalleeOfRenderedParent && node === lastNode,\n                    renderedParentType: parentType,\n                    renderedSurroundingElement: parentType\n                });\n            }\n            else {\n                node.render(code, options);\n            }\n        }\n        if (lastSeparatorPos) {\n            code.remove(lastSeparatorPos, this.end);\n        }\n    }\n}\n\nclass Super extends NodeBase {\n    bind() {\n        this.variable = this.scope.findVariable('this');\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.variable.deoptimizePath(path);\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            this.scope.context.includeVariableInModule(this.variable);\n        }\n    }\n}\n\nclass SwitchCase extends NodeBase {\n    hasEffects(context) {\n        if (this.test?.hasEffects(context))\n            return true;\n        for (const node of this.consequent) {\n            if (context.brokenFlow)\n                break;\n            if (node.hasEffects(context))\n                return true;\n        }\n        return false;\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.test?.include(context, includeChildrenRecursively);\n        for (const node of this.consequent) {\n            if (includeChildrenRecursively || node.shouldBeIncluded(context))\n                node.include(context, includeChildrenRecursively);\n        }\n    }\n    render(code, options, nodeRenderOptions) {\n        if (this.consequent.length > 0) {\n            if (this.test) {\n                this.test.render(code, options);\n            }\n            const testEnd = this.test\n                ? this.test.end\n                : findFirstOccurrenceOutsideComment(code.original, 'default', this.start) + 7;\n            const consequentStart = findFirstOccurrenceOutsideComment(code.original, ':', testEnd) + 1;\n            renderStatementList(this.consequent, code, consequentStart, nodeRenderOptions.end, options);\n        }\n        else {\n            super.render(code, options);\n        }\n    }\n}\nSwitchCase.prototype.needsBoundaries = true;\n\nclass SwitchStatement extends NodeBase {\n    createScope(parentScope) {\n        this.parentScope = parentScope;\n        this.scope = new BlockScope(parentScope);\n    }\n    hasEffects(context) {\n        if (this.discriminant.hasEffects(context))\n            return true;\n        const { brokenFlow, hasBreak, ignore } = context;\n        const { breaks } = ignore;\n        ignore.breaks = true;\n        context.hasBreak = false;\n        let onlyHasBrokenFlow = true;\n        for (const switchCase of this.cases) {\n            if (switchCase.hasEffects(context))\n                return true;\n            onlyHasBrokenFlow &&= context.brokenFlow && !context.hasBreak;\n            context.hasBreak = false;\n            context.brokenFlow = brokenFlow;\n        }\n        if (this.defaultCase !== null) {\n            context.brokenFlow = onlyHasBrokenFlow;\n        }\n        ignore.breaks = breaks;\n        context.hasBreak = hasBreak;\n        return false;\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.discriminant.include(context, includeChildrenRecursively);\n        const { brokenFlow, hasBreak } = context;\n        context.hasBreak = false;\n        let onlyHasBrokenFlow = true;\n        let isCaseIncluded = includeChildrenRecursively ||\n            (this.defaultCase !== null && this.defaultCase < this.cases.length - 1);\n        for (let caseIndex = this.cases.length - 1; caseIndex >= 0; caseIndex--) {\n            const switchCase = this.cases[caseIndex];\n            if (switchCase.included) {\n                isCaseIncluded = true;\n            }\n            if (!isCaseIncluded) {\n                const hasEffectsContext = createHasEffectsContext();\n                hasEffectsContext.ignore.breaks = true;\n                isCaseIncluded = switchCase.hasEffects(hasEffectsContext);\n            }\n            if (isCaseIncluded) {\n                switchCase.include(context, includeChildrenRecursively);\n                onlyHasBrokenFlow &&= context.brokenFlow && !context.hasBreak;\n                context.hasBreak = false;\n                context.brokenFlow = brokenFlow;\n            }\n            else {\n                onlyHasBrokenFlow = brokenFlow;\n            }\n        }\n        if (isCaseIncluded && this.defaultCase !== null) {\n            context.brokenFlow = onlyHasBrokenFlow;\n        }\n        context.hasBreak = hasBreak;\n    }\n    initialise() {\n        super.initialise();\n        for (let caseIndex = 0; caseIndex < this.cases.length; caseIndex++) {\n            if (this.cases[caseIndex].test === null) {\n                this.defaultCase = caseIndex;\n                return;\n            }\n        }\n        this.defaultCase = null;\n    }\n    parseNode(esTreeNode) {\n        this.discriminant = new (this.scope.context.getNodeConstructor(esTreeNode.discriminant.type))(this, this.parentScope).parseNode(esTreeNode.discriminant);\n        return super.parseNode(esTreeNode);\n    }\n    render(code, options) {\n        this.discriminant.render(code, options);\n        if (this.cases.length > 0) {\n            renderStatementList(this.cases, code, this.cases[0].start, this.end - 1, options);\n        }\n    }\n}\n\nclass TaggedTemplateExpression extends CallExpressionBase {\n    bind() {\n        super.bind();\n        if (this.tag.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Identifier) {\n            const name = this.tag.name;\n            const variable = this.scope.findVariable(name);\n            if (variable.isNamespace) {\n                this.scope.context.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logCannotCallNamespace)(name), this.start);\n            }\n        }\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        for (const argument of this.quasi.expressions) {\n            if (argument.hasEffects(context))\n                return true;\n        }\n        return (this.tag.hasEffects(context) ||\n            this.tag.hasEffectsOnInteractionAtPath(EMPTY_PATH, this.interaction, context));\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (includeChildrenRecursively) {\n            super.include(context, includeChildrenRecursively);\n        }\n        else {\n            this.included = true;\n            this.tag.include(context, includeChildrenRecursively);\n            this.quasi.include(context, includeChildrenRecursively);\n        }\n        this.tag.includeCallArguments(context, this.args);\n        const [returnExpression] = this.getReturnExpression();\n        if (!returnExpression.included) {\n            returnExpression.include(context, false);\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.args = [UNKNOWN_EXPRESSION, ...this.quasi.expressions];\n        this.interaction = {\n            args: [\n                this.tag instanceof MemberExpression && !this.tag.variable ? this.tag.object : null,\n                ...this.args\n            ],\n            type: INTERACTION_CALLED,\n            withNew: false\n        };\n    }\n    render(code, options) {\n        this.tag.render(code, options, { isCalleeOfRenderedParent: true });\n        this.quasi.render(code, options);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.tag.deoptimizeArgumentsOnInteractionAtPath(this.interaction, EMPTY_PATH, SHARED_RECURSION_TRACKER);\n        this.scope.context.requestTreeshakingPass();\n    }\n    getReturnExpression(recursionTracker = SHARED_RECURSION_TRACKER) {\n        if (this.returnExpression === null) {\n            this.returnExpression = UNKNOWN_RETURN_EXPRESSION;\n            return (this.returnExpression = this.tag.getReturnExpressionWhenCalledAtPath(EMPTY_PATH, this.interaction, recursionTracker, this));\n        }\n        return this.returnExpression;\n    }\n}\n\nclass TemplateElement extends NodeBase {\n    get tail() {\n        return isFlagSet(this.flags, 1048576 /* Flag.tail */);\n    }\n    set tail(value) {\n        this.flags = setFlag(this.flags, 1048576 /* Flag.tail */, value);\n    }\n    // Do not try to bind value\n    bind() { }\n    hasEffects() {\n        return false;\n    }\n    include() {\n        this.included = true;\n    }\n    parseNode(esTreeNode) {\n        this.value = esTreeNode.value;\n        return super.parseNode(esTreeNode);\n    }\n    render() { }\n}\n\nclass TemplateLiteral extends NodeBase {\n    deoptimizeArgumentsOnInteractionAtPath() { }\n    getLiteralValueAtPath(path) {\n        if (path.length > 0 || this.quasis.length !== 1) {\n            return UnknownValue;\n        }\n        return this.quasis[0].value.cooked;\n    }\n    getReturnExpressionWhenCalledAtPath(path) {\n        if (path.length !== 1) {\n            return UNKNOWN_RETURN_EXPRESSION;\n        }\n        return getMemberReturnExpressionWhenCalled(literalStringMembers, path[0]);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (interaction.type === INTERACTION_ACCESSED) {\n            return path.length > 1;\n        }\n        if (interaction.type === INTERACTION_CALLED && path.length === 1) {\n            return hasMemberEffectWhenCalled(literalStringMembers, path[0], interaction, context);\n        }\n        return true;\n    }\n    render(code, options) {\n        code.indentExclusionRanges.push([this.start, this.end]);\n        super.render(code, options);\n    }\n}\n\nclass ModuleScope extends ChildScope {\n    constructor(parent, context) {\n        super(parent, context);\n        this.variables.set('this', new LocalVariable('this', null, UNDEFINED_EXPRESSION, context, 'other'));\n    }\n    addDeclaration(identifier, context, init, kind) {\n        if (this.context.module.importDescriptions.has(identifier.name)) {\n            context.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logRedeclarationError)(identifier.name), identifier.start);\n        }\n        return super.addDeclaration(identifier, context, init, kind);\n    }\n    addExportDefaultDeclaration(name, exportDefaultDeclaration, context) {\n        const variable = new ExportDefaultVariable(name, exportDefaultDeclaration, context);\n        this.variables.set('default', variable);\n        return variable;\n    }\n    addNamespaceMemberAccess() { }\n    deconflict(format, exportNamesByVariable, accessedGlobalsByScope) {\n        // all module level variables are already deconflicted when deconflicting the chunk\n        for (const scope of this.children)\n            scope.deconflict(format, exportNamesByVariable, accessedGlobalsByScope);\n    }\n    findLexicalBoundary() {\n        return this;\n    }\n    findVariable(name) {\n        const knownVariable = this.variables.get(name) || this.accessedOutsideVariables.get(name);\n        if (knownVariable) {\n            return knownVariable;\n        }\n        const variable = this.context.traceVariable(name) || this.parent.findVariable(name);\n        if (variable instanceof GlobalVariable) {\n            this.accessedOutsideVariables.set(name, variable);\n        }\n        return variable;\n    }\n}\n\nclass ThisExpression extends NodeBase {\n    bind() {\n        this.variable = this.scope.findVariable('this');\n    }\n    deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker) {\n        this.variable.deoptimizeArgumentsOnInteractionAtPath(interaction, path, recursionTracker);\n    }\n    deoptimizePath(path) {\n        this.variable.deoptimizePath(path);\n    }\n    hasEffectsOnInteractionAtPath(path, interaction, context) {\n        if (path.length === 0) {\n            return interaction.type !== INTERACTION_ACCESSED;\n        }\n        return this.variable.hasEffectsOnInteractionAtPath(path, interaction, context);\n    }\n    include() {\n        if (!this.included) {\n            this.included = true;\n            this.scope.context.includeVariableInModule(this.variable);\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.alias =\n            this.scope.findLexicalBoundary() instanceof ModuleScope\n                ? this.scope.context.moduleContext\n                : null;\n        if (this.alias === 'undefined') {\n            this.scope.context.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logThisIsUndefined)(), this.start);\n        }\n    }\n    render(code) {\n        if (this.alias !== null) {\n            code.overwrite(this.start, this.end, this.alias, {\n                contentOnly: false,\n                storeName: true\n            });\n        }\n    }\n}\n\nclass ThrowStatement extends NodeBase {\n    hasEffects() {\n        return true;\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.argument.include(context, includeChildrenRecursively);\n        context.brokenFlow = true;\n    }\n    render(code, options) {\n        this.argument.render(code, options, { preventASI: true });\n        if (this.argument.start === this.start + 5 /* 'throw'.length */) {\n            code.prependLeft(this.start + 5, ' ');\n        }\n    }\n}\n\nclass TryStatement extends NodeBase {\n    constructor() {\n        super(...arguments);\n        this.directlyIncluded = false;\n        this.includedLabelsAfterBlock = null;\n    }\n    hasEffects(context) {\n        return ((this.scope.context.options.treeshake.tryCatchDeoptimization\n            ? this.block.body.length > 0\n            : this.block.hasEffects(context)) || !!this.finalizer?.hasEffects(context));\n    }\n    include(context, includeChildrenRecursively) {\n        const tryCatchDeoptimization = this.scope.context.options.treeshake?.tryCatchDeoptimization;\n        const { brokenFlow, includedLabels } = context;\n        if (!this.directlyIncluded || !tryCatchDeoptimization) {\n            this.included = true;\n            this.directlyIncluded = true;\n            this.block.include(context, tryCatchDeoptimization ? INCLUDE_PARAMETERS : includeChildrenRecursively);\n            if (includedLabels.size > 0) {\n                this.includedLabelsAfterBlock = [...includedLabels];\n            }\n            context.brokenFlow = brokenFlow;\n        }\n        else if (this.includedLabelsAfterBlock) {\n            for (const label of this.includedLabelsAfterBlock) {\n                includedLabels.add(label);\n            }\n        }\n        if (this.handler !== null) {\n            this.handler.include(context, includeChildrenRecursively);\n            context.brokenFlow = brokenFlow;\n        }\n        this.finalizer?.include(context, includeChildrenRecursively);\n    }\n}\n\nconst unaryOperators = {\n    '!': value => !value,\n    '+': value => +value,\n    '-': value => -value,\n    delete: () => UnknownValue,\n    typeof: value => typeof value,\n    void: () => undefined,\n    '~': value => ~value\n};\nclass UnaryExpression extends NodeBase {\n    get prefix() {\n        return isFlagSet(this.flags, 2097152 /* Flag.prefix */);\n    }\n    set prefix(value) {\n        this.flags = setFlag(this.flags, 2097152 /* Flag.prefix */, value);\n    }\n    getLiteralValueAtPath(path, recursionTracker, origin) {\n        if (path.length > 0)\n            return UnknownValue;\n        const argumentValue = this.argument.getLiteralValueAtPath(EMPTY_PATH, recursionTracker, origin);\n        if (typeof argumentValue === 'symbol')\n            return UnknownValue;\n        return unaryOperators[this.operator](argumentValue);\n    }\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        if (this.operator === 'typeof' && this.argument instanceof Identifier)\n            return false;\n        return (this.argument.hasEffects(context) ||\n            (this.operator === 'delete' &&\n                this.argument.hasEffectsOnInteractionAtPath(EMPTY_PATH, NODE_INTERACTION_UNKNOWN_ASSIGNMENT, context)));\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return type !== INTERACTION_ACCESSED || path.length > (this.operator === 'void' ? 0 : 1);\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        if (this.operator === 'delete') {\n            this.argument.deoptimizePath(EMPTY_PATH);\n            this.scope.context.requestTreeshakingPass();\n        }\n    }\n}\n\nclass UpdateExpression extends NodeBase {\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return this.argument.hasEffectsAsAssignmentTarget(context, true);\n    }\n    hasEffectsOnInteractionAtPath(path, { type }) {\n        return path.length > 1 || type !== INTERACTION_ACCESSED;\n    }\n    include(context, includeChildrenRecursively) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        this.included = true;\n        this.argument.includeAsAssignmentTarget(context, includeChildrenRecursively, true);\n    }\n    initialise() {\n        super.initialise();\n        this.argument.setAssignedValue(UNKNOWN_EXPRESSION);\n    }\n    render(code, options) {\n        const { exportNamesByVariable, format, snippets: { _ } } = options;\n        this.argument.render(code, options);\n        if (format === 'system') {\n            const variable = this.argument.variable;\n            const exportNames = exportNamesByVariable.get(variable);\n            if (exportNames) {\n                if (this.prefix) {\n                    if (exportNames.length === 1) {\n                        renderSystemExportExpression(variable, this.start, this.end, code, options);\n                    }\n                    else {\n                        renderSystemExportSequenceAfterExpression(variable, this.start, this.end, this.parent.type !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement, code, options);\n                    }\n                }\n                else {\n                    const operator = this.operator[0];\n                    renderSystemExportSequenceBeforeExpression(variable, this.start, this.end, this.parent.type !== _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.ExpressionStatement, code, options, `${_}${operator}${_}1`);\n                }\n            }\n        }\n    }\n    applyDeoptimizations() {\n        this.deoptimized = true;\n        this.argument.deoptimizePath(EMPTY_PATH);\n        if (this.argument instanceof Identifier) {\n            const variable = this.scope.findVariable(this.argument.name);\n            variable.markReassigned();\n        }\n        this.scope.context.requestTreeshakingPass();\n    }\n}\n\nfunction areAllDeclarationsIncludedAndNotExported(declarations, exportNamesByVariable) {\n    for (const declarator of declarations) {\n        if (!declarator.id.included)\n            return false;\n        if (declarator.id.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Identifier) {\n            if (exportNamesByVariable.has(declarator.id.variable))\n                return false;\n        }\n        else {\n            const exportedVariables = [];\n            declarator.id.addExportedVariables(exportedVariables, exportNamesByVariable);\n            if (exportedVariables.length > 0)\n                return false;\n        }\n    }\n    return true;\n}\nclass VariableDeclaration extends NodeBase {\n    deoptimizePath() {\n        for (const declarator of this.declarations) {\n            declarator.deoptimizePath(EMPTY_PATH);\n        }\n    }\n    hasEffectsOnInteractionAtPath() {\n        return false;\n    }\n    include(context, includeChildrenRecursively, { asSingleStatement } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        this.included = true;\n        for (const declarator of this.declarations) {\n            if (includeChildrenRecursively || declarator.shouldBeIncluded(context))\n                declarator.include(context, includeChildrenRecursively);\n            const { id, init } = declarator;\n            if (asSingleStatement) {\n                id.include(context, includeChildrenRecursively);\n            }\n            if (init &&\n                id.included &&\n                !init.included &&\n                (id instanceof ObjectPattern || id instanceof ArrayPattern)) {\n                init.include(context, includeChildrenRecursively);\n            }\n        }\n    }\n    initialise() {\n        super.initialise();\n        this.isUsingDeclaration = this.kind === 'await using' || this.kind === 'using';\n        for (const declarator of this.declarations) {\n            declarator.declareDeclarator(this.kind, this.isUsingDeclaration);\n        }\n    }\n    removeAnnotations(code) {\n        this.declarations[0].removeAnnotations(code);\n    }\n    render(code, options, nodeRenderOptions = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n        if (this.isUsingDeclaration ||\n            areAllDeclarationsIncludedAndNotExported(this.declarations, options.exportNamesByVariable)) {\n            for (const declarator of this.declarations) {\n                declarator.render(code, options);\n            }\n            if (!nodeRenderOptions.isNoStatement &&\n                code.original.charCodeAt(this.end - 1) !== 59 /*\";\"*/) {\n                code.appendLeft(this.end, ';');\n            }\n        }\n        else {\n            this.renderReplacedDeclarations(code, options);\n        }\n    }\n    applyDeoptimizations() { }\n    renderDeclarationEnd(code, separatorString, lastSeparatorPos, actualContentEnd, renderedContentEnd, systemPatternExports, options) {\n        if (code.original.charCodeAt(this.end - 1) === 59 /*\";\"*/) {\n            code.remove(this.end - 1, this.end);\n        }\n        separatorString += ';';\n        if (lastSeparatorPos === null) {\n            code.appendLeft(renderedContentEnd, separatorString);\n        }\n        else {\n            if (code.original.charCodeAt(actualContentEnd - 1) === 10 /*\"\\n\"*/ &&\n                (code.original.charCodeAt(this.end) === 10 /*\"\\n\"*/ ||\n                    code.original.charCodeAt(this.end) === 13) /*\"\\r\"*/) {\n                actualContentEnd--;\n                if (code.original.charCodeAt(actualContentEnd) === 13 /*\"\\r\"*/) {\n                    actualContentEnd--;\n                }\n            }\n            if (actualContentEnd === lastSeparatorPos + 1) {\n                code.overwrite(lastSeparatorPos, renderedContentEnd, separatorString);\n            }\n            else {\n                code.overwrite(lastSeparatorPos, lastSeparatorPos + 1, separatorString);\n                code.remove(actualContentEnd, renderedContentEnd);\n            }\n        }\n        if (systemPatternExports.length > 0) {\n            code.appendLeft(renderedContentEnd, ` ${getSystemExportStatement(systemPatternExports, options)};`);\n        }\n    }\n    renderReplacedDeclarations(code, options) {\n        const separatedNodes = getCommaSeparatedNodesWithBoundaries(this.declarations, code, this.start + this.kind.length, this.end - (code.original.charCodeAt(this.end - 1) === 59 /*\";\"*/ ? 1 : 0));\n        let actualContentEnd, renderedContentEnd;\n        renderedContentEnd = findNonWhiteSpace(code.original, this.start + this.kind.length);\n        let lastSeparatorPos = renderedContentEnd - 1;\n        code.remove(this.start, lastSeparatorPos);\n        let isInDeclaration = false;\n        let hasRenderedContent = false;\n        let separatorString = '', leadingString, nextSeparatorString;\n        const aggregatedSystemExports = [];\n        const singleSystemExport = gatherSystemExportsAndGetSingleExport(separatedNodes, options, aggregatedSystemExports);\n        for (const { node, start, separator, contentEnd, end } of separatedNodes) {\n            if (!node.included) {\n                code.remove(start, end);\n                node.removeAnnotations(code);\n                continue;\n            }\n            node.render(code, options);\n            leadingString = '';\n            nextSeparatorString = '';\n            if (!node.id.included ||\n                (node.id instanceof Identifier &&\n                    isReassignedExportsMember(node.id.variable, options.exportNamesByVariable))) {\n                if (hasRenderedContent) {\n                    separatorString += ';';\n                }\n                isInDeclaration = false;\n            }\n            else {\n                if (singleSystemExport && singleSystemExport === node.id.variable) {\n                    const operatorPos = findFirstOccurrenceOutsideComment(code.original, '=', node.id.end);\n                    renderSystemExportExpression(singleSystemExport, findNonWhiteSpace(code.original, operatorPos + 1), separator === null ? contentEnd : separator, code, options);\n                }\n                if (isInDeclaration) {\n                    separatorString += ',';\n                }\n                else {\n                    if (hasRenderedContent) {\n                        separatorString += ';';\n                    }\n                    leadingString += `${this.kind} `;\n                    isInDeclaration = true;\n                }\n            }\n            if (renderedContentEnd === lastSeparatorPos + 1) {\n                code.overwrite(lastSeparatorPos, renderedContentEnd, separatorString + leadingString);\n            }\n            else {\n                code.overwrite(lastSeparatorPos, lastSeparatorPos + 1, separatorString);\n                code.appendLeft(renderedContentEnd, leadingString);\n            }\n            actualContentEnd = contentEnd;\n            renderedContentEnd = end;\n            hasRenderedContent = true;\n            lastSeparatorPos = separator;\n            separatorString = nextSeparatorString;\n        }\n        this.renderDeclarationEnd(code, separatorString, lastSeparatorPos, actualContentEnd, renderedContentEnd, aggregatedSystemExports, options);\n    }\n}\nfunction gatherSystemExportsAndGetSingleExport(separatedNodes, options, aggregatedSystemExports) {\n    let singleSystemExport = null;\n    if (options.format === 'system') {\n        for (const { node } of separatedNodes) {\n            if (node.id instanceof Identifier &&\n                node.init &&\n                aggregatedSystemExports.length === 0 &&\n                options.exportNamesByVariable.get(node.id.variable)?.length === 1) {\n                singleSystemExport = node.id.variable;\n                aggregatedSystemExports.push(singleSystemExport);\n            }\n            else {\n                node.id.addExportedVariables(aggregatedSystemExports, options.exportNamesByVariable);\n            }\n        }\n        if (aggregatedSystemExports.length > 1) {\n            singleSystemExport = null;\n        }\n        else if (singleSystemExport) {\n            aggregatedSystemExports.length = 0;\n        }\n    }\n    return singleSystemExport;\n}\n\nclass WhileStatement extends NodeBase {\n    hasEffects(context) {\n        if (this.test.hasEffects(context))\n            return true;\n        return hasLoopBodyEffects(context, this.body);\n    }\n    include(context, includeChildrenRecursively) {\n        this.included = true;\n        this.test.include(context, includeChildrenRecursively);\n        includeLoopBody(context, this.body, includeChildrenRecursively);\n    }\n}\n\nclass YieldExpression extends NodeBase {\n    hasEffects(context) {\n        if (!this.deoptimized)\n            this.applyDeoptimizations();\n        return !(context.ignore.returnYield && !this.argument?.hasEffects(context));\n    }\n    render(code, options) {\n        if (this.argument) {\n            this.argument.render(code, options, { preventASI: true });\n            if (this.argument.start === this.start + 5 /* 'yield'.length */) {\n                code.prependLeft(this.start + 5, ' ');\n            }\n        }\n    }\n}\n\n// This file is generated by scripts/generate-buffer-parsers.js.\n// Do not edit this file directly.\nfunction convertProgram(buffer, parent, parentScope) {\n    return convertNode(parent, parentScope, 0, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getAstBuffer)(buffer));\n}\nconst nodeTypeStrings = [\n    'PanicError',\n    'ParseError',\n    'ArrayExpression',\n    'ArrayPattern',\n    'ArrowFunctionExpression',\n    'AssignmentExpression',\n    'AssignmentPattern',\n    'AwaitExpression',\n    'BinaryExpression',\n    'BlockStatement',\n    'BreakStatement',\n    'CallExpression',\n    'CatchClause',\n    'ChainExpression',\n    'ClassBody',\n    'ClassDeclaration',\n    'ClassExpression',\n    'ConditionalExpression',\n    'ContinueStatement',\n    'DebuggerStatement',\n    'Decorator',\n    'ExpressionStatement',\n    'DoWhileStatement',\n    'EmptyStatement',\n    'ExportAllDeclaration',\n    'ExportDefaultDeclaration',\n    'ExportNamedDeclaration',\n    'ExportSpecifier',\n    'ExpressionStatement',\n    'ForInStatement',\n    'ForOfStatement',\n    'ForStatement',\n    'FunctionDeclaration',\n    'FunctionExpression',\n    'Identifier',\n    'IfStatement',\n    'ImportAttribute',\n    'ImportDeclaration',\n    'ImportDefaultSpecifier',\n    'ImportExpression',\n    'ImportNamespaceSpecifier',\n    'ImportSpecifier',\n    'JSXAttribute',\n    'JSXClosingElement',\n    'JSXClosingFragment',\n    'JSXElement',\n    'JSXEmptyExpression',\n    'JSXExpressionContainer',\n    'JSXFragment',\n    'JSXIdentifier',\n    'JSXMemberExpression',\n    'JSXNamespacedName',\n    'JSXOpeningElement',\n    'JSXOpeningFragment',\n    'JSXSpreadAttribute',\n    'JSXSpreadChild',\n    'JSXText',\n    'LabeledStatement',\n    'Literal',\n    'Literal',\n    'Literal',\n    'Literal',\n    'Literal',\n    'Literal',\n    'LogicalExpression',\n    'MemberExpression',\n    'MetaProperty',\n    'MethodDefinition',\n    'NewExpression',\n    'ObjectExpression',\n    'ObjectPattern',\n    'PrivateIdentifier',\n    'Program',\n    'Property',\n    'PropertyDefinition',\n    'RestElement',\n    'ReturnStatement',\n    'SequenceExpression',\n    'SpreadElement',\n    'StaticBlock',\n    'Super',\n    'SwitchCase',\n    'SwitchStatement',\n    'TaggedTemplateExpression',\n    'TemplateElement',\n    'TemplateLiteral',\n    'ThisExpression',\n    'ThrowStatement',\n    'TryStatement',\n    'UnaryExpression',\n    'UpdateExpression',\n    'VariableDeclaration',\n    'VariableDeclarator',\n    'WhileStatement',\n    'YieldExpression'\n];\nconst nodeConstructors$1 = [\n    PanicError,\n    ParseError,\n    ArrayExpression,\n    ArrayPattern,\n    ArrowFunctionExpression,\n    AssignmentExpression,\n    AssignmentPattern,\n    AwaitExpression,\n    BinaryExpression,\n    BlockStatement,\n    BreakStatement,\n    CallExpression,\n    CatchClause,\n    ChainExpression,\n    ClassBody,\n    ClassDeclaration,\n    ClassExpression,\n    ConditionalExpression,\n    ContinueStatement,\n    DebuggerStatement,\n    Decorator,\n    ExpressionStatement,\n    DoWhileStatement,\n    EmptyStatement,\n    ExportAllDeclaration,\n    ExportDefaultDeclaration,\n    ExportNamedDeclaration,\n    ExportSpecifier,\n    ExpressionStatement,\n    ForInStatement,\n    ForOfStatement,\n    ForStatement,\n    FunctionDeclaration,\n    FunctionExpression,\n    Identifier,\n    IfStatement,\n    ImportAttribute,\n    ImportDeclaration,\n    ImportDefaultSpecifier,\n    ImportExpression,\n    ImportNamespaceSpecifier,\n    ImportSpecifier,\n    JSXAttribute,\n    JSXClosingElement,\n    JSXClosingFragment,\n    JSXElement,\n    JSXEmptyExpression,\n    JSXExpressionContainer,\n    JSXFragment,\n    JSXIdentifier,\n    JSXMemberExpression,\n    JSXNamespacedName,\n    JSXOpeningElement,\n    JSXOpeningFragment,\n    JSXSpreadAttribute,\n    JSXSpreadChild,\n    JSXText,\n    LabeledStatement,\n    Literal,\n    Literal,\n    Literal,\n    Literal,\n    Literal,\n    Literal,\n    LogicalExpression,\n    MemberExpression,\n    MetaProperty,\n    MethodDefinition,\n    NewExpression,\n    ObjectExpression,\n    ObjectPattern,\n    PrivateIdentifier,\n    Program,\n    Property,\n    PropertyDefinition,\n    RestElement,\n    ReturnStatement,\n    SequenceExpression,\n    SpreadElement,\n    StaticBlock,\n    Super,\n    SwitchCase,\n    SwitchStatement,\n    TaggedTemplateExpression,\n    TemplateElement,\n    TemplateLiteral,\n    ThisExpression,\n    ThrowStatement,\n    TryStatement,\n    UnaryExpression,\n    UpdateExpression,\n    VariableDeclaration,\n    VariableDeclarator,\n    WhileStatement,\n    YieldExpression\n];\nconst bufferParsers = [\n    function panicError(node, position, buffer) {\n        node.message = buffer.convertString(buffer[position]);\n    },\n    function parseError(node, position, buffer) {\n        node.message = buffer.convertString(buffer[position]);\n    },\n    function arrayExpression(node, position, buffer) {\n        const { scope } = node;\n        node.elements = convertNodeList(node, scope, buffer[position], buffer);\n    },\n    function arrayPattern(node, position, buffer) {\n        const { scope } = node;\n        node.elements = convertNodeList(node, scope, buffer[position], buffer);\n    },\n    function arrowFunctionExpression(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.async = (flags & 1) === 1;\n        node.expression = (flags & 2) === 2;\n        node.generator = (flags & 4) === 4;\n        const annotations = (node.annotations = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.convertAnnotations)(buffer[position + 1], buffer));\n        node.annotationNoSideEffects = annotations.some(comment => comment.type === 'noSideEffects');\n        const parameters = (node.params = convertNodeList(node, scope, buffer[position + 2], buffer));\n        scope.addParameterVariables(parameters.map(parameter => parameter.declare('parameter', UNKNOWN_EXPRESSION)), parameters[parameters.length - 1] instanceof RestElement);\n        node.body = convertNode(node, scope.bodyScope, buffer[position + 3], buffer);\n    },\n    function assignmentExpression(node, position, buffer) {\n        const { scope } = node;\n        node.operator = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position]];\n        node.left = convertNode(node, scope, buffer[position + 1], buffer);\n        node.right = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function assignmentPattern(node, position, buffer) {\n        const { scope } = node;\n        node.left = convertNode(node, scope, buffer[position], buffer);\n        node.right = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function awaitExpression(node, position, buffer) {\n        const { scope } = node;\n        node.argument = convertNode(node, scope, buffer[position], buffer);\n    },\n    function binaryExpression(node, position, buffer) {\n        const { scope } = node;\n        node.operator = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position]];\n        node.left = convertNode(node, scope, buffer[position + 1], buffer);\n        node.right = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function blockStatement(node, position, buffer) {\n        const { scope } = node;\n        node.body = convertNodeList(node, scope, buffer[position], buffer);\n    },\n    function breakStatement(node, position, buffer) {\n        const { scope } = node;\n        const labelPosition = buffer[position];\n        node.label = labelPosition === 0 ? null : convertNode(node, scope, labelPosition, buffer);\n    },\n    function callExpression(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.optional = (flags & 1) === 1;\n        node.annotations = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.convertAnnotations)(buffer[position + 1], buffer);\n        node.callee = convertNode(node, scope, buffer[position + 2], buffer);\n        node.arguments = convertNodeList(node, scope, buffer[position + 3], buffer);\n    },\n    function catchClause(node, position, buffer) {\n        const { scope } = node;\n        const parameterPosition = buffer[position];\n        const parameter = (node.param =\n            parameterPosition === 0 ? null : convertNode(node, scope, parameterPosition, buffer));\n        parameter?.declare('parameter', UNKNOWN_EXPRESSION);\n        node.body = convertNode(node, scope.bodyScope, buffer[position + 1], buffer);\n    },\n    function chainExpression(node, position, buffer) {\n        const { scope } = node;\n        node.expression = convertNode(node, scope, buffer[position], buffer);\n    },\n    function classBody(node, position, buffer) {\n        const { scope } = node;\n        const bodyPosition = buffer[position];\n        if (bodyPosition) {\n            const length = buffer[bodyPosition];\n            const body = (node.body = new Array(length));\n            for (let index = 0; index < length; index++) {\n                const nodePosition = buffer[bodyPosition + 1 + index];\n                body[index] = convertNode(node, (buffer[nodePosition + 3] & 1) === 0 ? scope.instanceScope : scope, nodePosition, buffer);\n            }\n        }\n        else {\n            node.body = [];\n        }\n    },\n    function classDeclaration(node, position, buffer) {\n        const { scope } = node;\n        node.decorators = convertNodeList(node, scope, buffer[position], buffer);\n        const idPosition = buffer[position + 1];\n        node.id =\n            idPosition === 0 ? null : convertNode(node, scope.parent, idPosition, buffer);\n        const superClassPosition = buffer[position + 2];\n        node.superClass =\n            superClassPosition === 0 ? null : convertNode(node, scope, superClassPosition, buffer);\n        node.body = convertNode(node, scope, buffer[position + 3], buffer);\n    },\n    function classExpression(node, position, buffer) {\n        const { scope } = node;\n        node.decorators = convertNodeList(node, scope, buffer[position], buffer);\n        const idPosition = buffer[position + 1];\n        node.id = idPosition === 0 ? null : convertNode(node, scope, idPosition, buffer);\n        const superClassPosition = buffer[position + 2];\n        node.superClass =\n            superClassPosition === 0 ? null : convertNode(node, scope, superClassPosition, buffer);\n        node.body = convertNode(node, scope, buffer[position + 3], buffer);\n    },\n    function conditionalExpression(node, position, buffer) {\n        const { scope } = node;\n        node.test = convertNode(node, scope, buffer[position], buffer);\n        node.consequent = convertNode(node, scope, buffer[position + 1], buffer);\n        node.alternate = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function continueStatement(node, position, buffer) {\n        const { scope } = node;\n        const labelPosition = buffer[position];\n        node.label = labelPosition === 0 ? null : convertNode(node, scope, labelPosition, buffer);\n    },\n    function debuggerStatement() { },\n    function decorator(node, position, buffer) {\n        const { scope } = node;\n        node.expression = convertNode(node, scope, buffer[position], buffer);\n    },\n    function directive(node, position, buffer) {\n        const { scope } = node;\n        node.directive = buffer.convertString(buffer[position]);\n        node.expression = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function doWhileStatement(node, position, buffer) {\n        const { scope } = node;\n        node.body = convertNode(node, scope, buffer[position], buffer);\n        node.test = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function emptyStatement() { },\n    function exportAllDeclaration(node, position, buffer) {\n        const { scope } = node;\n        const exportedPosition = buffer[position];\n        node.exported =\n            exportedPosition === 0 ? null : convertNode(node, scope, exportedPosition, buffer);\n        node.source = convertNode(node, scope, buffer[position + 1], buffer);\n        node.attributes = convertNodeList(node, scope, buffer[position + 2], buffer);\n    },\n    function exportDefaultDeclaration(node, position, buffer) {\n        const { scope } = node;\n        node.declaration = convertNode(node, scope, buffer[position], buffer);\n    },\n    function exportNamedDeclaration(node, position, buffer) {\n        const { scope } = node;\n        node.specifiers = convertNodeList(node, scope, buffer[position], buffer);\n        const sourcePosition = buffer[position + 1];\n        node.source = sourcePosition === 0 ? null : convertNode(node, scope, sourcePosition, buffer);\n        node.attributes = convertNodeList(node, scope, buffer[position + 2], buffer);\n        const declarationPosition = buffer[position + 3];\n        node.declaration =\n            declarationPosition === 0 ? null : convertNode(node, scope, declarationPosition, buffer);\n    },\n    function exportSpecifier(node, position, buffer) {\n        const { scope } = node;\n        node.local = convertNode(node, scope, buffer[position], buffer);\n        const exportedPosition = buffer[position + 1];\n        node.exported =\n            exportedPosition === 0 ? node.local : convertNode(node, scope, exportedPosition, buffer);\n    },\n    function expressionStatement(node, position, buffer) {\n        const { scope } = node;\n        node.expression = convertNode(node, scope, buffer[position], buffer);\n    },\n    function forInStatement(node, position, buffer) {\n        const { scope } = node;\n        node.left = convertNode(node, scope, buffer[position], buffer);\n        node.right = convertNode(node, scope, buffer[position + 1], buffer);\n        node.body = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function forOfStatement(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.await = (flags & 1) === 1;\n        node.left = convertNode(node, scope, buffer[position + 1], buffer);\n        node.right = convertNode(node, scope, buffer[position + 2], buffer);\n        node.body = convertNode(node, scope, buffer[position + 3], buffer);\n    },\n    function forStatement(node, position, buffer) {\n        const { scope } = node;\n        const initPosition = buffer[position];\n        node.init = initPosition === 0 ? null : convertNode(node, scope, initPosition, buffer);\n        const testPosition = buffer[position + 1];\n        node.test = testPosition === 0 ? null : convertNode(node, scope, testPosition, buffer);\n        const updatePosition = buffer[position + 2];\n        node.update = updatePosition === 0 ? null : convertNode(node, scope, updatePosition, buffer);\n        node.body = convertNode(node, scope, buffer[position + 3], buffer);\n    },\n    function functionDeclaration(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.async = (flags & 1) === 1;\n        node.generator = (flags & 2) === 2;\n        const annotations = (node.annotations = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.convertAnnotations)(buffer[position + 1], buffer));\n        node.annotationNoSideEffects = annotations.some(comment => comment.type === 'noSideEffects');\n        const idPosition = buffer[position + 2];\n        node.id =\n            idPosition === 0 ? null : convertNode(node, scope.parent, idPosition, buffer);\n        const parameters = (node.params = convertNodeList(node, scope, buffer[position + 3], buffer));\n        scope.addParameterVariables(parameters.map(parameter => parameter.declare('parameter', UNKNOWN_EXPRESSION)), parameters[parameters.length - 1] instanceof RestElement);\n        node.body = convertNode(node, scope.bodyScope, buffer[position + 4], buffer);\n    },\n    function functionExpression(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.async = (flags & 1) === 1;\n        node.generator = (flags & 2) === 2;\n        const annotations = (node.annotations = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.convertAnnotations)(buffer[position + 1], buffer));\n        node.annotationNoSideEffects = annotations.some(comment => comment.type === 'noSideEffects');\n        const idPosition = buffer[position + 2];\n        node.id = idPosition === 0 ? null : convertNode(node, node.idScope, idPosition, buffer);\n        const parameters = (node.params = convertNodeList(node, scope, buffer[position + 3], buffer));\n        scope.addParameterVariables(parameters.map(parameter => parameter.declare('parameter', UNKNOWN_EXPRESSION)), parameters[parameters.length - 1] instanceof RestElement);\n        node.body = convertNode(node, scope.bodyScope, buffer[position + 4], buffer);\n    },\n    function identifier(node, position, buffer) {\n        node.name = buffer.convertString(buffer[position]);\n    },\n    function ifStatement(node, position, buffer) {\n        const { scope } = node;\n        node.test = convertNode(node, scope, buffer[position], buffer);\n        node.consequent = convertNode(node, (node.consequentScope = new TrackingScope(scope)), buffer[position + 1], buffer);\n        const alternatePosition = buffer[position + 2];\n        node.alternate =\n            alternatePosition === 0\n                ? null\n                : convertNode(node, (node.alternateScope = new TrackingScope(scope)), alternatePosition, buffer);\n    },\n    function importAttribute(node, position, buffer) {\n        const { scope } = node;\n        node.key = convertNode(node, scope, buffer[position], buffer);\n        node.value = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function importDeclaration(node, position, buffer) {\n        const { scope } = node;\n        node.specifiers = convertNodeList(node, scope, buffer[position], buffer);\n        node.source = convertNode(node, scope, buffer[position + 1], buffer);\n        node.attributes = convertNodeList(node, scope, buffer[position + 2], buffer);\n    },\n    function importDefaultSpecifier(node, position, buffer) {\n        const { scope } = node;\n        node.local = convertNode(node, scope, buffer[position], buffer);\n    },\n    function importExpression(node, position, buffer) {\n        const { scope } = node;\n        node.source = convertNode(node, scope, buffer[position], buffer);\n        node.sourceAstNode = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.convertNode)(buffer[position], buffer);\n        const optionsPosition = buffer[position + 1];\n        node.options = optionsPosition === 0 ? null : convertNode(node, scope, optionsPosition, buffer);\n    },\n    function importNamespaceSpecifier(node, position, buffer) {\n        const { scope } = node;\n        node.local = convertNode(node, scope, buffer[position], buffer);\n    },\n    function importSpecifier(node, position, buffer) {\n        const { scope } = node;\n        const importedPosition = buffer[position];\n        node.local = convertNode(node, scope, buffer[position + 1], buffer);\n        node.imported =\n            importedPosition === 0 ? node.local : convertNode(node, scope, importedPosition, buffer);\n    },\n    function jsxAttribute(node, position, buffer) {\n        const { scope } = node;\n        node.name = convertNode(node, scope, buffer[position], buffer);\n        const valuePosition = buffer[position + 1];\n        node.value = valuePosition === 0 ? null : convertNode(node, scope, valuePosition, buffer);\n    },\n    function jsxClosingElement(node, position, buffer) {\n        const { scope } = node;\n        node.name = convertNode(node, scope, buffer[position], buffer);\n    },\n    function jsxClosingFragment() { },\n    function jsxElement(node, position, buffer) {\n        const { scope } = node;\n        node.openingElement = convertNode(node, scope, buffer[position], buffer);\n        node.children = convertNodeList(node, scope, buffer[position + 1], buffer);\n        const closingElementPosition = buffer[position + 2];\n        node.closingElement =\n            closingElementPosition === 0\n                ? null\n                : convertNode(node, scope, closingElementPosition, buffer);\n    },\n    function jsxEmptyExpression() { },\n    function jsxExpressionContainer(node, position, buffer) {\n        const { scope } = node;\n        node.expression = convertNode(node, scope, buffer[position], buffer);\n    },\n    function jsxFragment(node, position, buffer) {\n        const { scope } = node;\n        node.openingFragment = convertNode(node, scope, buffer[position], buffer);\n        node.children = convertNodeList(node, scope, buffer[position + 1], buffer);\n        node.closingFragment = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function jsxIdentifier(node, position, buffer) {\n        node.name = buffer.convertString(buffer[position]);\n    },\n    function jsxMemberExpression(node, position, buffer) {\n        const { scope } = node;\n        node.object = convertNode(node, scope, buffer[position], buffer);\n        node.property = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function jsxNamespacedName(node, position, buffer) {\n        const { scope } = node;\n        node.namespace = convertNode(node, scope, buffer[position], buffer);\n        node.name = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function jsxOpeningElement(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.selfClosing = (flags & 1) === 1;\n        node.name = convertNode(node, scope, buffer[position + 1], buffer);\n        node.attributes = convertNodeList(node, scope, buffer[position + 2], buffer);\n    },\n    function jsxOpeningFragment(node) {\n        node.attributes = [];\n        node.selfClosing = false;\n    },\n    function jsxSpreadAttribute(node, position, buffer) {\n        const { scope } = node;\n        node.argument = convertNode(node, scope, buffer[position], buffer);\n    },\n    function jsxSpreadChild(node, position, buffer) {\n        const { scope } = node;\n        node.expression = convertNode(node, scope, buffer[position], buffer);\n    },\n    function jsxText(node, position, buffer) {\n        node.value = buffer.convertString(buffer[position]);\n        node.raw = buffer.convertString(buffer[position + 1]);\n    },\n    function labeledStatement(node, position, buffer) {\n        const { scope } = node;\n        node.label = convertNode(node, scope, buffer[position], buffer);\n        node.body = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function literalBigInt(node, position, buffer) {\n        const bigint = (node.bigint = buffer.convertString(buffer[position]));\n        node.raw = buffer.convertString(buffer[position + 1]);\n        node.value = BigInt(bigint);\n    },\n    function literalBoolean(node, position, buffer) {\n        const flags = buffer[position];\n        const value = (node.value = (flags & 1) === 1);\n        node.raw = value ? 'true' : 'false';\n    },\n    function literalNull(node) {\n        node.value = null;\n    },\n    function literalNumber(node, position, buffer) {\n        const rawPosition = buffer[position];\n        node.raw = rawPosition === 0 ? undefined : buffer.convertString(rawPosition);\n        node.value = new DataView(buffer.buffer).getFloat64((position + 1) << 2, true);\n    },\n    function literalRegExp(node, position, buffer) {\n        const flags = buffer.convertString(buffer[position]);\n        const pattern = buffer.convertString(buffer[position + 1]);\n        node.raw = `/${pattern}/${flags}`;\n        node.regex = { flags, pattern };\n        node.value = new RegExp(pattern, flags);\n    },\n    function literalString(node, position, buffer) {\n        node.value = buffer.convertString(buffer[position]);\n        const rawPosition = buffer[position + 1];\n        node.raw = rawPosition === 0 ? undefined : buffer.convertString(rawPosition);\n    },\n    function logicalExpression(node, position, buffer) {\n        const { scope } = node;\n        node.operator = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position]];\n        node.left = convertNode(node, scope, buffer[position + 1], buffer);\n        node.right = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function memberExpression(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.computed = (flags & 1) === 1;\n        node.optional = (flags & 2) === 2;\n        node.object = convertNode(node, scope, buffer[position + 1], buffer);\n        node.property = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function metaProperty(node, position, buffer) {\n        const { scope } = node;\n        node.meta = convertNode(node, scope, buffer[position], buffer);\n        node.property = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function methodDefinition(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.static = (flags & 1) === 1;\n        node.computed = (flags & 2) === 2;\n        node.decorators = convertNodeList(node, scope, buffer[position + 1], buffer);\n        node.key = convertNode(node, scope, buffer[position + 2], buffer);\n        node.value = convertNode(node, scope, buffer[position + 3], buffer);\n        node.kind = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position + 4]];\n    },\n    function newExpression(node, position, buffer) {\n        const { scope } = node;\n        node.annotations = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.convertAnnotations)(buffer[position], buffer);\n        node.callee = convertNode(node, scope, buffer[position + 1], buffer);\n        node.arguments = convertNodeList(node, scope, buffer[position + 2], buffer);\n    },\n    function objectExpression(node, position, buffer) {\n        const { scope } = node;\n        node.properties = convertNodeList(node, scope, buffer[position], buffer);\n    },\n    function objectPattern(node, position, buffer) {\n        const { scope } = node;\n        node.properties = convertNodeList(node, scope, buffer[position], buffer);\n    },\n    function privateIdentifier(node, position, buffer) {\n        node.name = buffer.convertString(buffer[position]);\n    },\n    function program(node, position, buffer) {\n        const { scope } = node;\n        node.body = convertNodeList(node, scope, buffer[position], buffer);\n        node.invalidAnnotations = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.convertAnnotations)(buffer[position + 1], buffer);\n    },\n    function property(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.method = (flags & 1) === 1;\n        node.shorthand = (flags & 2) === 2;\n        node.computed = (flags & 4) === 4;\n        const keyPosition = buffer[position + 1];\n        node.value = convertNode(node, scope, buffer[position + 2], buffer);\n        node.kind = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position + 3]];\n        node.key = keyPosition === 0 ? node.value : convertNode(node, scope, keyPosition, buffer);\n    },\n    function propertyDefinition(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.static = (flags & 1) === 1;\n        node.computed = (flags & 2) === 2;\n        node.decorators = convertNodeList(node, scope, buffer[position + 1], buffer);\n        node.key = convertNode(node, scope, buffer[position + 2], buffer);\n        const valuePosition = buffer[position + 3];\n        node.value = valuePosition === 0 ? null : convertNode(node, scope, valuePosition, buffer);\n    },\n    function restElement(node, position, buffer) {\n        const { scope } = node;\n        node.argument = convertNode(node, scope, buffer[position], buffer);\n    },\n    function returnStatement(node, position, buffer) {\n        const { scope } = node;\n        const argumentPosition = buffer[position];\n        node.argument =\n            argumentPosition === 0 ? null : convertNode(node, scope, argumentPosition, buffer);\n    },\n    function sequenceExpression(node, position, buffer) {\n        const { scope } = node;\n        node.expressions = convertNodeList(node, scope, buffer[position], buffer);\n    },\n    function spreadElement(node, position, buffer) {\n        const { scope } = node;\n        node.argument = convertNode(node, scope, buffer[position], buffer);\n    },\n    function staticBlock(node, position, buffer) {\n        const { scope } = node;\n        node.body = convertNodeList(node, scope, buffer[position], buffer);\n    },\n    function superElement() { },\n    function switchCase(node, position, buffer) {\n        const { scope } = node;\n        const testPosition = buffer[position];\n        node.test = testPosition === 0 ? null : convertNode(node, scope, testPosition, buffer);\n        node.consequent = convertNodeList(node, scope, buffer[position + 1], buffer);\n    },\n    function switchStatement(node, position, buffer) {\n        const { scope } = node;\n        node.discriminant = convertNode(node, node.parentScope, buffer[position], buffer);\n        node.cases = convertNodeList(node, scope, buffer[position + 1], buffer);\n    },\n    function taggedTemplateExpression(node, position, buffer) {\n        const { scope } = node;\n        node.tag = convertNode(node, scope, buffer[position], buffer);\n        node.quasi = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function templateElement(node, position, buffer) {\n        const flags = buffer[position];\n        node.tail = (flags & 1) === 1;\n        const cookedPosition = buffer[position + 1];\n        const cooked = cookedPosition === 0 ? undefined : buffer.convertString(cookedPosition);\n        const raw = buffer.convertString(buffer[position + 2]);\n        node.value = { cooked, raw };\n    },\n    function templateLiteral(node, position, buffer) {\n        const { scope } = node;\n        node.quasis = convertNodeList(node, scope, buffer[position], buffer);\n        node.expressions = convertNodeList(node, scope, buffer[position + 1], buffer);\n    },\n    function thisExpression() { },\n    function throwStatement(node, position, buffer) {\n        const { scope } = node;\n        node.argument = convertNode(node, scope, buffer[position], buffer);\n    },\n    function tryStatement(node, position, buffer) {\n        const { scope } = node;\n        node.block = convertNode(node, scope, buffer[position], buffer);\n        const handlerPosition = buffer[position + 1];\n        node.handler = handlerPosition === 0 ? null : convertNode(node, scope, handlerPosition, buffer);\n        const finalizerPosition = buffer[position + 2];\n        node.finalizer =\n            finalizerPosition === 0 ? null : convertNode(node, scope, finalizerPosition, buffer);\n    },\n    function unaryExpression(node, position, buffer) {\n        const { scope } = node;\n        node.operator = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position]];\n        node.argument = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function updateExpression(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.prefix = (flags & 1) === 1;\n        node.operator = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position + 1]];\n        node.argument = convertNode(node, scope, buffer[position + 2], buffer);\n    },\n    function variableDeclaration(node, position, buffer) {\n        const { scope } = node;\n        node.kind = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.FIXED_STRINGS[buffer[position]];\n        node.declarations = convertNodeList(node, scope, buffer[position + 1], buffer);\n    },\n    function variableDeclarator(node, position, buffer) {\n        const { scope } = node;\n        node.id = convertNode(node, scope, buffer[position], buffer);\n        const initPosition = buffer[position + 1];\n        node.init = initPosition === 0 ? null : convertNode(node, scope, initPosition, buffer);\n    },\n    function whileStatement(node, position, buffer) {\n        const { scope } = node;\n        node.test = convertNode(node, scope, buffer[position], buffer);\n        node.body = convertNode(node, scope, buffer[position + 1], buffer);\n    },\n    function yieldExpression(node, position, buffer) {\n        const { scope } = node;\n        const flags = buffer[position];\n        node.delegate = (flags & 1) === 1;\n        const argumentPosition = buffer[position + 1];\n        node.argument =\n            argumentPosition === 0 ? null : convertNode(node, scope, argumentPosition, buffer);\n    }\n];\nfunction convertNode(parent, parentScope, position, buffer) {\n    const nodeType = buffer[position];\n    const NodeConstructor = nodeConstructors$1[nodeType];\n    /* istanbul ignore if: This should never be executed but is a safeguard against faulty buffers */\n    if (!NodeConstructor) {\n        console.trace();\n        throw new Error(`Unknown node type: ${nodeType}`);\n    }\n    const node = new NodeConstructor(parent, parentScope);\n    node.type = nodeTypeStrings[nodeType];\n    node.start = buffer[position + 1];\n    node.end = buffer[position + 2];\n    bufferParsers[nodeType](node, position + 3, buffer);\n    node.initialise();\n    return node;\n}\nfunction convertNodeList(parent, parentScope, position, buffer) {\n    if (position === 0)\n        return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY;\n    const length = buffer[position++];\n    const list = new Array(length);\n    for (let index = 0; index < length; index++) {\n        const nodePosition = buffer[position++];\n        list[index] = nodePosition ? convertNode(parent, parentScope, nodePosition, buffer) : null;\n    }\n    return list;\n}\n\nclass UnknownNode extends NodeBase {\n    hasEffects() {\n        return true;\n    }\n    include(context) {\n        super.include(context, true);\n    }\n}\n\n// This file is generated by scripts/generate-node-index.js.\n// Do not edit this file directly.\nconst nodeConstructors = {\n    ArrayExpression,\n    ArrayPattern,\n    ArrowFunctionExpression,\n    AssignmentExpression,\n    AssignmentPattern,\n    AwaitExpression,\n    BinaryExpression,\n    BlockStatement,\n    BreakStatement,\n    CallExpression,\n    CatchClause,\n    ChainExpression,\n    ClassBody,\n    ClassDeclaration,\n    ClassExpression,\n    ConditionalExpression,\n    ContinueStatement,\n    DebuggerStatement,\n    Decorator,\n    DoWhileStatement,\n    EmptyStatement,\n    ExportAllDeclaration,\n    ExportDefaultDeclaration,\n    ExportNamedDeclaration,\n    ExportSpecifier,\n    ExpressionStatement,\n    ForInStatement,\n    ForOfStatement,\n    ForStatement,\n    FunctionDeclaration,\n    FunctionExpression,\n    Identifier,\n    IfStatement,\n    ImportAttribute,\n    ImportDeclaration,\n    ImportDefaultSpecifier,\n    ImportExpression,\n    ImportNamespaceSpecifier,\n    ImportSpecifier,\n    JSXAttribute,\n    JSXClosingElement,\n    JSXClosingFragment,\n    JSXElement,\n    JSXEmptyExpression,\n    JSXExpressionContainer,\n    JSXFragment,\n    JSXIdentifier,\n    JSXMemberExpression,\n    JSXNamespacedName,\n    JSXOpeningElement,\n    JSXOpeningFragment,\n    JSXSpreadAttribute,\n    JSXSpreadChild,\n    JSXText,\n    LabeledStatement,\n    Literal,\n    LogicalExpression,\n    MemberExpression,\n    MetaProperty,\n    MethodDefinition,\n    NewExpression,\n    ObjectExpression,\n    ObjectPattern,\n    PanicError,\n    ParseError,\n    PrivateIdentifier,\n    Program,\n    Property,\n    PropertyDefinition,\n    RestElement,\n    ReturnStatement,\n    SequenceExpression,\n    SpreadElement,\n    StaticBlock,\n    Super,\n    SwitchCase,\n    SwitchStatement,\n    TaggedTemplateExpression,\n    TemplateElement,\n    TemplateLiteral,\n    ThisExpression,\n    ThrowStatement,\n    TryStatement,\n    UnaryExpression,\n    UnknownNode,\n    UpdateExpression,\n    VariableDeclaration,\n    VariableDeclarator,\n    WhileStatement,\n    YieldExpression\n};\n\nclass ExportShimVariable extends Variable {\n    constructor(module) {\n        super(MISSING_EXPORT_SHIM_VARIABLE);\n        this.module = module;\n    }\n    include() {\n        super.include();\n        this.module.needsExportShim = true;\n    }\n}\n\nvar BuildPhase;\n(function (BuildPhase) {\n    BuildPhase[BuildPhase[\"LOAD_AND_PARSE\"] = 0] = \"LOAD_AND_PARSE\";\n    BuildPhase[BuildPhase[\"ANALYSE\"] = 1] = \"ANALYSE\";\n    BuildPhase[BuildPhase[\"GENERATE\"] = 2] = \"GENERATE\";\n})(BuildPhase || (BuildPhase = {}));\n\nconst sourceMapCache = new WeakMap();\n/**\n * This clears the decoded array and falls back to the encoded string form.\n * Sourcemap mappings arrays can be very large and holding on to them for longer\n * than is necessary leads to poor heap utilization.\n */\nfunction resetCacheToEncoded(cache) {\n    if (cache.encodedMappings === undefined && cache.decodedMappings) {\n        cache.encodedMappings = encode(cache.decodedMappings);\n    }\n    cache.decodedMappings = undefined;\n}\nfunction resetSourcemapCache(map, sourcemapChain) {\n    if (map) {\n        const cache = sourceMapCache.get(map);\n        if (cache) {\n            resetCacheToEncoded(cache);\n        }\n    }\n    if (!sourcemapChain) {\n        return;\n    }\n    for (const map of sourcemapChain) {\n        if (map.missing)\n            continue;\n        resetSourcemapCache(map);\n    }\n}\nfunction decodedSourcemap(map) {\n    if (!map)\n        return null;\n    if (typeof map === 'string') {\n        map = JSON.parse(map);\n    }\n    if (!map.mappings) {\n        return {\n            mappings: [],\n            names: [],\n            sources: [],\n            version: 3\n        };\n    }\n    const originalMappings = map.mappings;\n    const isAlreadyDecoded = Array.isArray(originalMappings);\n    const cache = {\n        decodedMappings: isAlreadyDecoded ? originalMappings : undefined,\n        encodedMappings: isAlreadyDecoded ? undefined : originalMappings\n    };\n    const decodedMap = {\n        ...map,\n        // By moving mappings behind an accessor, we can avoid unneeded computation for cases\n        // where the mappings field is never actually accessed. This appears to greatly reduce\n        // the overhead of sourcemap decoding in terms of both compute time and memory usage.\n        get mappings() {\n            if (cache.decodedMappings) {\n                return cache.decodedMappings;\n            }\n            // If decodedMappings doesn't exist then encodedMappings should.\n            // The only scenario where cache.encodedMappings should be undefined is if the map\n            // this was constructed from was already decoded, or if mappings was set to a new\n            // decoded string. In either case, this line shouldn't get hit.\n            cache.decodedMappings = cache.encodedMappings ? decode(cache.encodedMappings) : [];\n            cache.encodedMappings = undefined;\n            return cache.decodedMappings;\n        }\n    };\n    sourceMapCache.set(decodedMap, cache);\n    return decodedMap;\n}\n\nfunction getId(m) {\n    return m.id;\n}\n\nfunction getOriginalLocation(sourcemapChain, location) {\n    const filteredSourcemapChain = sourcemapChain.filter((sourcemap) => !sourcemap.missing);\n    traceSourcemap: while (filteredSourcemapChain.length > 0) {\n        const sourcemap = filteredSourcemapChain.pop();\n        const line = sourcemap.mappings[location.line - 1];\n        if (line) {\n            const filteredLine = line.filter((segment) => segment.length > 1);\n            const lastSegment = filteredLine[filteredLine.length - 1];\n            for (const segment of filteredLine) {\n                if (segment[0] >= location.column || segment === lastSegment) {\n                    location = {\n                        column: segment[3],\n                        line: segment[2] + 1\n                    };\n                    continue traceSourcemap;\n                }\n            }\n        }\n        throw new Error(\"Can't resolve original location of error.\");\n    }\n    return location;\n}\n\nconst ATTRIBUTE_KEYWORDS = new Set(['assert', 'with']);\nfunction getAttributesFromImportExpression(node) {\n    const { scope: { context }, options, start } = node;\n    if (!(options instanceof ObjectExpression)) {\n        if (options) {\n            context.module.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logImportAttributeIsInvalid)(context.module.id), start);\n        }\n        return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT;\n    }\n    const assertProperty = options.properties.find((property) => ATTRIBUTE_KEYWORDS.has(getPropertyKey(property)))?.value;\n    if (!assertProperty) {\n        return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT;\n    }\n    if (!(assertProperty instanceof ObjectExpression)) {\n        context.module.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logImportOptionsAreInvalid)(context.module.id), start);\n        return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT;\n    }\n    const assertFields = assertProperty.properties\n        .map(property => {\n        const key = getPropertyKey(property);\n        if (typeof key === 'string' &&\n            typeof property.value.value === 'string') {\n            return [key, property.value.value];\n        }\n        context.module.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logImportAttributeIsInvalid)(context.module.id), property.start);\n        return null;\n    })\n        .filter((property) => !!property);\n    if (assertFields.length > 0) {\n        return Object.fromEntries(assertFields);\n    }\n    return _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT;\n}\nconst getPropertyKey = (property) => {\n    const key = property.key;\n    return (key &&\n        !property.computed &&\n        (key.name || key.value));\n};\nfunction getAttributesFromImportExportDeclaration(attributes) {\n    return attributes?.length\n        ? Object.fromEntries(attributes.map(assertion => [getPropertyKey(assertion), assertion.value.value]))\n        : _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT;\n}\nfunction doAttributesDiffer(assertionA, assertionB) {\n    const keysA = Object.keys(assertionA);\n    return (keysA.length !== Object.keys(assertionB).length ||\n        keysA.some(key => assertionA[key] !== assertionB[key]));\n}\n\nlet timers = new Map();\nfunction getPersistedLabel(label, level) {\n    switch (level) {\n        case 1: {\n            return `# ${label}`;\n        }\n        case 2: {\n            return `## ${label}`;\n        }\n        case 3: {\n            return label;\n        }\n        default: {\n            return `- ${label}`;\n        }\n    }\n}\nfunction timeStartImpl(label, level = 3) {\n    label = getPersistedLabel(label, level);\n    const startMemory = node_process__WEBPACK_IMPORTED_MODULE_4__.memoryUsage().heapUsed;\n    const startTime = node_perf_hooks__WEBPACK_IMPORTED_MODULE_5__.performance.now();\n    const timer = timers.get(label);\n    if (timer === undefined) {\n        timers.set(label, {\n            memory: 0,\n            startMemory,\n            startTime,\n            time: 0,\n            totalMemory: 0\n        });\n    }\n    else {\n        timer.startMemory = startMemory;\n        timer.startTime = startTime;\n    }\n}\nfunction timeEndImpl(label, level = 3) {\n    label = getPersistedLabel(label, level);\n    const timer = timers.get(label);\n    if (timer !== undefined) {\n        const currentMemory = node_process__WEBPACK_IMPORTED_MODULE_4__.memoryUsage().heapUsed;\n        timer.memory += currentMemory - timer.startMemory;\n        timer.time += node_perf_hooks__WEBPACK_IMPORTED_MODULE_5__.performance.now() - timer.startTime;\n        timer.totalMemory = Math.max(timer.totalMemory, currentMemory);\n    }\n}\nfunction getTimings() {\n    const newTimings = {};\n    for (const [label, { memory, time, totalMemory }] of timers) {\n        newTimings[label] = [time, memory, totalMemory];\n    }\n    return newTimings;\n}\nlet timeStart = doNothing;\nlet timeEnd = doNothing;\nconst TIMED_PLUGIN_HOOKS = [\n    'augmentChunkHash',\n    'buildEnd',\n    'buildStart',\n    'generateBundle',\n    'load',\n    'moduleParsed',\n    'options',\n    'outputOptions',\n    'renderChunk',\n    'renderDynamicImport',\n    'renderStart',\n    'resolveDynamicImport',\n    'resolveFileUrl',\n    'resolveId',\n    'resolveImportMeta',\n    'shouldTransformCachedModule',\n    'transform',\n    'writeBundle'\n];\nfunction getPluginWithTimers(plugin, index) {\n    if (plugin._hasTimer)\n        return plugin;\n    plugin._hasTimer = true;\n    for (const hook of TIMED_PLUGIN_HOOKS) {\n        if (hook in plugin) {\n            let timerLabel = `plugin ${index}`;\n            if (plugin.name) {\n                timerLabel += ` (${plugin.name})`;\n            }\n            timerLabel += ` - ${hook}`;\n            const handler = function (...parameters) {\n                timeStart(timerLabel, 4);\n                const result = hookFunction.apply(this, parameters);\n                timeEnd(timerLabel, 4);\n                return result;\n            };\n            let hookFunction;\n            if (typeof plugin[hook].handler === 'function') {\n                hookFunction = plugin[hook].handler;\n                plugin[hook].handler = handler;\n            }\n            else {\n                hookFunction = plugin[hook];\n                plugin[hook] = handler;\n            }\n        }\n    }\n    return plugin;\n}\nfunction initialiseTimers(inputOptions) {\n    if (inputOptions.perf) {\n        timers = new Map();\n        timeStart = timeStartImpl;\n        timeEnd = timeEndImpl;\n        inputOptions.plugins = inputOptions.plugins.map(getPluginWithTimers);\n    }\n    else {\n        timeStart = doNothing;\n        timeEnd = doNothing;\n    }\n}\n\nconst MISSING_EXPORT_SHIM_DESCRIPTION = {\n    identifier: null,\n    localName: MISSING_EXPORT_SHIM_VARIABLE\n};\nfunction getVariableForExportNameRecursive(target, name, importerForSideEffects, isExportAllSearch, searchedNamesAndModules = new Map()) {\n    const searchedModules = searchedNamesAndModules.get(name);\n    if (searchedModules) {\n        if (searchedModules.has(target)) {\n            return isExportAllSearch ? [null] : (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logCircularReexport)(name, target.id));\n        }\n        searchedModules.add(target);\n    }\n    else {\n        searchedNamesAndModules.set(name, new Set([target]));\n    }\n    return target.getVariableForExportName(name, {\n        importerForSideEffects,\n        isExportAllSearch,\n        searchedNamesAndModules\n    });\n}\nfunction getAndExtendSideEffectModules(variable, module) {\n    const sideEffectModules = getOrCreate(module.sideEffectDependenciesByVariable, variable, (getNewSet));\n    let currentVariable = variable;\n    const referencedVariables = new Set([currentVariable]);\n    while (true) {\n        const importingModule = currentVariable.module;\n        currentVariable =\n            currentVariable instanceof ExportDefaultVariable\n                ? currentVariable.getDirectOriginalVariable()\n                : currentVariable instanceof SyntheticNamedExportVariable\n                    ? currentVariable.syntheticNamespace\n                    : null;\n        if (!currentVariable || referencedVariables.has(currentVariable)) {\n            break;\n        }\n        referencedVariables.add(currentVariable);\n        sideEffectModules.add(importingModule);\n        const originalSideEffects = importingModule.sideEffectDependenciesByVariable.get(currentVariable);\n        if (originalSideEffects) {\n            for (const module of originalSideEffects) {\n                sideEffectModules.add(module);\n            }\n        }\n    }\n    return sideEffectModules;\n}\nclass Module {\n    constructor(graph, id, options, isEntry, moduleSideEffects, syntheticNamedExports, meta, attributes) {\n        this.graph = graph;\n        this.id = id;\n        this.options = options;\n        this.alternativeReexportModules = new Map();\n        this.chunkFileNames = new Set();\n        this.chunkNames = [];\n        this.cycles = new Set();\n        this.dependencies = new Set();\n        this.dynamicDependencies = new Set();\n        this.dynamicImporters = [];\n        this.dynamicImports = [];\n        this.execIndex = Infinity;\n        this.hasTreeShakingPassStarted = false;\n        this.implicitlyLoadedAfter = new Set();\n        this.implicitlyLoadedBefore = new Set();\n        this.importDescriptions = new Map();\n        this.importMetas = [];\n        this.importedFromNotTreeshaken = false;\n        this.importers = [];\n        this.includedDynamicImporters = [];\n        this.includedImports = new Set();\n        this.isExecuted = false;\n        this.isUserDefinedEntryPoint = false;\n        this.needsExportShim = false;\n        this.sideEffectDependenciesByVariable = new Map();\n        this.sourcesWithAttributes = new Map();\n        this.allExportNames = null;\n        this.ast = null;\n        this.exportAllModules = [];\n        this.exportAllSources = new Set();\n        this.exportNamesByVariable = null;\n        this.exportShimVariable = new ExportShimVariable(this);\n        this.exports = new Map();\n        this.namespaceReexportsByName = new Map();\n        this.reexportDescriptions = new Map();\n        this.relevantDependencies = null;\n        this.syntheticExports = new Map();\n        this.syntheticNamespace = null;\n        this.transformDependencies = [];\n        this.transitiveReexports = null;\n        this.excludeFromSourcemap = /\\0/.test(id);\n        this.context = options.moduleContext(id);\n        this.preserveSignature = this.options.preserveEntrySignatures;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const module = this;\n        const { dynamicImports, dynamicImporters, exportAllSources, exports, implicitlyLoadedAfter, implicitlyLoadedBefore, importers, reexportDescriptions, sourcesWithAttributes } = this;\n        this.info = {\n            ast: null,\n            attributes,\n            code: null,\n            get dynamicallyImportedIdResolutions() {\n                return dynamicImports\n                    .map(({ argument }) => typeof argument === 'string' && module.resolvedIds[argument])\n                    .filter(Boolean);\n            },\n            get dynamicallyImportedIds() {\n                // We cannot use this.dynamicDependencies because this is needed before\n                // dynamicDependencies are populated\n                return dynamicImports.map(({ id }) => id).filter((id) => id != null);\n            },\n            get dynamicImporters() {\n                return dynamicImporters.sort();\n            },\n            get exportedBindings() {\n                const exportBindings = { '.': [...exports.keys()] };\n                for (const [name, { source }] of reexportDescriptions) {\n                    (exportBindings[source] ??= []).push(name);\n                }\n                for (const source of exportAllSources) {\n                    (exportBindings[source] ??= []).push('*');\n                }\n                return exportBindings;\n            },\n            get exports() {\n                return [\n                    ...exports.keys(),\n                    ...reexportDescriptions.keys(),\n                    ...[...exportAllSources].map(() => '*')\n                ];\n            },\n            get hasDefaultExport() {\n                // This information is only valid after parsing\n                if (!module.ast) {\n                    return null;\n                }\n                return module.exports.has('default') || reexportDescriptions.has('default');\n            },\n            id,\n            get implicitlyLoadedAfterOneOf() {\n                return Array.from(implicitlyLoadedAfter, getId).sort();\n            },\n            get implicitlyLoadedBefore() {\n                return Array.from(implicitlyLoadedBefore, getId).sort();\n            },\n            get importedIdResolutions() {\n                return Array.from(sourcesWithAttributes.keys(), source => module.resolvedIds[source]).filter(Boolean);\n            },\n            get importedIds() {\n                // We cannot use this.dependencies because this is needed before\n                // dependencies are populated\n                return Array.from(sourcesWithAttributes.keys(), source => module.resolvedIds[source]?.id).filter(Boolean);\n            },\n            get importers() {\n                return importers.sort();\n            },\n            isEntry,\n            isExternal: false,\n            get isIncluded() {\n                if (graph.phase !== BuildPhase.GENERATE) {\n                    return null;\n                }\n                return module.isIncluded();\n            },\n            meta: { ...meta },\n            moduleSideEffects,\n            syntheticNamedExports\n        };\n    }\n    basename() {\n        const base = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(this.id);\n        const extension = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.extname)(this.id);\n        return makeLegal(extension ? base.slice(0, -extension.length) : base);\n    }\n    bindReferences() {\n        this.ast.bind();\n    }\n    cacheInfoGetters() {\n        cacheObjectGetters(this.info, [\n            'dynamicallyImportedIdResolutions',\n            'dynamicallyImportedIds',\n            'dynamicImporters',\n            'exportedBindings',\n            'exports',\n            'hasDefaultExport',\n            'implicitlyLoadedAfterOneOf',\n            'implicitlyLoadedBefore',\n            'importedIdResolutions',\n            'importedIds',\n            'importers'\n        ]);\n    }\n    error(properties, pos) {\n        if (pos !== undefined) {\n            this.addLocationToLogProps(properties, pos);\n        }\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)(properties);\n    }\n    // sum up the length of all ast nodes that are included\n    estimateSize() {\n        let size = 0;\n        for (const node of this.ast.body) {\n            if (node.included) {\n                size += node.end - node.start;\n            }\n        }\n        return size;\n    }\n    getAllExportNames() {\n        if (this.allExportNames) {\n            return this.allExportNames;\n        }\n        this.allExportNames = new Set([...this.exports.keys(), ...this.reexportDescriptions.keys()]);\n        for (const module of this.exportAllModules) {\n            if (module instanceof ExternalModule) {\n                this.allExportNames.add(`*${module.id}`);\n                continue;\n            }\n            for (const name of module.getAllExportNames()) {\n                if (name !== 'default')\n                    this.allExportNames.add(name);\n            }\n        }\n        // We do not count the synthetic namespace as a regular export to hide it\n        // from entry signatures and namespace objects\n        if (typeof this.info.syntheticNamedExports === 'string') {\n            this.allExportNames.delete(this.info.syntheticNamedExports);\n        }\n        return this.allExportNames;\n    }\n    getDependenciesToBeIncluded() {\n        if (this.relevantDependencies)\n            return this.relevantDependencies;\n        this.relevantDependencies = new Set();\n        const necessaryDependencies = new Set();\n        const alwaysCheckedDependencies = new Set();\n        const dependencyVariables = new Set(this.includedImports);\n        if (this.info.isEntry ||\n            this.includedDynamicImporters.length > 0 ||\n            this.namespace.included ||\n            this.implicitlyLoadedAfter.size > 0) {\n            for (const exportName of [...this.getReexports(), ...this.getExports()]) {\n                const [exportedVariable] = this.getVariableForExportName(exportName);\n                if (exportedVariable?.included) {\n                    dependencyVariables.add(exportedVariable);\n                }\n            }\n        }\n        for (let variable of dependencyVariables) {\n            const sideEffectDependencies = this.sideEffectDependenciesByVariable.get(variable);\n            if (sideEffectDependencies) {\n                for (const module of sideEffectDependencies) {\n                    alwaysCheckedDependencies.add(module);\n                }\n            }\n            if (variable instanceof SyntheticNamedExportVariable) {\n                variable = variable.getBaseVariable();\n            }\n            else if (variable instanceof ExportDefaultVariable) {\n                variable = variable.getOriginalVariable();\n            }\n            necessaryDependencies.add(variable.module);\n        }\n        if (!this.options.treeshake || this.info.moduleSideEffects === 'no-treeshake') {\n            for (const dependency of this.dependencies) {\n                this.relevantDependencies.add(dependency);\n            }\n        }\n        else {\n            this.addRelevantSideEffectDependencies(this.relevantDependencies, necessaryDependencies, alwaysCheckedDependencies);\n        }\n        for (const dependency of necessaryDependencies) {\n            this.relevantDependencies.add(dependency);\n        }\n        return this.relevantDependencies;\n    }\n    getExportNamesByVariable() {\n        if (this.exportNamesByVariable) {\n            return this.exportNamesByVariable;\n        }\n        const exportNamesByVariable = new Map();\n        for (const exportName of this.getAllExportNames()) {\n            let [tracedVariable] = this.getVariableForExportName(exportName);\n            if (tracedVariable instanceof ExportDefaultVariable) {\n                tracedVariable = tracedVariable.getOriginalVariable();\n            }\n            if (!tracedVariable ||\n                !(tracedVariable.included || tracedVariable instanceof ExternalVariable)) {\n                continue;\n            }\n            const existingExportNames = exportNamesByVariable.get(tracedVariable);\n            if (existingExportNames) {\n                existingExportNames.push(exportName);\n            }\n            else {\n                exportNamesByVariable.set(tracedVariable, [exportName]);\n            }\n        }\n        return (this.exportNamesByVariable = exportNamesByVariable);\n    }\n    getExports() {\n        return [...this.exports.keys()];\n    }\n    getReexports() {\n        if (this.transitiveReexports) {\n            return this.transitiveReexports;\n        }\n        // to avoid infinite recursion when using circular `export * from X`\n        this.transitiveReexports = [];\n        const reexports = new Set(this.reexportDescriptions.keys());\n        for (const module of this.exportAllModules) {\n            if (module instanceof ExternalModule) {\n                reexports.add(`*${module.id}`);\n            }\n            else {\n                for (const name of [...module.getReexports(), ...module.getExports()]) {\n                    if (name !== 'default')\n                        reexports.add(name);\n                }\n            }\n        }\n        return (this.transitiveReexports = [...reexports]);\n    }\n    getRenderedExports() {\n        // only direct exports are counted here, not reexports at all\n        const renderedExports = [];\n        const removedExports = [];\n        for (const exportName of this.exports.keys()) {\n            const [variable] = this.getVariableForExportName(exportName);\n            (variable?.included ? renderedExports : removedExports).push(exportName);\n        }\n        return { removedExports, renderedExports };\n    }\n    getSyntheticNamespace() {\n        if (this.syntheticNamespace === null) {\n            this.syntheticNamespace = undefined;\n            [this.syntheticNamespace] = this.getVariableForExportName(typeof this.info.syntheticNamedExports === 'string'\n                ? this.info.syntheticNamedExports\n                : 'default', { onlyExplicit: true });\n        }\n        if (!this.syntheticNamespace) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logSyntheticNamedExportsNeedNamespaceExport)(this.id, this.info.syntheticNamedExports));\n        }\n        return this.syntheticNamespace;\n    }\n    getVariableForExportName(name, { importerForSideEffects, isExportAllSearch, onlyExplicit, searchedNamesAndModules } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT) {\n        if (name[0] === '*') {\n            if (name.length === 1) {\n                // export * from './other'\n                return [this.namespace];\n            }\n            // export * from 'external'\n            const module = this.graph.modulesById.get(name.slice(1));\n            return module.getVariableForExportName('*');\n        }\n        // export { foo } from './other'\n        const reexportDeclaration = this.reexportDescriptions.get(name);\n        if (reexportDeclaration) {\n            const [variable] = getVariableForExportNameRecursive(reexportDeclaration.module, reexportDeclaration.localName, importerForSideEffects, false, searchedNamesAndModules);\n            if (!variable) {\n                return this.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingExport)(reexportDeclaration.localName, this.id, reexportDeclaration.module.id), reexportDeclaration.start);\n            }\n            if (importerForSideEffects) {\n                setAlternativeExporterIfCyclic(variable, importerForSideEffects, this);\n                if (this.info.moduleSideEffects) {\n                    getOrCreate(importerForSideEffects.sideEffectDependenciesByVariable, variable, (getNewSet)).add(this);\n                }\n            }\n            return [variable];\n        }\n        const exportDeclaration = this.exports.get(name);\n        if (exportDeclaration) {\n            if (exportDeclaration === MISSING_EXPORT_SHIM_DESCRIPTION) {\n                return [this.exportShimVariable];\n            }\n            const name = exportDeclaration.localName;\n            const variable = this.traceVariable(name, {\n                importerForSideEffects,\n                searchedNamesAndModules\n            });\n            if (importerForSideEffects) {\n                setAlternativeExporterIfCyclic(variable, importerForSideEffects, this);\n                getOrCreate(importerForSideEffects.sideEffectDependenciesByVariable, variable, (getNewSet)).add(this);\n            }\n            return [variable];\n        }\n        if (onlyExplicit) {\n            return [null];\n        }\n        if (name !== 'default') {\n            const foundNamespaceReexport = this.namespaceReexportsByName.get(name) ??\n                this.getVariableFromNamespaceReexports(name, importerForSideEffects, searchedNamesAndModules);\n            this.namespaceReexportsByName.set(name, foundNamespaceReexport);\n            if (foundNamespaceReexport[0]) {\n                return foundNamespaceReexport;\n            }\n        }\n        if (this.info.syntheticNamedExports) {\n            return [\n                getOrCreate(this.syntheticExports, name, () => new SyntheticNamedExportVariable(this.astContext, name, this.getSyntheticNamespace()))\n            ];\n        }\n        // we don't want to create shims when we are just\n        // probing export * modules for exports\n        if (!isExportAllSearch && this.options.shimMissingExports) {\n            this.shimMissingExport(name);\n            return [this.exportShimVariable];\n        }\n        return [null];\n    }\n    hasEffects() {\n        return this.info.moduleSideEffects === 'no-treeshake' || this.ast.hasCachedEffects();\n    }\n    include() {\n        const context = createInclusionContext();\n        if (this.ast.shouldBeIncluded(context))\n            this.ast.include(context, false);\n    }\n    includeAllExports(includeNamespaceMembers) {\n        if (!this.isExecuted) {\n            markModuleAndImpureDependenciesAsExecuted(this);\n            this.graph.needsTreeshakingPass = true;\n        }\n        for (const exportName of this.exports.keys()) {\n            if (includeNamespaceMembers || exportName !== this.info.syntheticNamedExports) {\n                const variable = this.getVariableForExportName(exportName)[0];\n                if (!variable) {\n                    return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingEntryExport)(exportName, this.id));\n                }\n                variable.deoptimizePath(UNKNOWN_PATH);\n                if (!variable.included) {\n                    this.includeVariable(variable);\n                }\n            }\n        }\n        for (const name of this.getReexports()) {\n            const [variable] = this.getVariableForExportName(name);\n            if (variable) {\n                variable.deoptimizePath(UNKNOWN_PATH);\n                if (!variable.included) {\n                    this.includeVariable(variable);\n                }\n                if (variable instanceof ExternalVariable) {\n                    variable.module.reexported = true;\n                }\n            }\n        }\n        if (includeNamespaceMembers) {\n            this.namespace.setMergedNamespaces(this.includeAndGetAdditionalMergedNamespaces());\n        }\n    }\n    includeAllInBundle() {\n        this.ast.include(createInclusionContext(), true);\n        this.includeAllExports(false);\n    }\n    includeExportsByNames(names) {\n        if (!this.isExecuted) {\n            markModuleAndImpureDependenciesAsExecuted(this);\n            this.graph.needsTreeshakingPass = true;\n        }\n        let includeNamespaceMembers = false;\n        for (const name of names) {\n            const variable = this.getVariableForExportName(name)[0];\n            if (variable) {\n                variable.deoptimizePath(UNKNOWN_PATH);\n                if (!variable.included) {\n                    this.includeVariable(variable);\n                }\n            }\n            if (!this.exports.has(name) && !this.reexportDescriptions.has(name)) {\n                includeNamespaceMembers = true;\n            }\n        }\n        if (includeNamespaceMembers) {\n            this.namespace.setMergedNamespaces(this.includeAndGetAdditionalMergedNamespaces());\n        }\n    }\n    isIncluded() {\n        // Modules where this.ast is missing have been loaded via this.load and are\n        // not yet fully processed, hence they cannot be included.\n        return (this.ast &&\n            (this.ast.included ||\n                this.namespace.included ||\n                this.importedFromNotTreeshaken ||\n                this.exportShimVariable.included));\n    }\n    linkImports() {\n        this.addModulesToImportDescriptions(this.importDescriptions);\n        this.addModulesToImportDescriptions(this.reexportDescriptions);\n        const externalExportAllModules = [];\n        for (const source of this.exportAllSources) {\n            const module = this.graph.modulesById.get(this.resolvedIds[source].id);\n            if (module instanceof ExternalModule) {\n                externalExportAllModules.push(module);\n                continue;\n            }\n            this.exportAllModules.push(module);\n        }\n        this.exportAllModules.push(...externalExportAllModules);\n    }\n    log(level, properties, pos) {\n        this.addLocationToLogProps(properties, pos);\n        this.options.onLog(level, properties);\n    }\n    render(options) {\n        const source = this.magicString.clone();\n        this.ast.render(source, options);\n        source.trim();\n        const { usesTopLevelAwait } = this.astContext;\n        if (usesTopLevelAwait && options.format !== 'es' && options.format !== 'system') {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidFormatForTopLevelAwait)(this.id, options.format));\n        }\n        return { source, usesTopLevelAwait };\n    }\n    async setSource({ ast, code, customTransformCache, originalCode, originalSourcemap, resolvedIds, sourcemapChain, transformDependencies, transformFiles, ...moduleOptions }) {\n        timeStart('generate ast', 3);\n        if (code.startsWith('#!')) {\n            const shebangEndPosition = code.indexOf('\\n');\n            this.shebang = code.slice(2, shebangEndPosition);\n        }\n        this.info.code = code;\n        this.originalCode = originalCode;\n        // We need to call decodedSourcemap on the input in case they were hydrated from json in the cache and don't\n        // have the lazy evaluation cache configured. Right now this isn't enforced by the type system because the\n        // RollupCache stores `ExistingDecodedSourcemap` instead of `ExistingRawSourcemap`\n        this.originalSourcemap = decodedSourcemap(originalSourcemap);\n        this.sourcemapChain = sourcemapChain.map(mapOrMissing => mapOrMissing.missing ? mapOrMissing : decodedSourcemap(mapOrMissing));\n        // If coming from cache and this value is already fully decoded, we want to re-encode here to save memory.\n        resetSourcemapCache(this.originalSourcemap, this.sourcemapChain);\n        if (transformFiles) {\n            this.transformFiles = transformFiles;\n        }\n        this.transformDependencies = transformDependencies;\n        this.customTransformCache = customTransformCache;\n        this.updateOptions(moduleOptions);\n        this.resolvedIds = resolvedIds ?? Object.create(null);\n        // By default, `id` is the file name. Custom resolvers and loaders\n        // can change that, but it makes sense to use it for the source file name\n        const fileName = this.id;\n        this.magicString = new MagicString(code, {\n            filename: (this.excludeFromSourcemap ? null : fileName), // don't include plugin helpers in sourcemap\n            indentExclusionRanges: []\n        });\n        this.astContext = {\n            addDynamicImport: this.addDynamicImport.bind(this),\n            addExport: this.addExport.bind(this),\n            addImport: this.addImport.bind(this),\n            addImportMeta: this.addImportMeta.bind(this),\n            addImportSource: this.addImportSource.bind(this),\n            code, // Only needed for debugging\n            deoptimizationTracker: this.graph.deoptimizationTracker,\n            error: this.error.bind(this),\n            fileName, // Needed for warnings\n            getExports: this.getExports.bind(this),\n            getImportedJsxFactoryVariable: this.getImportedJsxFactoryVariable.bind(this),\n            getModuleExecIndex: () => this.execIndex,\n            getModuleName: this.basename.bind(this),\n            getNodeConstructor: (name) => nodeConstructors[name] || nodeConstructors.UnknownNode,\n            getReexports: this.getReexports.bind(this),\n            importDescriptions: this.importDescriptions,\n            includeAllExports: () => this.includeAllExports(true),\n            includeDynamicImport: this.includeDynamicImport.bind(this),\n            includeVariableInModule: this.includeVariableInModule.bind(this),\n            log: this.log.bind(this),\n            magicString: this.magicString,\n            manualPureFunctions: this.graph.pureFunctions,\n            module: this,\n            moduleContext: this.context,\n            options: this.options,\n            requestTreeshakingPass: () => (this.graph.needsTreeshakingPass = true),\n            traceExport: (name) => this.getVariableForExportName(name)[0],\n            traceVariable: this.traceVariable.bind(this),\n            usesTopLevelAwait: false\n        };\n        this.scope = new ModuleScope(this.graph.scope, this.astContext);\n        this.namespace = new NamespaceVariable(this.astContext);\n        const programParent = { context: this.astContext, type: 'Module' };\n        if (ast) {\n            this.ast = new nodeConstructors[ast.type](programParent, this.scope).parseNode(ast);\n            this.info.ast = ast;\n        }\n        else {\n            // Measuring asynchronous code does not provide reasonable results\n            timeEnd('generate ast', 3);\n            const astBuffer = await (0,_native_js__WEBPACK_IMPORTED_MODULE_3__.parseAsync)(code, false, this.options.jsx !== false);\n            timeStart('generate ast', 3);\n            this.ast = convertProgram(astBuffer, programParent, this.scope);\n            // Make lazy and apply LRU cache to not hog the memory\n            Object.defineProperty(this.info, 'ast', {\n                get: () => {\n                    if (this.graph.astLru.has(fileName)) {\n                        return this.graph.astLru.get(fileName);\n                    }\n                    else {\n                        const parsedAst = this.tryParse();\n                        // If the cache is not disabled, we need to keep the AST in memory\n                        // until the end when the cache is generated\n                        if (this.options.cache !== false) {\n                            Object.defineProperty(this.info, 'ast', {\n                                value: parsedAst\n                            });\n                            return parsedAst;\n                        }\n                        // Otherwise, we keep it in a small LRU cache to not hog too much\n                        // memory but allow the same AST to be requested several times.\n                        this.graph.astLru.set(fileName, parsedAst);\n                        return parsedAst;\n                    }\n                }\n            });\n        }\n        timeEnd('generate ast', 3);\n    }\n    toJSON() {\n        return {\n            ast: this.info.ast,\n            attributes: this.info.attributes,\n            code: this.info.code,\n            customTransformCache: this.customTransformCache,\n            dependencies: Array.from(this.dependencies, getId),\n            id: this.id,\n            meta: this.info.meta,\n            moduleSideEffects: this.info.moduleSideEffects,\n            originalCode: this.originalCode,\n            originalSourcemap: this.originalSourcemap,\n            resolvedIds: this.resolvedIds,\n            sourcemapChain: this.sourcemapChain,\n            syntheticNamedExports: this.info.syntheticNamedExports,\n            transformDependencies: this.transformDependencies,\n            transformFiles: this.transformFiles\n        };\n    }\n    traceVariable(name, { importerForSideEffects, isExportAllSearch, searchedNamesAndModules } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT) {\n        const localVariable = this.scope.variables.get(name);\n        if (localVariable) {\n            return localVariable;\n        }\n        const importDescription = this.importDescriptions.get(name);\n        if (importDescription) {\n            const otherModule = importDescription.module;\n            if (otherModule instanceof Module && importDescription.name === '*') {\n                return otherModule.namespace;\n            }\n            const [declaration] = getVariableForExportNameRecursive(otherModule, importDescription.name, importerForSideEffects || this, isExportAllSearch, searchedNamesAndModules);\n            if (!declaration) {\n                return this.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingExport)(importDescription.name, this.id, otherModule.id), importDescription.start);\n            }\n            return declaration;\n        }\n        return null;\n    }\n    updateOptions({ meta, moduleSideEffects, syntheticNamedExports }) {\n        if (moduleSideEffects != null) {\n            this.info.moduleSideEffects = moduleSideEffects;\n        }\n        if (syntheticNamedExports != null) {\n            this.info.syntheticNamedExports = syntheticNamedExports;\n        }\n        if (meta != null) {\n            Object.assign(this.info.meta, meta);\n        }\n    }\n    addDynamicImport(node) {\n        let argument = node.sourceAstNode;\n        if (argument.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteral) {\n            if (argument.quasis.length === 1 &&\n                typeof argument.quasis[0].value.cooked === 'string') {\n                argument = argument.quasis[0].value.cooked;\n            }\n        }\n        else if (argument.type === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.Literal &&\n            typeof argument.value === 'string') {\n            argument = argument.value;\n        }\n        this.dynamicImports.push({ argument, id: null, node, resolution: null });\n    }\n    assertUniqueExportName(name, nodeStart) {\n        if (this.exports.has(name) || this.reexportDescriptions.has(name)) {\n            this.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logDuplicateExportError)(name), nodeStart);\n        }\n    }\n    addExport(node) {\n        if (node instanceof ExportDefaultDeclaration) {\n            // export default foo;\n            this.assertUniqueExportName('default', node.start);\n            this.exports.set('default', {\n                identifier: node.variable.getAssignedVariableName(),\n                localName: 'default'\n            });\n        }\n        else if (node instanceof ExportAllDeclaration) {\n            const source = node.source.value;\n            this.addSource(source, node);\n            if (node.exported) {\n                // export * as name from './other'\n                const name = node.exported instanceof Literal ? node.exported.value : node.exported.name;\n                this.assertUniqueExportName(name, node.exported.start);\n                this.reexportDescriptions.set(name, {\n                    localName: '*',\n                    module: null, // filled in later,\n                    source,\n                    start: node.start\n                });\n            }\n            else {\n                // export * from './other'\n                this.exportAllSources.add(source);\n            }\n        }\n        else if (node.source instanceof Literal) {\n            // export { name } from './other'\n            const source = node.source.value;\n            this.addSource(source, node);\n            for (const { exported, local, start } of node.specifiers) {\n                const name = exported instanceof Literal ? exported.value : exported.name;\n                this.assertUniqueExportName(name, start);\n                this.reexportDescriptions.set(name, {\n                    localName: local instanceof Literal ? local.value : local.name,\n                    module: null, // filled in later,\n                    source,\n                    start\n                });\n            }\n        }\n        else if (node.declaration) {\n            const declaration = node.declaration;\n            if (declaration instanceof VariableDeclaration) {\n                // export var { foo, bar } = ...\n                // export var foo = 1, bar = 2;\n                for (const declarator of declaration.declarations) {\n                    for (const localName of extractAssignedNames(declarator.id)) {\n                        this.assertUniqueExportName(localName, declarator.id.start);\n                        this.exports.set(localName, { identifier: null, localName });\n                    }\n                }\n            }\n            else {\n                // export function foo () {}\n                const localName = declaration.id.name;\n                this.assertUniqueExportName(localName, declaration.id.start);\n                this.exports.set(localName, { identifier: null, localName });\n            }\n        }\n        else {\n            // export { foo, bar, baz }\n            for (const { local, exported } of node.specifiers) {\n                // except for reexports, local must be an Identifier\n                const localName = local.name;\n                const exportedName = exported instanceof Identifier ? exported.name : exported.value;\n                this.assertUniqueExportName(exportedName, exported.start);\n                this.exports.set(exportedName, { identifier: null, localName });\n            }\n        }\n    }\n    addImport(node) {\n        const source = node.source.value;\n        this.addSource(source, node);\n        for (const specifier of node.specifiers) {\n            const localName = specifier.local.name;\n            if (this.scope.variables.has(localName) || this.importDescriptions.has(localName)) {\n                this.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logRedeclarationError)(localName), specifier.local.start);\n            }\n            const name = specifier instanceof ImportDefaultSpecifier\n                ? 'default'\n                : specifier instanceof ImportNamespaceSpecifier\n                    ? '*'\n                    : specifier.imported instanceof Identifier\n                        ? specifier.imported.name\n                        : specifier.imported.value;\n            this.importDescriptions.set(localName, {\n                module: null, // filled in later\n                name,\n                source,\n                start: specifier.start\n            });\n        }\n    }\n    addImportSource(importSource) {\n        if (importSource && !this.sourcesWithAttributes.has(importSource)) {\n            this.sourcesWithAttributes.set(importSource, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT);\n        }\n    }\n    addImportMeta(node) {\n        this.importMetas.push(node);\n    }\n    addLocationToLogProps(properties, pos) {\n        properties.id = this.id;\n        properties.pos = pos;\n        let code = this.info.code;\n        const location = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.locate)(code, pos, { offsetLine: 1 });\n        if (location) {\n            let { column, line } = location;\n            try {\n                ({ column, line } = getOriginalLocation(this.sourcemapChain, { column, line }));\n                code = this.originalCode;\n            }\n            catch (error_) {\n                this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidSourcemapForError)(error_, this.id, column, line, pos));\n            }\n            (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.augmentCodeLocation)(properties, { column, line }, code, this.id);\n        }\n    }\n    addModulesToImportDescriptions(importDescription) {\n        for (const specifier of importDescription.values()) {\n            const { id } = this.resolvedIds[specifier.source];\n            specifier.module = this.graph.modulesById.get(id);\n        }\n    }\n    addRelevantSideEffectDependencies(relevantDependencies, necessaryDependencies, alwaysCheckedDependencies) {\n        const handledDependencies = new Set();\n        const addSideEffectDependencies = (possibleDependencies) => {\n            for (const dependency of possibleDependencies) {\n                if (handledDependencies.has(dependency)) {\n                    continue;\n                }\n                handledDependencies.add(dependency);\n                if (necessaryDependencies.has(dependency)) {\n                    relevantDependencies.add(dependency);\n                    continue;\n                }\n                if (!(dependency.info.moduleSideEffects || alwaysCheckedDependencies.has(dependency))) {\n                    continue;\n                }\n                if (dependency instanceof ExternalModule || dependency.hasEffects()) {\n                    relevantDependencies.add(dependency);\n                    continue;\n                }\n                addSideEffectDependencies(dependency.dependencies);\n            }\n        };\n        addSideEffectDependencies(this.dependencies);\n        addSideEffectDependencies(alwaysCheckedDependencies);\n    }\n    addSource(source, declaration) {\n        const parsedAttributes = getAttributesFromImportExportDeclaration(declaration.attributes);\n        const existingAttributes = this.sourcesWithAttributes.get(source);\n        if (existingAttributes) {\n            if (doAttributesDiffer(existingAttributes, parsedAttributes)) {\n                this.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInconsistentImportAttributes)(existingAttributes, parsedAttributes, source, this.id), declaration.start);\n            }\n        }\n        else {\n            this.sourcesWithAttributes.set(source, parsedAttributes);\n        }\n    }\n    getImportedJsxFactoryVariable(baseName, nodeStart, importSource) {\n        const { id } = this.resolvedIds[importSource];\n        const module = this.graph.modulesById.get(id);\n        const [variable] = module.getVariableForExportName(baseName);\n        if (!variable) {\n            return this.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingJsxExport)(baseName, id, this.id), nodeStart);\n        }\n        return variable;\n    }\n    getVariableFromNamespaceReexports(name, importerForSideEffects, searchedNamesAndModules) {\n        let foundSyntheticDeclaration = null;\n        const foundInternalDeclarations = new Map();\n        const foundExternalDeclarations = new Set();\n        for (const module of this.exportAllModules) {\n            // Synthetic namespaces should not hide \"regular\" exports of the same name\n            if (module.info.syntheticNamedExports === name) {\n                continue;\n            }\n            const [variable, indirectExternal] = getVariableForExportNameRecursive(module, name, importerForSideEffects, true, \n            // We are creating a copy to handle the case where the same binding is\n            // imported through different namespace reexports gracefully\n            copyNameToModulesMap(searchedNamesAndModules));\n            if (module instanceof ExternalModule || indirectExternal) {\n                foundExternalDeclarations.add(variable);\n            }\n            else if (variable instanceof SyntheticNamedExportVariable) {\n                if (!foundSyntheticDeclaration) {\n                    foundSyntheticDeclaration = variable;\n                }\n            }\n            else if (variable) {\n                foundInternalDeclarations.set(variable, module);\n            }\n        }\n        if (foundInternalDeclarations.size > 0) {\n            const foundDeclarationList = [...foundInternalDeclarations];\n            const usedDeclaration = foundDeclarationList[0][0];\n            if (foundDeclarationList.length === 1) {\n                return [usedDeclaration];\n            }\n            this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logNamespaceConflict)(name, this.id, foundDeclarationList.map(([, module]) => module.id)));\n            // TODO we are pretending it was not found while it should behave like \"undefined\"\n            return [null];\n        }\n        if (foundExternalDeclarations.size > 0) {\n            const foundDeclarationList = [...foundExternalDeclarations];\n            const usedDeclaration = foundDeclarationList[0];\n            if (foundDeclarationList.length > 1) {\n                this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAmbiguousExternalNamespaces)(name, this.id, usedDeclaration.module.id, foundDeclarationList.map(declaration => declaration.module.id)));\n            }\n            return [usedDeclaration, true];\n        }\n        if (foundSyntheticDeclaration) {\n            return [foundSyntheticDeclaration];\n        }\n        return [null];\n    }\n    includeAndGetAdditionalMergedNamespaces() {\n        const externalNamespaces = new Set();\n        const syntheticNamespaces = new Set();\n        for (const module of [this, ...this.exportAllModules]) {\n            if (module instanceof ExternalModule) {\n                const [externalVariable] = module.getVariableForExportName('*');\n                externalVariable.include();\n                this.includedImports.add(externalVariable);\n                externalNamespaces.add(externalVariable);\n            }\n            else if (module.info.syntheticNamedExports) {\n                const syntheticNamespace = module.getSyntheticNamespace();\n                syntheticNamespace.include();\n                this.includedImports.add(syntheticNamespace);\n                syntheticNamespaces.add(syntheticNamespace);\n            }\n        }\n        return [...syntheticNamespaces, ...externalNamespaces];\n    }\n    includeDynamicImport(node) {\n        const resolution = this.dynamicImports.find(dynamicImport => dynamicImport.node === node).resolution;\n        if (resolution instanceof Module) {\n            resolution.includedDynamicImporters.push(this);\n            const importedNames = this.options.treeshake\n                ? node.getDeterministicImportedNames()\n                : undefined;\n            if (importedNames) {\n                resolution.includeExportsByNames(importedNames);\n            }\n            else {\n                resolution.includeAllExports(true);\n            }\n        }\n    }\n    includeVariable(variable) {\n        const variableModule = variable.module;\n        if (variable.included) {\n            if (variableModule instanceof Module && variableModule !== this) {\n                getAndExtendSideEffectModules(variable, this);\n            }\n        }\n        else {\n            variable.include();\n            this.graph.needsTreeshakingPass = true;\n            if (variableModule instanceof Module) {\n                if (!variableModule.isExecuted) {\n                    markModuleAndImpureDependenciesAsExecuted(variableModule);\n                }\n                if (variableModule !== this) {\n                    const sideEffectModules = getAndExtendSideEffectModules(variable, this);\n                    for (const module of sideEffectModules) {\n                        if (!module.isExecuted) {\n                            markModuleAndImpureDependenciesAsExecuted(module);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    includeVariableInModule(variable) {\n        this.includeVariable(variable);\n        const variableModule = variable.module;\n        if (variableModule && variableModule !== this) {\n            this.includedImports.add(variable);\n        }\n    }\n    shimMissingExport(name) {\n        this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logShimmedExport)(this.id, name));\n        this.exports.set(name, MISSING_EXPORT_SHIM_DESCRIPTION);\n    }\n    tryParse() {\n        try {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.parseAst)(this.info.code, { jsx: this.options.jsx !== false });\n        }\n        catch (error_) {\n            return this.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logModuleParseError)(error_, this.id), error_.pos);\n        }\n    }\n}\n// if there is a cyclic import in the reexport chain, we should not\n// import from the original module but from the cyclic module to not\n// mess up execution order.\nfunction setAlternativeExporterIfCyclic(variable, importer, reexporter) {\n    if (variable.module instanceof Module && variable.module !== reexporter) {\n        const exporterCycles = variable.module.cycles;\n        if (exporterCycles.size > 0) {\n            const importerCycles = reexporter.cycles;\n            for (const cycleSymbol of importerCycles) {\n                if (exporterCycles.has(cycleSymbol)) {\n                    importer.alternativeReexportModules.set(variable, reexporter);\n                    break;\n                }\n            }\n        }\n    }\n}\nconst copyNameToModulesMap = (searchedNamesAndModules) => searchedNamesAndModules &&\n    new Map(Array.from(searchedNamesAndModules, ([name, modules]) => [name, new Set(modules)]));\n\nconst concatSeparator = (out, next) => (next ? `${out}\\n${next}` : out);\nconst concatDblSeparator = (out, next) => (next ? `${out}\\n\\n${next}` : out);\nasync function createAddons(options, outputPluginDriver, chunk) {\n    try {\n        let [banner, footer, intro, outro] = await Promise.all([\n            outputPluginDriver.hookReduceValue('banner', options.banner(chunk), [chunk], concatSeparator),\n            outputPluginDriver.hookReduceValue('footer', options.footer(chunk), [chunk], concatSeparator),\n            outputPluginDriver.hookReduceValue('intro', options.intro(chunk), [chunk], concatDblSeparator),\n            outputPluginDriver.hookReduceValue('outro', options.outro(chunk), [chunk], concatDblSeparator)\n        ]);\n        if (intro)\n            intro += '\\n\\n';\n        if (outro)\n            outro = `\\n\\n${outro}`;\n        if (banner)\n            banner += '\\n';\n        if (footer)\n            footer = '\\n' + footer;\n        return { banner, footer, intro, outro };\n    }\n    catch (error_) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAddonNotGenerated)(error_.message, error_.hook, error_.plugin));\n    }\n}\n\nconst DECONFLICT_IMPORTED_VARIABLES_BY_FORMAT = {\n    amd: deconflictImportsOther,\n    cjs: deconflictImportsOther,\n    es: deconflictImportsEsmOrSystem,\n    iife: deconflictImportsOther,\n    system: deconflictImportsEsmOrSystem,\n    umd: deconflictImportsOther\n};\nfunction deconflictChunk(modules, dependenciesToBeDeconflicted, imports, usedNames, format, interop, preserveModules, externalLiveBindings, chunkByModule, externalChunkByModule, syntheticExports, exportNamesByVariable, accessedGlobalsByScope, includedNamespaces) {\n    const reversedModules = [...modules].reverse();\n    for (const module of reversedModules) {\n        module.scope.addUsedOutsideNames(usedNames, format, exportNamesByVariable, accessedGlobalsByScope);\n    }\n    deconflictTopLevelVariables(usedNames, reversedModules, includedNamespaces);\n    DECONFLICT_IMPORTED_VARIABLES_BY_FORMAT[format](usedNames, imports, dependenciesToBeDeconflicted, interop, preserveModules, externalLiveBindings, chunkByModule, externalChunkByModule, syntheticExports);\n    for (const module of reversedModules) {\n        module.scope.deconflict(format, exportNamesByVariable, accessedGlobalsByScope);\n    }\n}\nfunction deconflictImportsEsmOrSystem(usedNames, imports, dependenciesToBeDeconflicted, _interop, preserveModules, _externalLiveBindings, chunkByModule, externalChunkByModule, syntheticExports) {\n    // This is needed for namespace reexports\n    for (const dependency of dependenciesToBeDeconflicted.dependencies) {\n        if (preserveModules || dependency instanceof ExternalChunk) {\n            dependency.variableName = getSafeName(dependency.suggestedVariableName, usedNames, null);\n        }\n    }\n    for (const variable of imports) {\n        const module = variable.module;\n        const name = variable.name;\n        if (variable.isNamespace && (preserveModules || module instanceof ExternalModule)) {\n            variable.setRenderNames(null, (module instanceof ExternalModule\n                ? externalChunkByModule.get(module)\n                : chunkByModule.get(module)).variableName);\n        }\n        else if (module instanceof ExternalModule && name === 'default') {\n            variable.setRenderNames(null, getSafeName([...module.exportedVariables].some(([exportedVariable, exportedName]) => exportedName === '*' && exportedVariable.included)\n                ? module.suggestedVariableName + '__default'\n                : module.suggestedVariableName, usedNames, variable.forbiddenNames));\n        }\n        else {\n            variable.setRenderNames(null, getSafeName(makeLegal(name), usedNames, variable.forbiddenNames));\n        }\n    }\n    for (const variable of syntheticExports) {\n        variable.setRenderNames(null, getSafeName(variable.name, usedNames, variable.forbiddenNames));\n    }\n}\nfunction deconflictImportsOther(usedNames, imports, { deconflictedDefault, deconflictedNamespace, dependencies }, interop, preserveModules, externalLiveBindings, chunkByModule, externalChunkByModule) {\n    for (const chunk of dependencies) {\n        chunk.variableName = getSafeName(chunk.suggestedVariableName, usedNames, null);\n    }\n    for (const chunk of deconflictedNamespace) {\n        chunk.namespaceVariableName = getSafeName(`${chunk.suggestedVariableName}__namespace`, usedNames, null);\n    }\n    for (const externalModule of deconflictedDefault) {\n        externalModule.defaultVariableName =\n            deconflictedNamespace.has(externalModule) &&\n                canDefaultBeTakenFromNamespace(interop(externalModule.id), externalLiveBindings)\n                ? externalModule.namespaceVariableName\n                : getSafeName(`${externalModule.suggestedVariableName}__default`, usedNames, null);\n    }\n    for (const variable of imports) {\n        const module = variable.module;\n        if (module instanceof ExternalModule) {\n            const chunk = externalChunkByModule.get(module);\n            const name = variable.name;\n            if (name === 'default') {\n                const moduleInterop = interop(module.id);\n                const variableName = defaultInteropHelpersByInteropType[moduleInterop]\n                    ? chunk.defaultVariableName\n                    : chunk.variableName;\n                if (isDefaultAProperty(moduleInterop, externalLiveBindings)) {\n                    variable.setRenderNames(variableName, 'default');\n                }\n                else {\n                    variable.setRenderNames(null, variableName);\n                }\n            }\n            else if (name === '*') {\n                variable.setRenderNames(null, namespaceInteropHelpersByInteropType[interop(module.id)]\n                    ? chunk.namespaceVariableName\n                    : chunk.variableName);\n            }\n            else {\n                // if the second parameter is `null`, it uses its \"name\" for the property name\n                variable.setRenderNames(chunk.variableName, null);\n            }\n        }\n        else {\n            const chunk = chunkByModule.get(module);\n            if (preserveModules && variable.isNamespace) {\n                variable.setRenderNames(null, chunk.exportMode === 'default' ? chunk.namespaceVariableName : chunk.variableName);\n            }\n            else if (chunk.exportMode === 'default') {\n                variable.setRenderNames(null, chunk.variableName);\n            }\n            else {\n                variable.setRenderNames(chunk.variableName, chunk.getVariableExportName(variable));\n            }\n        }\n    }\n}\nfunction deconflictTopLevelVariables(usedNames, modules, includedNamespaces) {\n    for (const module of modules) {\n        for (const variable of module.scope.variables.values()) {\n            if (variable.included &&\n                // this will only happen for exports in some formats\n                !(variable.renderBaseName ||\n                    (variable instanceof ExportDefaultVariable && variable.getOriginalVariable() !== variable))) {\n                variable.setRenderNames(null, getSafeName(variable.name, usedNames, variable.forbiddenNames));\n            }\n        }\n        if (includedNamespaces.has(module)) {\n            const namespace = module.namespace;\n            namespace.setRenderNames(null, getSafeName(namespace.name, usedNames, namespace.forbiddenNames));\n        }\n    }\n}\n\nfunction assignExportsToMangledNames(exports, exportsByName, exportNamesByVariable) {\n    let nameIndex = 0;\n    for (const variable of exports) {\n        let [exportName] = variable.name;\n        if (exportsByName.has(exportName)) {\n            do {\n                exportName = toBase64(++nameIndex);\n                // skip past leading number identifiers\n                if (exportName.charCodeAt(0) === 49 /* '1' */) {\n                    nameIndex += 9 * 64 ** (exportName.length - 1);\n                    exportName = toBase64(nameIndex);\n                }\n            } while (RESERVED_NAMES.has(exportName) || exportsByName.has(exportName));\n        }\n        exportsByName.set(exportName, variable);\n        exportNamesByVariable.set(variable, [exportName]);\n    }\n}\nfunction assignExportsToNames(exports, exportsByName, exportNamesByVariable) {\n    for (const variable of exports) {\n        let nameIndex = 0;\n        let exportName = variable.name;\n        while (exportsByName.has(exportName)) {\n            exportName = variable.name + '$' + ++nameIndex;\n        }\n        exportsByName.set(exportName, variable);\n        exportNamesByVariable.set(variable, [exportName]);\n    }\n}\n\nfunction getExportMode(chunk, { exports: exportMode, name, format }, facadeModuleId, log) {\n    const exportKeys = chunk.getExportNames();\n    if (exportMode === 'default') {\n        if (exportKeys.length !== 1 || exportKeys[0] !== 'default') {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logIncompatibleExportOptionValue)('default', exportKeys, facadeModuleId));\n        }\n    }\n    else if (exportMode === 'none' && exportKeys.length > 0) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logIncompatibleExportOptionValue)('none', exportKeys, facadeModuleId));\n    }\n    if (exportMode === 'auto') {\n        if (exportKeys.length === 0) {\n            exportMode = 'none';\n        }\n        else if (exportKeys.length === 1 && exportKeys[0] === 'default') {\n            exportMode = 'default';\n        }\n        else {\n            if (format !== 'es' && format !== 'system' && exportKeys.includes('default')) {\n                log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMixedExport)(facadeModuleId, name));\n            }\n            exportMode = 'named';\n        }\n    }\n    return exportMode;\n}\n\nfunction guessIndentString(code) {\n    const lines = code.split('\\n');\n    const tabbed = lines.filter(line => /^\\t+/.test(line));\n    const spaced = lines.filter(line => /^ {2,}/.test(line));\n    if (tabbed.length === 0 && spaced.length === 0) {\n        return null;\n    }\n    // More lines tabbed than spaced? Assume tabs, and\n    // default to tabs in the case of a tie (or nothing\n    // to go on)\n    if (tabbed.length >= spaced.length) {\n        return '\\t';\n    }\n    // Otherwise, we need to guess the multiple\n    const min = spaced.reduce((previous, current) => {\n        const numberSpaces = /^ +/.exec(current)[0].length;\n        return Math.min(numberSpaces, previous);\n    }, Infinity);\n    return ' '.repeat(min);\n}\nfunction getIndentString(modules, options) {\n    if (options.indent !== true)\n        return options.indent;\n    for (const module of modules) {\n        const indent = guessIndentString(module.originalCode);\n        if (indent !== null)\n            return indent;\n    }\n    return '\\t';\n}\n\nfunction getStaticDependencies(chunk, orderedModules, chunkByModule, externalChunkByModule) {\n    const staticDependencyBlocks = [];\n    const handledDependencies = new Set();\n    for (let modulePos = orderedModules.length - 1; modulePos >= 0; modulePos--) {\n        const module = orderedModules[modulePos];\n        if (!handledDependencies.has(module)) {\n            const staticDependencies = [];\n            addStaticDependencies(module, staticDependencies, handledDependencies, chunk, chunkByModule, externalChunkByModule);\n            staticDependencyBlocks.unshift(staticDependencies);\n        }\n    }\n    const dependencies = new Set();\n    for (const block of staticDependencyBlocks) {\n        for (const dependency of block) {\n            dependencies.add(dependency);\n        }\n    }\n    return dependencies;\n}\nfunction addStaticDependencies(module, staticDependencies, handledModules, chunk, chunkByModule, externalChunkByModule) {\n    const dependencies = module.getDependenciesToBeIncluded();\n    for (const dependency of dependencies) {\n        if (dependency instanceof ExternalModule) {\n            staticDependencies.push(externalChunkByModule.get(dependency));\n            continue;\n        }\n        const dependencyChunk = chunkByModule.get(dependency);\n        if (dependencyChunk !== chunk) {\n            staticDependencies.push(dependencyChunk);\n            continue;\n        }\n        if (!handledModules.has(dependency)) {\n            handledModules.add(dependency);\n            addStaticDependencies(dependency, staticDependencies, handledModules, chunk, chunkByModule, externalChunkByModule);\n        }\n    }\n}\n\n// Four random characters from the private use area to minimize risk of\n// conflicts\nconst hashPlaceholderLeft = '!~{';\nconst hashPlaceholderRight = '}~';\nconst hashPlaceholderOverhead = hashPlaceholderLeft.length + hashPlaceholderRight.length;\n// This is the size of a 128-bits xxhash with base64url encoding\nconst MAX_HASH_SIZE = 22;\nconst DEFAULT_HASH_SIZE = 8;\nconst getHashPlaceholderGenerator = () => {\n    let nextIndex = 0;\n    return (optionName, hashSize) => {\n        if (hashSize > MAX_HASH_SIZE) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Hashes cannot be longer than ${MAX_HASH_SIZE} characters, received ${hashSize}. Check the \"${optionName}\" option.`));\n        }\n        const placeholder = `${hashPlaceholderLeft}${toBase64(++nextIndex).padStart(hashSize - hashPlaceholderOverhead, '0')}${hashPlaceholderRight}`;\n        if (placeholder.length > hashSize) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`To generate hashes for this number of chunks (currently ${nextIndex}), you need a minimum hash size of ${placeholder.length}, received ${hashSize}. Check the \"${optionName}\" option.`));\n        }\n        return placeholder;\n    };\n};\nconst REPLACER_REGEX = new RegExp(`${hashPlaceholderLeft}[0-9a-zA-Z_$]{1,${MAX_HASH_SIZE - hashPlaceholderOverhead}}${hashPlaceholderRight}`, 'g');\nconst replacePlaceholders = (code, hashesByPlaceholder) => code.replace(REPLACER_REGEX, placeholder => hashesByPlaceholder.get(placeholder) || placeholder);\nconst replaceSinglePlaceholder = (code, placeholder, value) => code.replace(REPLACER_REGEX, match => (match === placeholder ? value : match));\nconst replacePlaceholdersWithDefaultAndGetContainedPlaceholders = (code, placeholders) => {\n    const containedPlaceholders = new Set();\n    const transformedCode = code.replace(REPLACER_REGEX, placeholder => {\n        if (placeholders.has(placeholder)) {\n            containedPlaceholders.add(placeholder);\n            return `${hashPlaceholderLeft}${'0'.repeat(placeholder.length - hashPlaceholderOverhead)}${hashPlaceholderRight}`;\n        }\n        return placeholder;\n    });\n    return { containedPlaceholders, transformedCode };\n};\n\nconst lowercaseBundleKeys = Symbol('bundleKeys');\nconst FILE_PLACEHOLDER = {\n    type: 'placeholder'\n};\nconst getOutputBundle = (outputBundleBase) => {\n    const reservedLowercaseBundleKeys = new Set();\n    return new Proxy(outputBundleBase, {\n        deleteProperty(target, key) {\n            if (typeof key === 'string') {\n                reservedLowercaseBundleKeys.delete(key.toLowerCase());\n            }\n            return Reflect.deleteProperty(target, key);\n        },\n        get(target, key) {\n            if (key === lowercaseBundleKeys) {\n                return reservedLowercaseBundleKeys;\n            }\n            return Reflect.get(target, key);\n        },\n        set(target, key, value) {\n            if (typeof key === 'string') {\n                reservedLowercaseBundleKeys.add(key.toLowerCase());\n            }\n            return Reflect.set(target, key, value);\n        }\n    });\n};\nconst removeUnreferencedAssets = (outputBundle) => {\n    const unreferencedAssets = new Set();\n    const bundleEntries = Object.values(outputBundle);\n    for (const asset of bundleEntries) {\n        if (asset.type === 'asset' && asset.needsCodeReference) {\n            unreferencedAssets.add(asset.fileName);\n        }\n    }\n    for (const chunk of bundleEntries) {\n        if (chunk.type === 'chunk') {\n            for (const referencedFile of chunk.referencedFiles) {\n                if (unreferencedAssets.has(referencedFile)) {\n                    unreferencedAssets.delete(referencedFile);\n                }\n            }\n        }\n    }\n    for (const file of unreferencedAssets) {\n        delete outputBundle[file];\n    }\n};\n\nfunction renderNamePattern(pattern, patternName, replacements) {\n    if ((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isPathFragment)(pattern))\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Invalid pattern \"${pattern}\" for \"${patternName}\", patterns can be neither absolute nor relative paths. If you want your files to be stored in a subdirectory, write its name without a leading slash like this: subdirectory/pattern.`));\n    return pattern.replace(/\\[(\\w+)(:\\d+)?]/g, (_match, type, size) => {\n        if (!replacements.hasOwnProperty(type) || (size && type !== 'hash')) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`\"[${type}${size || ''}]\" is not a valid placeholder in the \"${patternName}\" pattern.`));\n        }\n        const replacement = replacements[type](size && Number.parseInt(size.slice(1)));\n        if ((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isPathFragment)(replacement))\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Invalid substitution \"${replacement}\" for placeholder \"[${type}]\" in \"${patternName}\" pattern, can be neither absolute nor relative path.`));\n        return replacement;\n    });\n}\nfunction makeUnique(name, { [lowercaseBundleKeys]: reservedLowercaseBundleKeys }) {\n    if (!reservedLowercaseBundleKeys.has(name.toLowerCase()))\n        return name;\n    const extension = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.extname)(name);\n    name = name.slice(0, Math.max(0, name.length - extension.length));\n    let uniqueName, uniqueIndex = 1;\n    while (reservedLowercaseBundleKeys.has((uniqueName = name + ++uniqueIndex + extension).toLowerCase()))\n        ;\n    return uniqueName;\n}\n\nconst NON_ASSET_EXTENSIONS = new Set([\n    '.js',\n    '.jsx',\n    '.ts',\n    '.tsx',\n    '.mjs',\n    '.mts',\n    '.cjs',\n    '.cts'\n]);\nfunction getGlobalName(chunk, globals, hasExports, log) {\n    const globalName = typeof globals === 'function' ? globals(chunk.id) : globals[chunk.id];\n    if (globalName) {\n        return globalName;\n    }\n    if (hasExports) {\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingGlobalName)(chunk.id, chunk.variableName));\n        return chunk.variableName;\n    }\n}\nclass Chunk {\n    constructor(orderedModules, inputOptions, outputOptions, unsetOptions, pluginDriver, modulesById, chunkByModule, externalChunkByModule, facadeChunkByModule, includedNamespaces, manualChunkAlias, getPlaceholder, bundle, inputBase, snippets) {\n        this.orderedModules = orderedModules;\n        this.inputOptions = inputOptions;\n        this.outputOptions = outputOptions;\n        this.unsetOptions = unsetOptions;\n        this.pluginDriver = pluginDriver;\n        this.modulesById = modulesById;\n        this.chunkByModule = chunkByModule;\n        this.externalChunkByModule = externalChunkByModule;\n        this.facadeChunkByModule = facadeChunkByModule;\n        this.includedNamespaces = includedNamespaces;\n        this.manualChunkAlias = manualChunkAlias;\n        this.getPlaceholder = getPlaceholder;\n        this.bundle = bundle;\n        this.inputBase = inputBase;\n        this.snippets = snippets;\n        this.entryModules = [];\n        this.exportMode = 'named';\n        this.facadeModule = null;\n        this.namespaceVariableName = '';\n        this.variableName = '';\n        this.accessedGlobalsByScope = new Map();\n        this.dependencies = new Set();\n        this.dynamicEntryModules = [];\n        this.dynamicName = null;\n        this.exportNamesByVariable = new Map();\n        this.exports = new Set();\n        this.exportsByName = new Map();\n        this.fileName = null;\n        this.implicitEntryModules = [];\n        this.implicitlyLoadedBefore = new Set();\n        this.imports = new Set();\n        this.includedDynamicImports = null;\n        this.includedReexportsByModule = new Map();\n        // This may be updated in the constructor\n        this.isEmpty = true;\n        this.name = null;\n        this.needsExportsShim = false;\n        this.preRenderedChunkInfo = null;\n        this.preliminaryFileName = null;\n        this.preliminarySourcemapFileName = null;\n        this.renderedChunkInfo = null;\n        this.renderedDependencies = null;\n        this.renderedModules = Object.create(null);\n        this.sortedExportNames = null;\n        this.strictFacade = false;\n        this.execIndex = orderedModules.length > 0 ? orderedModules[0].execIndex : Infinity;\n        const chunkModules = new Set(orderedModules);\n        for (const module of orderedModules) {\n            chunkByModule.set(module, this);\n            if (module.namespace.included && !outputOptions.preserveModules) {\n                includedNamespaces.add(module);\n            }\n            if (this.isEmpty && module.isIncluded()) {\n                this.isEmpty = false;\n            }\n            if (module.info.isEntry || outputOptions.preserveModules) {\n                this.entryModules.push(module);\n            }\n            for (const importer of module.includedDynamicImporters) {\n                if (!chunkModules.has(importer)) {\n                    this.dynamicEntryModules.push(module);\n                    // Modules with synthetic exports need an artificial namespace for dynamic imports\n                    if (module.info.syntheticNamedExports) {\n                        includedNamespaces.add(module);\n                        this.exports.add(module.namespace);\n                    }\n                }\n            }\n            if (module.implicitlyLoadedAfter.size > 0) {\n                this.implicitEntryModules.push(module);\n            }\n        }\n        this.suggestedVariableName = makeLegal(this.generateVariableName());\n    }\n    static generateFacade(inputOptions, outputOptions, unsetOptions, pluginDriver, modulesById, chunkByModule, externalChunkByModule, facadeChunkByModule, includedNamespaces, facadedModule, facadeName, getPlaceholder, bundle, inputBase, snippets) {\n        const chunk = new Chunk([], inputOptions, outputOptions, unsetOptions, pluginDriver, modulesById, chunkByModule, externalChunkByModule, facadeChunkByModule, includedNamespaces, null, getPlaceholder, bundle, inputBase, snippets);\n        chunk.assignFacadeName(facadeName, facadedModule);\n        if (!facadeChunkByModule.has(facadedModule)) {\n            facadeChunkByModule.set(facadedModule, chunk);\n        }\n        for (const dependency of facadedModule.getDependenciesToBeIncluded()) {\n            chunk.dependencies.add(dependency instanceof Module\n                ? chunkByModule.get(dependency)\n                : externalChunkByModule.get(dependency));\n        }\n        if (!chunk.dependencies.has(chunkByModule.get(facadedModule)) &&\n            facadedModule.info.moduleSideEffects &&\n            facadedModule.hasEffects()) {\n            chunk.dependencies.add(chunkByModule.get(facadedModule));\n        }\n        chunk.ensureReexportsAreAvailableForModule(facadedModule);\n        chunk.facadeModule = facadedModule;\n        chunk.strictFacade = true;\n        return chunk;\n    }\n    canModuleBeFacade(module, exposedVariables) {\n        const moduleExportNamesByVariable = module.getExportNamesByVariable();\n        // All exports of this chunk need to be exposed by the candidate module\n        for (const exposedVariable of this.exports) {\n            if (!moduleExportNamesByVariable.has(exposedVariable)) {\n                return false;\n            }\n        }\n        // Additionally, we need to expose namespaces of dynamic entries that are not the facade module and exports from other entry modules\n        for (const exposedVariable of exposedVariables) {\n            if (!(exposedVariable.module === module ||\n                moduleExportNamesByVariable.has(exposedVariable) ||\n                (exposedVariable instanceof SyntheticNamedExportVariable &&\n                    moduleExportNamesByVariable.has(exposedVariable.getBaseVariable())))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    finalizeChunk(code, map, sourcemapFileName, hashesByPlaceholder) {\n        const renderedChunkInfo = this.getRenderedChunkInfo();\n        const finalize = (code) => replacePlaceholders(code, hashesByPlaceholder);\n        const preliminaryFileName = renderedChunkInfo.fileName;\n        const fileName = (this.fileName = finalize(preliminaryFileName));\n        return {\n            ...renderedChunkInfo,\n            code,\n            dynamicImports: renderedChunkInfo.dynamicImports.map(finalize),\n            fileName,\n            implicitlyLoadedBefore: renderedChunkInfo.implicitlyLoadedBefore.map(finalize),\n            importedBindings: Object.fromEntries(Object.entries(renderedChunkInfo.importedBindings).map(([fileName, bindings]) => [\n                finalize(fileName),\n                bindings\n            ])),\n            imports: renderedChunkInfo.imports.map(finalize),\n            map,\n            preliminaryFileName,\n            referencedFiles: renderedChunkInfo.referencedFiles.map(finalize),\n            sourcemapFileName\n        };\n    }\n    generateExports() {\n        this.sortedExportNames = null;\n        const remainingExports = new Set(this.exports);\n        if (this.facadeModule !== null &&\n            (this.facadeModule.preserveSignature !== false || this.strictFacade)) {\n            const exportNamesByVariable = this.facadeModule.getExportNamesByVariable();\n            for (const [variable, exportNames] of exportNamesByVariable) {\n                this.exportNamesByVariable.set(variable, [...exportNames]);\n                for (const exportName of exportNames) {\n                    this.exportsByName.set(exportName, variable);\n                }\n                remainingExports.delete(variable);\n            }\n        }\n        if (this.outputOptions.minifyInternalExports) {\n            assignExportsToMangledNames(remainingExports, this.exportsByName, this.exportNamesByVariable);\n        }\n        else {\n            assignExportsToNames(remainingExports, this.exportsByName, this.exportNamesByVariable);\n        }\n        if (this.outputOptions.preserveModules || (this.facadeModule && this.facadeModule.info.isEntry))\n            this.exportMode = getExportMode(this, this.outputOptions, this.facadeModule.id, this.inputOptions.onLog);\n    }\n    generateFacades() {\n        const facades = [];\n        const entryModules = new Set([...this.entryModules, ...this.implicitEntryModules]);\n        const exposedVariables = new Set(this.dynamicEntryModules.map(({ namespace }) => namespace));\n        for (const module of entryModules) {\n            if (module.preserveSignature) {\n                for (const exportedVariable of module.getExportNamesByVariable().keys()) {\n                    // We need to expose all entry exports from this chunk\n                    if (this.chunkByModule.get(exportedVariable.module) === this) {\n                        exposedVariables.add(exportedVariable);\n                    }\n                }\n            }\n        }\n        for (const module of entryModules) {\n            const requiredFacades = Array.from(new Set(module.chunkNames.filter(({ isUserDefined }) => isUserDefined).map(({ name }) => name)), \n            // mapping must run after Set 'name' dedupe\n            name => ({\n                name\n            }));\n            if (requiredFacades.length === 0 && module.isUserDefinedEntryPoint) {\n                requiredFacades.push({});\n            }\n            requiredFacades.push(...Array.from(module.chunkFileNames, fileName => ({ fileName })));\n            if (requiredFacades.length === 0) {\n                requiredFacades.push({});\n            }\n            if (!this.facadeModule) {\n                const needsStrictFacade = !this.outputOptions.preserveModules &&\n                    (module.preserveSignature === 'strict' ||\n                        (module.preserveSignature === 'exports-only' &&\n                            module.getExportNamesByVariable().size > 0));\n                if (!needsStrictFacade || this.canModuleBeFacade(module, exposedVariables)) {\n                    this.facadeModule = module;\n                    this.facadeChunkByModule.set(module, this);\n                    if (module.preserveSignature) {\n                        this.strictFacade = needsStrictFacade;\n                    }\n                    this.assignFacadeName(requiredFacades.shift(), module, this.outputOptions.preserveModules);\n                }\n            }\n            for (const facadeName of requiredFacades) {\n                facades.push(Chunk.generateFacade(this.inputOptions, this.outputOptions, this.unsetOptions, this.pluginDriver, this.modulesById, this.chunkByModule, this.externalChunkByModule, this.facadeChunkByModule, this.includedNamespaces, module, facadeName, this.getPlaceholder, this.bundle, this.inputBase, this.snippets));\n            }\n        }\n        for (const module of this.dynamicEntryModules) {\n            if (module.info.syntheticNamedExports)\n                continue;\n            if (!this.facadeModule && this.canModuleBeFacade(module, exposedVariables)) {\n                this.facadeModule = module;\n                this.facadeChunkByModule.set(module, this);\n                this.strictFacade = true;\n                this.dynamicName = getChunkNameFromModule(module);\n            }\n            else if (this.facadeModule === module &&\n                !this.strictFacade &&\n                this.canModuleBeFacade(module, exposedVariables)) {\n                this.strictFacade = true;\n            }\n            else if (!this.facadeChunkByModule.get(module)?.strictFacade) {\n                this.includedNamespaces.add(module);\n                this.exports.add(module.namespace);\n            }\n        }\n        if (!this.outputOptions.preserveModules) {\n            this.addNecessaryImportsForFacades();\n        }\n        return facades;\n    }\n    getChunkName() {\n        return (this.name ??= this.outputOptions.sanitizeFileName(this.getFallbackChunkName()));\n    }\n    getExportNames() {\n        return (this.sortedExportNames ??= [...this.exportsByName.keys()].sort());\n    }\n    getFileName() {\n        return this.fileName || this.getPreliminaryFileName().fileName;\n    }\n    getImportPath(importer) {\n        return escapeId((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getImportPath)(importer, this.getFileName(), this.outputOptions.format === 'amd' && !this.outputOptions.amd.forceJsExtensionForImports, true));\n    }\n    getPreliminaryFileName() {\n        if (this.preliminaryFileName) {\n            return this.preliminaryFileName;\n        }\n        let fileName;\n        let hashPlaceholder = null;\n        const { chunkFileNames, entryFileNames, file, format, preserveModules } = this.outputOptions;\n        if (file) {\n            fileName = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(file);\n        }\n        else if (this.fileName === null) {\n            const [pattern, patternName] = preserveModules || this.facadeModule?.isUserDefinedEntryPoint\n                ? [entryFileNames, 'output.entryFileNames']\n                : [chunkFileNames, 'output.chunkFileNames'];\n            fileName = renderNamePattern(typeof pattern === 'function' ? pattern(this.getPreRenderedChunkInfo()) : pattern, patternName, {\n                format: () => format,\n                hash: size => hashPlaceholder ||\n                    (hashPlaceholder = this.getPlaceholder(patternName, size || DEFAULT_HASH_SIZE)),\n                name: () => this.getChunkName()\n            });\n            if (!hashPlaceholder) {\n                fileName = makeUnique(fileName, this.bundle);\n            }\n        }\n        else {\n            fileName = this.fileName;\n        }\n        if (!hashPlaceholder) {\n            this.bundle[fileName] = FILE_PLACEHOLDER;\n        }\n        // Caching is essential to not conflict with the file name reservation above\n        return (this.preliminaryFileName = { fileName, hashPlaceholder });\n    }\n    getPreliminarySourcemapFileName() {\n        if (this.preliminarySourcemapFileName) {\n            return this.preliminarySourcemapFileName;\n        }\n        let sourcemapFileName = null;\n        let hashPlaceholder = null;\n        const { sourcemapFileNames, format } = this.outputOptions;\n        if (sourcemapFileNames) {\n            const [pattern, patternName] = [sourcemapFileNames, 'output.sourcemapFileNames'];\n            sourcemapFileName = renderNamePattern(typeof pattern === 'function' ? pattern(this.getPreRenderedChunkInfo()) : pattern, patternName, {\n                chunkhash: () => this.getPreliminaryFileName().hashPlaceholder || '',\n                format: () => format,\n                hash: size => hashPlaceholder ||\n                    (hashPlaceholder = this.getPlaceholder(patternName, size || DEFAULT_HASH_SIZE)),\n                name: () => this.getChunkName()\n            });\n            if (!hashPlaceholder) {\n                sourcemapFileName = makeUnique(sourcemapFileName, this.bundle);\n            }\n        }\n        else {\n            return null;\n        }\n        return (this.preliminarySourcemapFileName = { fileName: sourcemapFileName, hashPlaceholder });\n    }\n    getRenderedChunkInfo() {\n        if (this.renderedChunkInfo) {\n            return this.renderedChunkInfo;\n        }\n        return (this.renderedChunkInfo = {\n            ...this.getPreRenderedChunkInfo(),\n            dynamicImports: this.getDynamicDependencies().map(resolveFileName),\n            fileName: this.getFileName(),\n            implicitlyLoadedBefore: Array.from(this.implicitlyLoadedBefore, resolveFileName),\n            importedBindings: getImportedBindingsPerDependency(this.getRenderedDependencies(), resolveFileName),\n            imports: Array.from(this.dependencies, resolveFileName),\n            modules: this.renderedModules,\n            referencedFiles: this.getReferencedFiles()\n        });\n    }\n    getVariableExportName(variable) {\n        if (this.outputOptions.preserveModules && variable instanceof NamespaceVariable) {\n            return '*';\n        }\n        return this.exportNamesByVariable.get(variable)[0];\n    }\n    link() {\n        this.dependencies = getStaticDependencies(this, this.orderedModules, this.chunkByModule, this.externalChunkByModule);\n        for (const module of this.orderedModules) {\n            this.addImplicitlyLoadedBeforeFromModule(module);\n            this.setUpChunkImportsAndExportsForModule(module);\n        }\n    }\n    async render() {\n        const { dependencies, exportMode, facadeModule, inputOptions: { onLog }, outputOptions, pluginDriver, snippets } = this;\n        const { format, hoistTransitiveImports, preserveModules } = outputOptions;\n        // for static and dynamic entry points, add transitive dependencies to this\n        // chunk's dependencies to avoid loading latency\n        if (hoistTransitiveImports && !preserveModules && facadeModule !== null) {\n            for (const dep of dependencies) {\n                if (dep instanceof Chunk)\n                    this.inlineChunkDependencies(dep);\n            }\n        }\n        const preliminaryFileName = this.getPreliminaryFileName();\n        const preliminarySourcemapFileName = this.getPreliminarySourcemapFileName();\n        const { accessedGlobals, indent, magicString, renderedSource, usedModules, usesTopLevelAwait } = this.renderModules(preliminaryFileName.fileName);\n        const renderedDependencies = [...this.getRenderedDependencies().values()];\n        const renderedExports = exportMode === 'none' ? [] : this.getChunkExportDeclarations(format);\n        let hasExports = renderedExports.length > 0;\n        let hasDefaultExport = false;\n        for (const renderedDependency of renderedDependencies) {\n            const { reexports } = renderedDependency;\n            if (reexports?.length) {\n                hasExports = true;\n                if (!hasDefaultExport && reexports.some(reexport => reexport.reexported === 'default')) {\n                    hasDefaultExport = true;\n                }\n                if (format === 'es') {\n                    renderedDependency.reexports = reexports.filter(({ reexported }) => !renderedExports.find(({ exported }) => exported === reexported));\n                }\n            }\n        }\n        if (!hasDefaultExport) {\n            for (const { exported } of renderedExports) {\n                if (exported === 'default') {\n                    hasDefaultExport = true;\n                    break;\n                }\n            }\n        }\n        const { intro, outro, banner, footer } = await createAddons(outputOptions, pluginDriver, this.getRenderedChunkInfo());\n        finalisers[format](renderedSource, {\n            accessedGlobals,\n            dependencies: renderedDependencies,\n            exports: renderedExports,\n            hasDefaultExport,\n            hasExports,\n            id: preliminaryFileName.fileName,\n            indent,\n            intro,\n            isEntryFacade: preserveModules || (facadeModule !== null && facadeModule.info.isEntry),\n            isModuleFacade: facadeModule !== null,\n            log: onLog,\n            namedExportsMode: exportMode !== 'default',\n            outro,\n            snippets,\n            usesTopLevelAwait\n        }, outputOptions);\n        if (banner)\n            magicString.prepend(banner);\n        if (format === 'es' || format === 'cjs') {\n            const shebang = facadeModule !== null && facadeModule.info.isEntry && facadeModule.shebang;\n            if (shebang) {\n                magicString.prepend(`#!${shebang}\\n`);\n            }\n        }\n        if (footer)\n            magicString.append(footer);\n        return {\n            chunk: this,\n            magicString,\n            preliminaryFileName,\n            preliminarySourcemapFileName,\n            usedModules\n        };\n    }\n    addImplicitlyLoadedBeforeFromModule(baseModule) {\n        const { chunkByModule, implicitlyLoadedBefore } = this;\n        for (const module of baseModule.implicitlyLoadedBefore) {\n            const chunk = chunkByModule.get(module);\n            if (chunk && chunk !== this) {\n                implicitlyLoadedBefore.add(chunk);\n            }\n        }\n    }\n    addNecessaryImportsForFacades() {\n        for (const [module, variables] of this.includedReexportsByModule) {\n            if (this.includedNamespaces.has(module)) {\n                for (const variable of variables) {\n                    this.imports.add(variable);\n                }\n            }\n        }\n    }\n    assignFacadeName({ fileName, name }, facadedModule, preservePath) {\n        if (fileName) {\n            this.fileName = fileName;\n        }\n        else {\n            this.name = this.outputOptions.sanitizeFileName(name ||\n                (preservePath\n                    ? this.getPreserveModulesChunkNameFromModule(facadedModule)\n                    : getChunkNameFromModule(facadedModule)));\n        }\n    }\n    checkCircularDependencyImport(variable, importingModule) {\n        const variableModule = variable.module;\n        if (variableModule instanceof Module) {\n            const exportChunk = this.chunkByModule.get(variableModule);\n            let alternativeReexportModule;\n            do {\n                alternativeReexportModule = importingModule.alternativeReexportModules.get(variable);\n                if (alternativeReexportModule) {\n                    const exportingChunk = this.chunkByModule.get(alternativeReexportModule);\n                    if (exportingChunk !== exportChunk) {\n                        this.inputOptions.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logCyclicCrossChunkReexport)(\n                        // Namespaces do not have an export name\n                        variableModule.getExportNamesByVariable().get(variable)?.[0] || '*', variableModule.id, alternativeReexportModule.id, importingModule.id, this.outputOptions.preserveModules));\n                    }\n                    importingModule = alternativeReexportModule;\n                }\n            } while (alternativeReexportModule);\n        }\n    }\n    ensureReexportsAreAvailableForModule(module) {\n        const includedReexports = [];\n        const map = module.getExportNamesByVariable();\n        for (const exportedVariable of map.keys()) {\n            const isSynthetic = exportedVariable instanceof SyntheticNamedExportVariable;\n            const importedVariable = isSynthetic ? exportedVariable.getBaseVariable() : exportedVariable;\n            this.checkCircularDependencyImport(importedVariable, module);\n            // When preserving modules, we do not create namespace objects but directly\n            // use the actual namespaces, which would be broken by this logic.\n            if (!(importedVariable instanceof NamespaceVariable && this.outputOptions.preserveModules)) {\n                const exportingModule = importedVariable.module;\n                if (exportingModule instanceof Module) {\n                    const chunk = this.chunkByModule.get(exportingModule);\n                    if (chunk && chunk !== this) {\n                        chunk.exports.add(importedVariable);\n                        includedReexports.push(importedVariable);\n                        if (isSynthetic) {\n                            this.imports.add(importedVariable);\n                        }\n                    }\n                }\n            }\n        }\n        if (includedReexports.length > 0) {\n            this.includedReexportsByModule.set(module, includedReexports);\n        }\n    }\n    generateVariableName() {\n        if (this.manualChunkAlias) {\n            return this.manualChunkAlias;\n        }\n        const moduleForNaming = this.entryModules[0] ||\n            this.implicitEntryModules[0] ||\n            this.dynamicEntryModules[0] ||\n            this.orderedModules[this.orderedModules.length - 1];\n        if (moduleForNaming) {\n            return getChunkNameFromModule(moduleForNaming);\n        }\n        return 'chunk';\n    }\n    getChunkExportDeclarations(format) {\n        const exports = [];\n        for (const exportName of this.getExportNames()) {\n            if (exportName[0] === '*')\n                continue;\n            const variable = this.exportsByName.get(exportName);\n            if (!(variable instanceof SyntheticNamedExportVariable)) {\n                const module = variable.module;\n                if (module) {\n                    const chunk = this.chunkByModule.get(module);\n                    if (chunk !== this) {\n                        if (!chunk || format !== 'es') {\n                            continue;\n                        }\n                        const chunkDep = this.renderedDependencies.get(chunk);\n                        if (!chunkDep) {\n                            continue;\n                        }\n                        const { imports, reexports } = chunkDep;\n                        const importedByReexported = reexports?.find(({ reexported }) => reexported === exportName);\n                        const isImported = imports?.find(({ imported }) => imported === importedByReexported?.imported);\n                        if (!isImported) {\n                            continue;\n                        }\n                    }\n                }\n            }\n            let expression = null;\n            let hoisted = false;\n            let local = variable.getName(this.snippets.getPropertyAccess);\n            if (variable instanceof LocalVariable) {\n                for (const declaration of variable.declarations) {\n                    if (declaration.parent instanceof FunctionDeclaration ||\n                        (declaration instanceof ExportDefaultDeclaration &&\n                            declaration.declaration instanceof FunctionDeclaration)) {\n                        hoisted = true;\n                        break;\n                    }\n                }\n            }\n            else if (variable instanceof SyntheticNamedExportVariable) {\n                expression = local;\n                if (format === 'es') {\n                    local = variable.renderName;\n                }\n            }\n            exports.push({\n                exported: exportName,\n                expression,\n                hoisted,\n                local\n            });\n        }\n        return exports;\n    }\n    getDependenciesToBeDeconflicted(addNonNamespacesAndInteropHelpers, addDependenciesWithoutBindings, interop) {\n        const dependencies = new Set();\n        const deconflictedDefault = new Set();\n        const deconflictedNamespace = new Set();\n        for (const variable of [...this.exportNamesByVariable.keys(), ...this.imports]) {\n            if (addNonNamespacesAndInteropHelpers || variable.isNamespace) {\n                const module = variable.module;\n                if (module instanceof ExternalModule) {\n                    const chunk = this.externalChunkByModule.get(module);\n                    dependencies.add(chunk);\n                    if (addNonNamespacesAndInteropHelpers) {\n                        if (variable.name === 'default') {\n                            if (defaultInteropHelpersByInteropType[interop(module.id)]) {\n                                deconflictedDefault.add(chunk);\n                            }\n                        }\n                        else if (variable.isNamespace &&\n                            namespaceInteropHelpersByInteropType[interop(module.id)] &&\n                            (this.imports.has(variable) ||\n                                !this.exportNamesByVariable.get(variable)?.every(name => name.startsWith('*')))) {\n                            // We only need to deconflict it if the namespace is actually\n                            // created as a variable, i.e. because it is used internally or\n                            // because it is reexported as an object\n                            deconflictedNamespace.add(chunk);\n                        }\n                    }\n                }\n                else {\n                    const chunk = this.chunkByModule.get(module);\n                    if (chunk !== this) {\n                        dependencies.add(chunk);\n                        if (addNonNamespacesAndInteropHelpers &&\n                            chunk.exportMode === 'default' &&\n                            variable.isNamespace) {\n                            deconflictedNamespace.add(chunk);\n                        }\n                    }\n                }\n            }\n        }\n        if (addDependenciesWithoutBindings) {\n            for (const dependency of this.dependencies) {\n                dependencies.add(dependency);\n            }\n        }\n        return { deconflictedDefault, deconflictedNamespace, dependencies };\n    }\n    getDynamicDependencies() {\n        return this.getIncludedDynamicImports()\n            .map(resolvedDynamicImport => resolvedDynamicImport.facadeChunk ||\n            resolvedDynamicImport.chunk ||\n            resolvedDynamicImport.externalChunk ||\n            resolvedDynamicImport.resolution)\n            .filter((resolution) => resolution !== this &&\n            (resolution instanceof Chunk || resolution instanceof ExternalChunk));\n    }\n    getDynamicImportStringAndAttributes(resolution, fileName) {\n        if (resolution instanceof ExternalModule) {\n            const chunk = this.externalChunkByModule.get(resolution);\n            return [`'${chunk.getImportPath(fileName)}'`, chunk.getImportAttributes(this.snippets)];\n        }\n        return [\n            resolution || '',\n            (this.outputOptions.format === 'es' && this.outputOptions.externalImportAttributes) || null\n        ];\n    }\n    getFallbackChunkName() {\n        if (this.manualChunkAlias) {\n            return this.manualChunkAlias;\n        }\n        if (this.dynamicName) {\n            return this.dynamicName;\n        }\n        if (this.fileName) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getAliasName)(this.fileName);\n        }\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getAliasName)(this.orderedModules[this.orderedModules.length - 1].id);\n    }\n    getImportSpecifiers() {\n        const { interop } = this.outputOptions;\n        const importsByDependency = new Map();\n        for (const variable of this.imports) {\n            const module = variable.module;\n            let dependency;\n            let imported;\n            if (module instanceof ExternalModule) {\n                dependency = this.externalChunkByModule.get(module);\n                imported = variable.name;\n                if (imported !== 'default' && imported !== '*' && interop(module.id) === 'defaultOnly') {\n                    return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnexpectedNamedImport)(module.id, imported, false));\n                }\n            }\n            else {\n                dependency = this.chunkByModule.get(module);\n                imported = dependency.getVariableExportName(variable);\n            }\n            getOrCreate(importsByDependency, dependency, getNewArray).push({\n                imported,\n                local: variable.getName(this.snippets.getPropertyAccess)\n            });\n        }\n        return importsByDependency;\n    }\n    getIncludedDynamicImports() {\n        if (this.includedDynamicImports) {\n            return this.includedDynamicImports;\n        }\n        const includedDynamicImports = [];\n        for (const module of this.orderedModules) {\n            for (const { node, resolution } of module.dynamicImports) {\n                if (!node.included) {\n                    continue;\n                }\n                includedDynamicImports.push(resolution instanceof Module\n                    ? {\n                        chunk: this.chunkByModule.get(resolution),\n                        externalChunk: null,\n                        facadeChunk: this.facadeChunkByModule.get(resolution),\n                        node,\n                        resolution\n                    }\n                    : resolution instanceof ExternalModule\n                        ? {\n                            chunk: null,\n                            externalChunk: this.externalChunkByModule.get(resolution),\n                            facadeChunk: null,\n                            node,\n                            resolution\n                        }\n                        : { chunk: null, externalChunk: null, facadeChunk: null, node, resolution });\n            }\n        }\n        return (this.includedDynamicImports = includedDynamicImports);\n    }\n    getPreRenderedChunkInfo() {\n        if (this.preRenderedChunkInfo) {\n            return this.preRenderedChunkInfo;\n        }\n        const { dynamicEntryModules, facadeModule, implicitEntryModules, orderedModules } = this;\n        return (this.preRenderedChunkInfo = {\n            exports: this.getExportNames(),\n            facadeModuleId: facadeModule && facadeModule.id,\n            isDynamicEntry: dynamicEntryModules.length > 0,\n            isEntry: !!facadeModule?.info.isEntry,\n            isImplicitEntry: implicitEntryModules.length > 0,\n            moduleIds: orderedModules.map(({ id }) => id),\n            name: this.getChunkName(),\n            type: 'chunk'\n        });\n    }\n    getPreserveModulesChunkNameFromModule(module) {\n        const predefinedChunkName = getPredefinedChunkNameFromModule(module);\n        if (predefinedChunkName)\n            return predefinedChunkName;\n        const { preserveModulesRoot, sanitizeFileName } = this.outputOptions;\n        const sanitizedId = sanitizeFileName((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(module.id.split(QUERY_HASH_REGEX, 1)[0]));\n        const extensionName = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.extname)(sanitizedId);\n        const idWithoutExtension = NON_ASSET_EXTENSIONS.has(extensionName)\n            ? sanitizedId.slice(0, -extensionName.length)\n            : sanitizedId;\n        if ((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isAbsolute)(idWithoutExtension)) {\n            if (preserveModulesRoot && (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(idWithoutExtension).startsWith(preserveModulesRoot)) {\n                return idWithoutExtension.slice(preserveModulesRoot.length).replace(/^[/\\\\]/, '');\n            }\n            else {\n                // handle edge case in Windows\n                if (this.inputBase === '/' && !idWithoutExtension.startsWith('/')) {\n                    return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.relative)(this.inputBase, idWithoutExtension.replace(/^[a-zA-Z]:[/\\\\]/, '/'));\n                }\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.relative)(this.inputBase, idWithoutExtension);\n            }\n        }\n        else {\n            return (this.outputOptions.virtualDirname.replace(/\\/$/, '') + '/' + (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(idWithoutExtension));\n        }\n    }\n    getReexportSpecifiers() {\n        const { externalLiveBindings, interop } = this.outputOptions;\n        const reexportSpecifiers = new Map();\n        for (let exportName of this.getExportNames()) {\n            let dependency;\n            let imported;\n            let needsLiveBinding = false;\n            if (exportName[0] === '*') {\n                const id = exportName.slice(1);\n                if (interop(id) === 'defaultOnly') {\n                    this.inputOptions.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnexpectedNamespaceReexport)(id));\n                }\n                needsLiveBinding = externalLiveBindings;\n                dependency = this.externalChunkByModule.get(this.modulesById.get(id));\n                imported = exportName = '*';\n            }\n            else {\n                const variable = this.exportsByName.get(exportName);\n                if (variable instanceof SyntheticNamedExportVariable)\n                    continue;\n                const module = variable.module;\n                if (module instanceof Module) {\n                    dependency = this.chunkByModule.get(module);\n                    if (dependency === this)\n                        continue;\n                    imported = dependency.getVariableExportName(variable);\n                    needsLiveBinding = variable.isReassigned;\n                }\n                else {\n                    dependency = this.externalChunkByModule.get(module);\n                    imported = variable.name;\n                    if (imported !== 'default' && imported !== '*' && interop(module.id) === 'defaultOnly') {\n                        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnexpectedNamedImport)(module.id, imported, true));\n                    }\n                    needsLiveBinding =\n                        externalLiveBindings &&\n                            (imported !== 'default' || isDefaultAProperty(interop(module.id), true));\n                }\n            }\n            getOrCreate(reexportSpecifiers, dependency, getNewArray).push({\n                imported,\n                needsLiveBinding,\n                reexported: exportName\n            });\n        }\n        return reexportSpecifiers;\n    }\n    getReferencedFiles() {\n        const referencedFiles = new Set();\n        for (const module of this.orderedModules) {\n            for (const meta of module.importMetas) {\n                const fileName = meta.getReferencedFileName(this.pluginDriver);\n                if (fileName) {\n                    referencedFiles.add(fileName);\n                }\n            }\n        }\n        return [...referencedFiles];\n    }\n    getRenderedDependencies() {\n        if (this.renderedDependencies) {\n            return this.renderedDependencies;\n        }\n        const importSpecifiers = this.getImportSpecifiers();\n        const reexportSpecifiers = this.getReexportSpecifiers();\n        const renderedDependencies = new Map();\n        const fileName = this.getFileName();\n        for (const dependency of this.dependencies) {\n            const imports = importSpecifiers.get(dependency) || null;\n            const reexports = reexportSpecifiers.get(dependency) || null;\n            const namedExportsMode = dependency instanceof ExternalChunk || dependency.exportMode !== 'default';\n            const importPath = dependency.getImportPath(fileName);\n            renderedDependencies.set(dependency, {\n                attributes: dependency instanceof ExternalChunk\n                    ? dependency.getImportAttributes(this.snippets)\n                    : null,\n                defaultVariableName: dependency.defaultVariableName,\n                globalName: dependency instanceof ExternalChunk &&\n                    (this.outputOptions.format === 'umd' || this.outputOptions.format === 'iife') &&\n                    getGlobalName(dependency, this.outputOptions.globals, (imports || reexports) !== null, this.inputOptions.onLog),\n                importPath,\n                imports,\n                isChunk: dependency instanceof Chunk,\n                name: dependency.variableName,\n                namedExportsMode,\n                namespaceVariableName: dependency.namespaceVariableName,\n                reexports\n            });\n        }\n        return (this.renderedDependencies = renderedDependencies);\n    }\n    inlineChunkDependencies(chunk) {\n        for (const dep of chunk.dependencies) {\n            if (this.dependencies.has(dep))\n                continue;\n            this.dependencies.add(dep);\n            if (dep instanceof Chunk) {\n                this.inlineChunkDependencies(dep);\n            }\n        }\n    }\n    // This method changes properties on the AST before rendering and must not be async\n    renderModules(fileName) {\n        const { accessedGlobalsByScope, dependencies, exportNamesByVariable, includedNamespaces, inputOptions: { onLog }, isEmpty, orderedModules, outputOptions, pluginDriver, renderedModules, snippets } = this;\n        const { compact, format, freeze, generatedCode: { symbols } } = outputOptions;\n        const { _, cnst, n } = snippets;\n        this.setDynamicImportResolutions(fileName);\n        this.setImportMetaResolutions(fileName);\n        this.setIdentifierRenderResolutions();\n        const magicString = new Bundle$1({ separator: `${n}${n}` });\n        const indent = getIndentString(orderedModules, outputOptions);\n        const usedModules = [];\n        let hoistedSource = '';\n        const accessedGlobals = new Set();\n        const renderedModuleSources = new Map();\n        const renderOptions = {\n            accessedDocumentCurrentScript: false,\n            exportNamesByVariable,\n            format,\n            freeze,\n            indent,\n            pluginDriver,\n            snippets,\n            symbols,\n            useOriginalName: null\n        };\n        let usesTopLevelAwait = false;\n        for (const module of orderedModules) {\n            let renderedLength = 0;\n            let source;\n            if (module.isIncluded() || includedNamespaces.has(module)) {\n                const rendered = module.render(renderOptions);\n                if (!renderOptions.accessedDocumentCurrentScript &&\n                    formatsMaybeAccessDocumentCurrentScript.includes(format)) {\n                    this.accessedGlobalsByScope.get(module.scope)?.delete(DOCUMENT_CURRENT_SCRIPT);\n                }\n                renderOptions.accessedDocumentCurrentScript = false;\n                ({ source } = rendered);\n                usesTopLevelAwait ||= rendered.usesTopLevelAwait;\n                renderedLength = source.length();\n                if (renderedLength) {\n                    if (compact && source.lastLine().includes('//'))\n                        source.append('\\n');\n                    renderedModuleSources.set(module, source);\n                    magicString.addSource(source);\n                    usedModules.push(module);\n                }\n                const namespace = module.namespace;\n                if (includedNamespaces.has(module)) {\n                    const rendered = namespace.renderBlock(renderOptions);\n                    if (namespace.renderFirst())\n                        hoistedSource += n + rendered;\n                    else\n                        magicString.addSource(new MagicString(rendered));\n                }\n                const accessedGlobalVariables = accessedGlobalsByScope.get(module.scope);\n                if (accessedGlobalVariables) {\n                    for (const name of accessedGlobalVariables) {\n                        accessedGlobals.add(name);\n                    }\n                }\n            }\n            const { renderedExports, removedExports } = module.getRenderedExports();\n            renderedModules[module.id] = {\n                get code() {\n                    return source?.toString() ?? null;\n                },\n                originalLength: module.originalCode.length,\n                removedExports,\n                renderedExports,\n                renderedLength\n            };\n        }\n        if (hoistedSource)\n            magicString.prepend(hoistedSource + n + n);\n        if (this.needsExportsShim) {\n            magicString.prepend(`${n}${cnst} ${MISSING_EXPORT_SHIM_VARIABLE}${_}=${_}void 0;${n}${n}`);\n        }\n        const renderedSource = compact ? magicString : magicString.trim();\n        if (isEmpty && this.getExportNames().length === 0 && dependencies.size === 0) {\n            onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logEmptyChunk)(this.getChunkName()));\n        }\n        return { accessedGlobals, indent, magicString, renderedSource, usedModules, usesTopLevelAwait };\n    }\n    setDynamicImportResolutions(fileName) {\n        const { accessedGlobalsByScope, outputOptions, pluginDriver, snippets } = this;\n        for (const resolvedDynamicImport of this.getIncludedDynamicImports()) {\n            if (resolvedDynamicImport.chunk) {\n                const { chunk, facadeChunk, node, resolution } = resolvedDynamicImport;\n                if (chunk === this) {\n                    node.setInternalResolution(resolution.namespace);\n                }\n                else {\n                    node.setExternalResolution((facadeChunk || chunk).exportMode, resolution, outputOptions, snippets, pluginDriver, accessedGlobalsByScope, `'${(facadeChunk || chunk).getImportPath(fileName)}'`, !facadeChunk?.strictFacade && chunk.exportNamesByVariable.get(resolution.namespace)[0], null);\n                }\n            }\n            else {\n                const { node, resolution } = resolvedDynamicImport;\n                const [resolutionString, attributes] = this.getDynamicImportStringAndAttributes(resolution, fileName);\n                node.setExternalResolution('external', resolution, outputOptions, snippets, pluginDriver, accessedGlobalsByScope, resolutionString, false, attributes);\n            }\n        }\n    }\n    setIdentifierRenderResolutions() {\n        const { format, generatedCode: { symbols }, interop, preserveModules, externalLiveBindings } = this.outputOptions;\n        const syntheticExports = new Set();\n        for (const exportName of this.getExportNames()) {\n            const exportVariable = this.exportsByName.get(exportName);\n            if (format !== 'es' &&\n                format !== 'system' &&\n                exportVariable.isReassigned &&\n                !exportVariable.isId) {\n                exportVariable.setRenderNames('exports', exportName);\n            }\n            else if (exportVariable instanceof SyntheticNamedExportVariable) {\n                syntheticExports.add(exportVariable);\n            }\n            else {\n                exportVariable.setRenderNames(null, null);\n            }\n        }\n        for (const module of this.orderedModules) {\n            if (module.needsExportShim) {\n                this.needsExportsShim = true;\n                break;\n            }\n        }\n        const usedNames = new Set(['Object', 'Promise']);\n        if (this.needsExportsShim) {\n            usedNames.add(MISSING_EXPORT_SHIM_VARIABLE);\n        }\n        if (symbols) {\n            usedNames.add('Symbol');\n        }\n        switch (format) {\n            case 'system': {\n                usedNames.add('module').add('exports');\n                break;\n            }\n            case 'es': {\n                break;\n            }\n            case 'cjs': {\n                usedNames.add('module').add('require').add('__filename').add('__dirname');\n            }\n            // fallthrough\n            default: {\n                usedNames.add('exports');\n                for (const helper of HELPER_NAMES) {\n                    usedNames.add(helper);\n                }\n            }\n        }\n        deconflictChunk(this.orderedModules, this.getDependenciesToBeDeconflicted(format !== 'es' && format !== 'system', format === 'amd' || format === 'umd' || format === 'iife', interop), this.imports, usedNames, format, interop, preserveModules, externalLiveBindings, this.chunkByModule, this.externalChunkByModule, syntheticExports, this.exportNamesByVariable, this.accessedGlobalsByScope, this.includedNamespaces);\n    }\n    setImportMetaResolutions(fileName) {\n        const { accessedGlobalsByScope, includedNamespaces, orderedModules, outputOptions: { format } } = this;\n        for (const module of orderedModules) {\n            for (const importMeta of module.importMetas) {\n                importMeta.setResolution(format, accessedGlobalsByScope, fileName);\n            }\n            if (includedNamespaces.has(module)) {\n                module.namespace.prepare(accessedGlobalsByScope);\n            }\n        }\n    }\n    setUpChunkImportsAndExportsForModule(module) {\n        const moduleImports = new Set(module.includedImports);\n        // when we are not preserving modules, we need to make all namespace variables available for\n        // rendering the namespace object\n        if (!this.outputOptions.preserveModules && this.includedNamespaces.has(module)) {\n            const memberVariables = module.namespace.getMemberVariables();\n            for (const variable of Object.values(memberVariables)) {\n                if (variable.included) {\n                    moduleImports.add(variable);\n                }\n            }\n        }\n        for (let variable of moduleImports) {\n            if (variable instanceof ExportDefaultVariable) {\n                variable = variable.getOriginalVariable();\n            }\n            if (variable instanceof SyntheticNamedExportVariable) {\n                variable = variable.getBaseVariable();\n            }\n            const chunk = this.chunkByModule.get(variable.module);\n            if (chunk !== this) {\n                this.imports.add(variable);\n                if (variable.module instanceof Module) {\n                    this.checkCircularDependencyImport(variable, module);\n                    // When preserving modules, we do not create namespace objects but directly\n                    // use the actual namespaces, which would be broken by this logic.\n                    if (!(variable instanceof NamespaceVariable && this.outputOptions.preserveModules)) {\n                        chunk.exports.add(variable);\n                    }\n                }\n            }\n        }\n        if (this.includedNamespaces.has(module) ||\n            (module.info.isEntry && module.preserveSignature !== false) ||\n            module.includedDynamicImporters.some(importer => this.chunkByModule.get(importer) !== this)) {\n            this.ensureReexportsAreAvailableForModule(module);\n        }\n        for (const { node, resolution } of module.dynamicImports) {\n            if (node.included &&\n                resolution instanceof Module &&\n                this.chunkByModule.get(resolution) === this &&\n                !this.includedNamespaces.has(resolution)) {\n                this.includedNamespaces.add(resolution);\n                this.ensureReexportsAreAvailableForModule(resolution);\n            }\n        }\n    }\n}\nfunction getChunkNameFromModule(module) {\n    return getPredefinedChunkNameFromModule(module) ?? (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.getAliasName)(module.id);\n}\nfunction getPredefinedChunkNameFromModule(module) {\n    return (module.chunkNames.find(({ isUserDefined }) => isUserDefined)?.name ?? module.chunkNames[0]?.name);\n}\nfunction getImportedBindingsPerDependency(renderedDependencies, resolveFileName) {\n    const importedBindingsPerDependency = {};\n    for (const [dependency, declaration] of renderedDependencies) {\n        const specifiers = new Set();\n        if (declaration.imports) {\n            for (const { imported } of declaration.imports) {\n                specifiers.add(imported);\n            }\n        }\n        if (declaration.reexports) {\n            for (const { imported } of declaration.reexports) {\n                specifiers.add(imported);\n            }\n        }\n        importedBindingsPerDependency[resolveFileName(dependency)] = [...specifiers];\n    }\n    return importedBindingsPerDependency;\n}\nconst QUERY_HASH_REGEX = /[#?]/;\nconst resolveFileName = (dependency) => dependency.getFileName();\n\n/**\n * Concatenate a number of iterables to a new iterable without fully evaluating\n * their iterators. Useful when e.g. working with large sets or lists and when\n * there is a chance that the iterators will not be fully exhausted.\n */\nfunction* concatLazy(iterables) {\n    for (const iterable of iterables) {\n        yield* iterable;\n    }\n}\n\n/**\n * At its core, the algorithm first starts from each static or dynamic entry\n * point and then assigns that entry point to all modules than can be reached\n * via static imports. We call this the *dependent entry points* of that\n * module.\n *\n * Then we group all modules with the same dependent entry points into chunks\n * as those modules will always be loaded together.\n *\n * One non-trivial optimization we can apply is that dynamic entries are\n * different from static entries in so far as when a dynamic import occurs,\n * some modules are already in memory. If some of these modules are also\n * dependencies of the dynamic entry, then it does not make sense to create a\n * separate chunk for them. Instead, the dynamic import target can load them\n * from the importing chunk.\n *\n * With regard to chunking, if B is implicitly loaded after A, then this can be\n * handled the same way as if there was a dynamic import A => B.\n *\n * Example:\n * Assume A -> B (A imports B), A => C (A dynamically imports C) and C -> B.\n * Then the initial algorithm would assign A into the A chunk, C into the C\n * chunk and B into the AC chunk, i.e. the chunk with the dependent entry\n * points A and C.\n * However we know that C can only be loaded from A, so A and its dependency B\n * must already be in memory when C is loaded. So it is enough to create only\n * two chunks A containing [AB] and C containing [C].\n *\n * So we do not assign the dynamic entry C as dependent entry point to modules\n * that are already loaded.\n *\n * In a more complex example, let us assume that we have entry points X and Y.\n * Further, let us assume\n * X -> A, X -> B, X -> C,\n * Y -> A, Y -> B,\n * A => D,\n * D -> B, D -> C\n * So without dynamic import optimization, the dependent entry points are\n * A: XY, B: DXY, C: DX, D: D, X: X, Y: Y, so we would for now create six\n * chunks.\n *\n * Now D is loaded only after A is loaded. But A is loaded if either X is\n * loaded or Y is loaded. So the modules that are already in memory when D is\n * loaded are the intersection of all modules that X depends on with all\n * modules that Y depends on, which in this case are the modules A and B.\n * We could also say they are all modules that have both X and Y as dependent\n * entry points.\n *\n * So we can remove D as dependent entry point from A and B, which means they\n * both now have only XY as dependent entry points and can be merged into the\n * same chunk.\n *\n * Now let us extend this to the most general case where we have several\n * dynamic importers for one dynamic entry point.\n *\n * In the most general form, it works like this:\n * For each dynamic entry point, we have a number of dynamic importers, which\n * are the modules importing it. Using the previous ideas, we can determine\n * the modules already in memory for each dynamic importer by looking for all\n * modules that have all the dependent entry points of the dynamic importer as\n * dependent entry points.\n * So the modules that are guaranteed to be in memory when the dynamic entry\n * point is loaded are the intersection of the modules already in memory for\n * each dynamic importer.\n *\n * Assuming that A => D and B => D and A has dependent entry points XY and B\n * has dependent entry points YZ, then the modules guaranteed to be in memory\n * are all modules that have at least XYZ as dependent entry points.\n * We call XYZ the *dynamically dependent entry points* of D.\n *\n * Now there is one last case to consider: If one of the dynamically dependent\n * entries is itself a dynamic entry, then any module is in memory that either\n * is a dependency of that dynamic entry or again has the dynamic dependent\n * entries of that dynamic entry as dependent entry points.\n *\n * A naive algorithm for this proved to be costly as it contained an O(n^3)\n * complexity with regard to dynamic entries that blew up for very large\n * projects.\n *\n * If we have an efficient way to do Set operations, an alternative approach\n * would be to instead collect already loaded modules per dynamic entry. And as\n * all chunks from the initial grouping would behave the same, we can instead\n * collect already loaded chunks for a performance improvement.\n *\n * To do that efficiently, need\n * - a Map of dynamic imports per dynamic entry, which contains all dynamic\n *   imports that can be triggered by a dynamic entry\n * - a Map of static dependencies per entry\n * - a Map of already loaded chunks per entry that we initially populate with\n *   empty Sets for static entries and Sets containing all entries for dynamic\n *   entries\n *\n * For efficient operations, we assign each entry a numerical index and\n * represent Sets of Chunks as BigInt values where each chunk corresponds to a\n * bit index. Then the last two maps can be represented as arrays of BigInt\n * values.\n *\n * Then we iterate through each dynamic entry. We set the already loaded modules\n * to the intersection of the previously already loaded modules with the union\n * of the already loaded modules of that chunk with its static dependencies.\n *\n * If the already loaded modules changed, then we use the Map of dynamic imports\n * per dynamic entry to marks all dynamic entry dependencies as \"dirty\" and put\n * them back into the iteration. As an additional optimization, we note for\n * each dynamic entry which dynamic dependent entries have changed and only\n * intersect those entries again on subsequent interations.\n *\n * Then we remove the dynamic entries from the list of dependent entries for\n * those chunks that are already loaded for that dynamic entry and create\n * another round of chunks.\n */\nfunction getChunkAssignments(entries, manualChunkAliasByEntry, minChunkSize, log) {\n    const { chunkDefinitions, modulesInManualChunks } = getChunkDefinitionsFromManualChunks(manualChunkAliasByEntry);\n    const { allEntries, dependentEntriesByModule, dynamicallyDependentEntriesByDynamicEntry, dynamicImportsByEntry } = analyzeModuleGraph(entries);\n    // Each chunk is identified by its position in this array\n    const chunkAtoms = getChunksWithSameDependentEntries(getModulesWithDependentEntries(dependentEntriesByModule, modulesInManualChunks));\n    const staticDependencyAtomsByEntry = getStaticDependencyAtomsByEntry(allEntries, chunkAtoms);\n    // Warning: This will consume dynamicallyDependentEntriesByDynamicEntry.\n    // If we no longer want this, we should make a copy here.\n    const alreadyLoadedAtomsByEntry = getAlreadyLoadedAtomsByEntry(staticDependencyAtomsByEntry, dynamicallyDependentEntriesByDynamicEntry, dynamicImportsByEntry, allEntries);\n    // This mutates the dependentEntries in chunkAtoms\n    removeUnnecessaryDependentEntries(chunkAtoms, alreadyLoadedAtomsByEntry);\n    const { chunks, sideEffectAtoms, sizeByAtom } = getChunksWithSameDependentEntriesAndCorrelatedAtoms(chunkAtoms, staticDependencyAtomsByEntry, alreadyLoadedAtomsByEntry, minChunkSize);\n    chunkDefinitions.push(...getOptimizedChunks(chunks, minChunkSize, sideEffectAtoms, sizeByAtom, log).map(({ modules }) => ({\n        alias: null,\n        modules\n    })));\n    return chunkDefinitions;\n}\nfunction getChunkDefinitionsFromManualChunks(manualChunkAliasByEntry) {\n    const modulesInManualChunks = new Set(manualChunkAliasByEntry.keys());\n    const manualChunkModulesByAlias = Object.create(null);\n    for (const [entry, alias] of manualChunkAliasByEntry) {\n        addStaticDependenciesToManualChunk(entry, (manualChunkModulesByAlias[alias] ||= []), modulesInManualChunks);\n    }\n    const manualChunks = Object.entries(manualChunkModulesByAlias);\n    const chunkDefinitions = new Array(manualChunks.length);\n    let index = 0;\n    for (const [alias, modules] of manualChunks) {\n        chunkDefinitions[index++] = { alias, modules };\n    }\n    return { chunkDefinitions, modulesInManualChunks };\n}\nfunction addStaticDependenciesToManualChunk(entry, manualChunkModules, modulesInManualChunks) {\n    const modulesToHandle = new Set([entry]);\n    for (const module of modulesToHandle) {\n        modulesInManualChunks.add(module);\n        manualChunkModules.push(module);\n        for (const dependency of module.dependencies) {\n            if (!(dependency instanceof ExternalModule || modulesInManualChunks.has(dependency))) {\n                modulesToHandle.add(dependency);\n            }\n        }\n    }\n}\nfunction analyzeModuleGraph(entries) {\n    const dynamicEntryModules = new Set();\n    const dependentEntriesByModule = new Map();\n    const allEntriesSet = new Set(entries);\n    const dynamicImportModulesByEntry = new Array(allEntriesSet.size);\n    let entryIndex = 0;\n    for (const currentEntry of allEntriesSet) {\n        const dynamicImportsForCurrentEntry = new Set();\n        dynamicImportModulesByEntry[entryIndex] = dynamicImportsForCurrentEntry;\n        const modulesToHandle = new Set([currentEntry]);\n        for (const module of modulesToHandle) {\n            getOrCreate(dependentEntriesByModule, module, (getNewSet)).add(entryIndex);\n            for (const dependency of module.getDependenciesToBeIncluded()) {\n                if (!(dependency instanceof ExternalModule)) {\n                    modulesToHandle.add(dependency);\n                }\n            }\n            for (const { resolution } of module.dynamicImports) {\n                if (resolution instanceof Module &&\n                    resolution.includedDynamicImporters.length > 0 &&\n                    !allEntriesSet.has(resolution)) {\n                    dynamicEntryModules.add(resolution);\n                    allEntriesSet.add(resolution);\n                    dynamicImportsForCurrentEntry.add(resolution);\n                }\n            }\n            for (const dependency of module.implicitlyLoadedBefore) {\n                if (!allEntriesSet.has(dependency)) {\n                    dynamicEntryModules.add(dependency);\n                    allEntriesSet.add(dependency);\n                }\n            }\n        }\n        entryIndex++;\n    }\n    const allEntries = [...allEntriesSet];\n    const { dynamicEntries, dynamicImportsByEntry } = getDynamicEntries(allEntries, dynamicEntryModules, dynamicImportModulesByEntry);\n    return {\n        allEntries,\n        dependentEntriesByModule,\n        dynamicallyDependentEntriesByDynamicEntry: getDynamicallyDependentEntriesByDynamicEntry(dependentEntriesByModule, dynamicEntries, allEntries),\n        dynamicImportsByEntry\n    };\n}\nfunction getDynamicEntries(allEntries, dynamicEntryModules, dynamicImportModulesByEntry) {\n    const entryIndexByModule = new Map();\n    const dynamicEntries = new Set();\n    for (const [entryIndex, entry] of allEntries.entries()) {\n        entryIndexByModule.set(entry, entryIndex);\n        if (dynamicEntryModules.has(entry)) {\n            dynamicEntries.add(entryIndex);\n        }\n    }\n    const dynamicImportsByEntry = new Array(dynamicImportModulesByEntry.length);\n    let index = 0;\n    for (const dynamicImportModules of dynamicImportModulesByEntry) {\n        const dynamicImports = new Set();\n        for (const dynamicEntry of dynamicImportModules) {\n            dynamicImports.add(entryIndexByModule.get(dynamicEntry));\n        }\n        dynamicImportsByEntry[index++] = dynamicImports;\n    }\n    return { dynamicEntries, dynamicImportsByEntry };\n}\nfunction getDynamicallyDependentEntriesByDynamicEntry(dependentEntriesByModule, dynamicEntries, allEntries) {\n    const dynamicallyDependentEntriesByDynamicEntry = new Map();\n    for (const dynamicEntryIndex of dynamicEntries) {\n        const dynamicallyDependentEntries = getOrCreate(dynamicallyDependentEntriesByDynamicEntry, dynamicEntryIndex, (getNewSet));\n        const dynamicEntry = allEntries[dynamicEntryIndex];\n        for (const importer of concatLazy([\n            dynamicEntry.includedDynamicImporters,\n            dynamicEntry.implicitlyLoadedAfter\n        ])) {\n            for (const entry of dependentEntriesByModule.get(importer)) {\n                dynamicallyDependentEntries.add(entry);\n            }\n        }\n    }\n    return dynamicallyDependentEntriesByDynamicEntry;\n}\nfunction getChunksWithSameDependentEntries(modulesWithDependentEntries) {\n    const chunkModules = Object.create(null);\n    for (const { dependentEntries, modules } of modulesWithDependentEntries) {\n        let chunkSignature = 0n;\n        for (const entryIndex of dependentEntries) {\n            chunkSignature |= 1n << BigInt(entryIndex);\n        }\n        (chunkModules[String(chunkSignature)] ||= {\n            dependentEntries: new Set(dependentEntries),\n            modules: []\n        }).modules.push(...modules);\n    }\n    return Object.values(chunkModules);\n}\nfunction* getModulesWithDependentEntries(dependentEntriesByModule, modulesInManualChunks) {\n    for (const [module, dependentEntries] of dependentEntriesByModule) {\n        if (!modulesInManualChunks.has(module)) {\n            yield { dependentEntries, modules: [module] };\n        }\n    }\n}\nfunction getStaticDependencyAtomsByEntry(allEntries, chunkAtoms) {\n    // The indices correspond to the indices in allEntries. The atoms correspond\n    // to bits in the bigint values where chunk 0 is the lowest bit.\n    const staticDependencyAtomsByEntry = allEntries.map(() => 0n);\n    // This toggles the bits for each atom that is a dependency of an entry\n    let atomMask = 1n;\n    for (const { dependentEntries } of chunkAtoms) {\n        for (const entryIndex of dependentEntries) {\n            staticDependencyAtomsByEntry[entryIndex] |= atomMask;\n        }\n        atomMask <<= 1n;\n    }\n    return staticDependencyAtomsByEntry;\n}\n// Warning: This will consume dynamicallyDependentEntriesByDynamicEntry.\nfunction getAlreadyLoadedAtomsByEntry(staticDependencyAtomsByEntry, dynamicallyDependentEntriesByDynamicEntry, dynamicImportsByEntry, allEntries) {\n    // Dynamic entries have all atoms as already loaded initially because we then\n    // intersect with the static dependency atoms of all dynamic importers.\n    // Static entries cannot have already loaded atoms.\n    const alreadyLoadedAtomsByEntry = allEntries.map((_entry, entryIndex) => dynamicallyDependentEntriesByDynamicEntry.has(entryIndex) ? -1n : 0n);\n    for (const [dynamicEntryIndex, dynamicallyDependentEntries] of dynamicallyDependentEntriesByDynamicEntry) {\n        // We delete here so that they can be added again if necessary to be handled\n        // again by the loop\n        dynamicallyDependentEntriesByDynamicEntry.delete(dynamicEntryIndex);\n        const knownLoadedAtoms = alreadyLoadedAtomsByEntry[dynamicEntryIndex];\n        let updatedLoadedAtoms = knownLoadedAtoms;\n        for (const entryIndex of dynamicallyDependentEntries) {\n            updatedLoadedAtoms &=\n                staticDependencyAtomsByEntry[entryIndex] | alreadyLoadedAtomsByEntry[entryIndex];\n        }\n        // If the knownLoadedAtoms changed, all dependent dynamic entries need to be\n        // updated again\n        if (updatedLoadedAtoms !== knownLoadedAtoms) {\n            alreadyLoadedAtomsByEntry[dynamicEntryIndex] = updatedLoadedAtoms;\n            for (const dynamicImport of dynamicImportsByEntry[dynamicEntryIndex]) {\n                // If this adds an entry that was deleted before, it will be handled\n                // again. This is the reason why we delete every entry from this map\n                // that we processed.\n                getOrCreate(dynamicallyDependentEntriesByDynamicEntry, dynamicImport, (getNewSet)).add(dynamicEntryIndex);\n            }\n        }\n    }\n    return alreadyLoadedAtomsByEntry;\n}\n/**\n * This removes all unnecessary dynamic entries from the dependentEntries in its\n * first argument if a chunk is already loaded without that entry.\n */\nfunction removeUnnecessaryDependentEntries(chunkAtoms, alreadyLoadedAtomsByEntry) {\n    // Remove entries from dependent entries if a chunk is already loaded without\n    // that entry.\n    let chunkMask = 1n;\n    for (const { dependentEntries } of chunkAtoms) {\n        for (const entryIndex of dependentEntries) {\n            if ((alreadyLoadedAtomsByEntry[entryIndex] & chunkMask) === chunkMask) {\n                dependentEntries.delete(entryIndex);\n            }\n        }\n        chunkMask <<= 1n;\n    }\n}\nfunction getChunksWithSameDependentEntriesAndCorrelatedAtoms(chunkAtoms, staticDependencyAtomsByEntry, alreadyLoadedAtomsByEntry, minChunkSize) {\n    const chunksBySignature = Object.create(null);\n    const chunkByModule = new Map();\n    const sizeByAtom = new Array(chunkAtoms.length);\n    let sideEffectAtoms = 0n;\n    let atomMask = 1n;\n    let index = 0;\n    for (const { dependentEntries, modules } of chunkAtoms) {\n        let chunkSignature = 0n;\n        let correlatedAtoms = -1n;\n        for (const entryIndex of dependentEntries) {\n            chunkSignature |= 1n << BigInt(entryIndex);\n            // Correlated atoms are the atoms that are guaranteed to be loaded as\n            // well when a given atom is loaded. It is the intersection of the already\n            // loaded modules of each chunk merged with its static dependencies.\n            correlatedAtoms &=\n                staticDependencyAtomsByEntry[entryIndex] | alreadyLoadedAtomsByEntry[entryIndex];\n        }\n        const chunk = (chunksBySignature[String(chunkSignature)] ||= {\n            containedAtoms: 0n,\n            correlatedAtoms,\n            dependencies: new Set(),\n            dependentChunks: new Set(),\n            dependentEntries: new Set(dependentEntries),\n            modules: [],\n            pure: true,\n            size: 0\n        });\n        let atomSize = 0;\n        let pure = true;\n        for (const module of modules) {\n            chunkByModule.set(module, chunk);\n            // Unfortunately, we cannot take tree-shaking into account here because\n            // rendering did not happen yet, but we can detect empty modules\n            if (module.isIncluded()) {\n                pure &&= !module.hasEffects();\n                // we use a trivial size for the default minChunkSize to improve\n                // performance\n                atomSize += minChunkSize > 1 ? module.estimateSize() : 1;\n            }\n        }\n        if (!pure) {\n            sideEffectAtoms |= atomMask;\n        }\n        sizeByAtom[index++] = atomSize;\n        chunk.containedAtoms |= atomMask;\n        chunk.modules.push(...modules);\n        chunk.pure &&= pure;\n        chunk.size += atomSize;\n        atomMask <<= 1n;\n    }\n    const chunks = Object.values(chunksBySignature);\n    sideEffectAtoms |= addChunkDependenciesAndGetExternalSideEffectAtoms(chunks, chunkByModule, atomMask);\n    return { chunks, sideEffectAtoms, sizeByAtom };\n}\nfunction addChunkDependenciesAndGetExternalSideEffectAtoms(chunks, chunkByModule, nextAvailableAtomMask) {\n    const signatureByExternalModule = new Map();\n    let externalSideEffectAtoms = 0n;\n    for (const chunk of chunks) {\n        const { dependencies, modules } = chunk;\n        for (const module of modules) {\n            for (const dependency of module.getDependenciesToBeIncluded()) {\n                if (dependency instanceof ExternalModule) {\n                    if (dependency.info.moduleSideEffects) {\n                        const signature = getOrCreate(signatureByExternalModule, dependency, () => {\n                            const signature = nextAvailableAtomMask;\n                            nextAvailableAtomMask <<= 1n;\n                            externalSideEffectAtoms |= signature;\n                            return signature;\n                        });\n                        chunk.containedAtoms |= signature;\n                        chunk.correlatedAtoms |= signature;\n                    }\n                }\n                else {\n                    const dependencyChunk = chunkByModule.get(dependency);\n                    if (dependencyChunk && dependencyChunk !== chunk) {\n                        dependencies.add(dependencyChunk);\n                        dependencyChunk.dependentChunks.add(chunk);\n                    }\n                }\n            }\n        }\n    }\n    return externalSideEffectAtoms;\n}\n/**\n * This function tries to get rid of small chunks by merging them with other\n * chunks.\n *\n * We can only merge chunks safely if after the merge, loading any entry point\n * in any allowed order will not trigger side effects that should not have been\n * triggered. While side effects are usually things like global function calls,\n * global variable mutations or potentially thrown errors, details do not\n * matter here, and we just discern chunks without side effects (pure chunks)\n * from other chunks.\n *\n * As a first step, we assign each pre-generated chunk with side effects a\n * label. I.e. we have side effect \"A\" if the non-pure chunk \"A\" is loaded.\n *\n * Now to determine the side effects of loading a chunk, one also has to take\n * the side effects of its dependencies into account. So if A depends on B\n * (A -> B) and both have side effects, loading A triggers effects AB.\n *\n * Now from the previous step we know that each chunk is uniquely determine by\n * the entry points that depend on it and cause it to load, which we will call\n * its dependent entry points.\n *\n * E.g. if X -> A and Y -> A, then the dependent entry points of A are XY.\n * Starting from that idea, we can determine a set of chunks—and thus a set\n * of side effects—that must have been triggered if a certain chunk has been\n * loaded. Basically, it is the intersection of all chunks loaded by the\n * dependent entry points of a given chunk. We call the corresponding side\n * effects the correlated side effects of that chunk.\n *\n * Example:\n * X -> ABC, Y -> ADE, A-> F, B -> D\n * Then taking dependencies into account, X -> ABCDF, Y -> ADEF\n * The intersection is ADF. So we know that when A is loaded, D and F must also\n * be in memory even though neither D nor A is a dependency of the other.\n * If all have side effects, we call ADF the correlated side effects of A. The\n * correlated side effects need to remain constant when merging chunks.\n *\n * In contrast, we have the dependency side effects of A, which represents\n * the side effects we trigger if we directly load A. In this example, the\n * dependency side effects are AF.\n * For entry chunks, dependency and correlated side effects are the same.\n *\n * With these concepts, merging chunks is allowed if the correlated side\n * effects of each entry do not change. Thus, we are allowed to merge two\n * chunks if\n *\n * a) the dependency side effects of each chunk are a subset of the correlated\n *    side effects of the other chunk, so no additional side effects are\n *    triggered for any entry, or\n * b) The dependent entry points of chunk A are a subset of the dependent entry\n *    points of chunk B while the dependency side effects of A are a subset of\n *    the correlated side effects of B. Because in that scenario, whenever A is\n *    loaded, B is loaded as well. But there are cases when B is loaded where A\n *    is not loaded. So if we merge the chunks, all dependency side effects of\n *    A will be added to the correlated side effects of B, and as the latter is\n *    not allowed to change, the former need to be a subset of the latter.\n *\n * Another consideration when merging small chunks into other chunks is to\n * avoid\n * that too much additional code is loaded. This is achieved when the dependent\n * entries of the small chunk are a subset of the dependent entries of the\n * other\n * chunk. Because then when the small chunk is loaded, the other chunk was\n * loaded/in memory anyway, so at most when the other chunk is loaded, the\n * additional size of the small chunk is loaded unnecessarily.\n *\n * So the algorithm performs merges in two passes:\n *\n * 1. First we try to merge small chunks A only into other chunks B if the\n *    dependent entries of A are a subset of the dependent entries of B and the\n *    dependency side effects of A are a subset of the correlated side effects\n *    of B.\n * 2. Only then for all remaining small chunks, we look for arbitrary merges\n *    following the rule (a), starting with the smallest chunks to look for\n *    possible merge targets.\n */\nfunction getOptimizedChunks(chunks, minChunkSize, sideEffectAtoms, sizeByAtom, log) {\n    timeStart('optimize chunks', 3);\n    const chunkPartition = getPartitionedChunks(chunks, minChunkSize);\n    if (!chunkPartition) {\n        timeEnd('optimize chunks', 3);\n        return chunks; // the actual modules\n    }\n    if (minChunkSize > 1) {\n        log('info', (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logOptimizeChunkStatus)(chunks.length, chunkPartition.small.size, 'Initially'));\n    }\n    mergeChunks(chunkPartition, minChunkSize, sideEffectAtoms, sizeByAtom);\n    if (minChunkSize > 1) {\n        log('info', (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logOptimizeChunkStatus)(chunkPartition.small.size + chunkPartition.big.size, chunkPartition.small.size, 'After merging chunks'));\n    }\n    timeEnd('optimize chunks', 3);\n    return [...chunkPartition.small, ...chunkPartition.big];\n}\nfunction getPartitionedChunks(chunks, minChunkSize) {\n    const smallChunks = [];\n    const bigChunks = [];\n    for (const chunk of chunks) {\n        (chunk.size < minChunkSize ? smallChunks : bigChunks).push(chunk);\n    }\n    if (smallChunks.length === 0) {\n        return null;\n    }\n    smallChunks.sort(compareChunkSize);\n    bigChunks.sort(compareChunkSize);\n    return {\n        big: new Set(bigChunks),\n        small: new Set(smallChunks)\n    };\n}\nfunction compareChunkSize({ size: sizeA }, { size: sizeB }) {\n    return sizeA - sizeB;\n}\nfunction mergeChunks(chunkPartition, minChunkSize, sideEffectAtoms, sizeByAtom) {\n    const { small } = chunkPartition;\n    for (const mergedChunk of small) {\n        const bestTargetChunk = findBestMergeTarget(mergedChunk, chunkPartition, sideEffectAtoms, sizeByAtom, \n        // In the default case, we do not accept size increases\n        minChunkSize <= 1 ? 1 : Infinity);\n        if (bestTargetChunk) {\n            const { containedAtoms, correlatedAtoms, modules, pure, size } = mergedChunk;\n            small.delete(mergedChunk);\n            getChunksInPartition(bestTargetChunk, minChunkSize, chunkPartition).delete(bestTargetChunk);\n            bestTargetChunk.modules.push(...modules);\n            bestTargetChunk.size += size;\n            bestTargetChunk.pure &&= pure;\n            const { dependencies, dependentChunks, dependentEntries } = bestTargetChunk;\n            bestTargetChunk.correlatedAtoms &= correlatedAtoms;\n            bestTargetChunk.containedAtoms |= containedAtoms;\n            for (const entry of mergedChunk.dependentEntries) {\n                dependentEntries.add(entry);\n            }\n            for (const dependency of mergedChunk.dependencies) {\n                dependencies.add(dependency);\n                dependency.dependentChunks.delete(mergedChunk);\n                dependency.dependentChunks.add(bestTargetChunk);\n            }\n            for (const dependentChunk of mergedChunk.dependentChunks) {\n                dependentChunks.add(dependentChunk);\n                dependentChunk.dependencies.delete(mergedChunk);\n                dependentChunk.dependencies.add(bestTargetChunk);\n            }\n            dependencies.delete(bestTargetChunk);\n            dependentChunks.delete(bestTargetChunk);\n            getChunksInPartition(bestTargetChunk, minChunkSize, chunkPartition).add(bestTargetChunk);\n        }\n    }\n}\nfunction findBestMergeTarget(mergedChunk, { big, small }, sideEffectAtoms, sizeByAtom, smallestAdditionalSize) {\n    let bestTargetChunk = null;\n    // In the default case, we do not accept size increases\n    for (const targetChunk of concatLazy([small, big])) {\n        if (mergedChunk === targetChunk)\n            continue;\n        const additionalSizeAfterMerge = getAdditionalSizeAfterMerge(mergedChunk, targetChunk, smallestAdditionalSize, sideEffectAtoms, sizeByAtom);\n        if (additionalSizeAfterMerge < smallestAdditionalSize) {\n            bestTargetChunk = targetChunk;\n            if (additionalSizeAfterMerge === 0)\n                break;\n            smallestAdditionalSize = additionalSizeAfterMerge;\n        }\n    }\n    return bestTargetChunk;\n}\n/**\n * Determine the additional unused code size that would be added by merging the\n * two chunks. This is not an exact measurement but rather an upper bound. If\n * the merge produces cycles or adds non-correlated side effects, `Infinity`\n * is returned.\n * Merging will not produce cycles if none of the direct non-merged\n * dependencies of a chunk have the other chunk as a transitive dependency.\n */\nfunction getAdditionalSizeAfterMerge(mergedChunk, targetChunk, \n// The maximum additional unused code size allowed to be added by the merge,\n// taking dependencies into account, needs to be below this number\ncurrentAdditionalSize, sideEffectAtoms, sizeByAtom) {\n    const firstSize = getAdditionalSizeIfNoTransitiveDependencyOrNonCorrelatedSideEffect(mergedChunk, targetChunk, currentAdditionalSize, sideEffectAtoms, sizeByAtom);\n    return firstSize < currentAdditionalSize\n        ? firstSize +\n            getAdditionalSizeIfNoTransitiveDependencyOrNonCorrelatedSideEffect(targetChunk, mergedChunk, currentAdditionalSize - firstSize, sideEffectAtoms, sizeByAtom)\n        : Infinity;\n}\nfunction getAdditionalSizeIfNoTransitiveDependencyOrNonCorrelatedSideEffect(dependentChunk, dependencyChunk, currentAdditionalSize, sideEffectAtoms, sizeByAtom) {\n    const { correlatedAtoms } = dependencyChunk;\n    let dependencyAtoms = dependentChunk.containedAtoms;\n    const dependentContainedSideEffects = dependencyAtoms & sideEffectAtoms;\n    if ((correlatedAtoms & dependentContainedSideEffects) !== dependentContainedSideEffects) {\n        return Infinity;\n    }\n    const chunksToCheck = new Set(dependentChunk.dependencies);\n    for (const { dependencies, containedAtoms } of chunksToCheck) {\n        dependencyAtoms |= containedAtoms;\n        const containedSideEffects = containedAtoms & sideEffectAtoms;\n        if ((correlatedAtoms & containedSideEffects) !== containedSideEffects) {\n            return Infinity;\n        }\n        for (const dependency of dependencies) {\n            if (dependency === dependencyChunk) {\n                return Infinity;\n            }\n            chunksToCheck.add(dependency);\n        }\n    }\n    return getAtomsSizeIfBelowLimit(dependencyAtoms & ~correlatedAtoms, currentAdditionalSize, sizeByAtom);\n}\nfunction getAtomsSizeIfBelowLimit(atoms, currentAdditionalSize, sizeByAtom) {\n    let size = 0;\n    let atomIndex = 0;\n    let atomSignature = 1n;\n    const { length } = sizeByAtom;\n    for (; atomIndex < length; atomIndex++) {\n        if ((atoms & atomSignature) === atomSignature) {\n            size += sizeByAtom[atomIndex];\n        }\n        atomSignature <<= 1n;\n        if (size >= currentAdditionalSize) {\n            return Infinity;\n        }\n    }\n    return size;\n}\nfunction getChunksInPartition(chunk, minChunkSize, chunkPartition) {\n    return chunk.size < minChunkSize ? chunkPartition.small : chunkPartition.big;\n}\n\n// ported from https://github.com/substack/node-commondir\nfunction commondir(files) {\n    if (files.length === 0)\n        return '/';\n    if (files.length === 1)\n        return (0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(files[0]);\n    const commonSegments = files.slice(1).reduce((commonSegments, file) => {\n        const pathSegments = file.split(/\\/+|\\\\+/);\n        let index;\n        for (index = 0; commonSegments[index] === pathSegments[index] &&\n            index < Math.min(commonSegments.length, pathSegments.length); index++)\n            ;\n        return commonSegments.slice(0, index);\n    }, files[0].split(/\\/+|\\\\+/));\n    // Windows correctly handles paths with forward-slashes\n    return commonSegments.length > 1 ? commonSegments.join('/') : '/';\n}\n\nconst compareExecIndex = (unitA, unitB) => unitA.execIndex > unitB.execIndex ? 1 : -1;\nfunction sortByExecutionOrder(units) {\n    units.sort(compareExecIndex);\n}\n// This process is currently faulty in so far as it only takes the first entry\n// module into account and assumes that dynamic imports are imported in a\n// certain order.\n// A better algorithm would follow every possible execution path and mark which\n// modules are executed before or after which other modules. THen the chunking\n// would need to take care that in each chunk, all modules are always executed\n// in the same sequence.\nfunction analyseModuleExecution(entryModules) {\n    let nextExecIndex = 0;\n    const cyclePaths = [];\n    const analysedModules = new Set();\n    const dynamicImports = new Set();\n    const parents = new Map();\n    const orderedModules = [];\n    const analyseModule = (module) => {\n        if (module instanceof Module) {\n            for (const dependency of module.dependencies) {\n                if (parents.has(dependency)) {\n                    if (!analysedModules.has(dependency)) {\n                        cyclePaths.push(getCyclePath(dependency, module, parents));\n                    }\n                    continue;\n                }\n                parents.set(dependency, module);\n                analyseModule(dependency);\n            }\n            for (const dependency of module.implicitlyLoadedBefore) {\n                dynamicImports.add(dependency);\n            }\n            for (const { resolution } of module.dynamicImports) {\n                if (resolution instanceof Module) {\n                    dynamicImports.add(resolution);\n                }\n            }\n            orderedModules.push(module);\n        }\n        module.execIndex = nextExecIndex++;\n        analysedModules.add(module);\n    };\n    for (const currentEntry of entryModules) {\n        if (!parents.has(currentEntry)) {\n            parents.set(currentEntry, null);\n            analyseModule(currentEntry);\n        }\n    }\n    for (const currentEntry of dynamicImports) {\n        if (!parents.has(currentEntry)) {\n            parents.set(currentEntry, null);\n            analyseModule(currentEntry);\n        }\n    }\n    return { cyclePaths, orderedModules };\n}\nfunction getCyclePath(module, parent, parents) {\n    const cycleSymbol = Symbol(module.id);\n    const path = [module.id];\n    let nextModule = parent;\n    module.cycles.add(cycleSymbol);\n    while (nextModule !== module) {\n        nextModule.cycles.add(cycleSymbol);\n        path.push(nextModule.id);\n        nextModule = parents.get(nextModule);\n    }\n    path.push(path[0]);\n    path.reverse();\n    return path;\n}\n\nfunction getGenerateCodeSnippets({ compact, generatedCode: { arrowFunctions, constBindings, objectShorthand, reservedNamesAsProps } }) {\n    const { _, n, s } = compact ? { _: '', n: '', s: '' } : { _: ' ', n: '\\n', s: ';' };\n    const cnst = constBindings ? 'const' : 'var';\n    const getNonArrowFunctionIntro = (parameters, { isAsync, name }) => `${isAsync ? `async ` : ''}function${name ? ` ${name}` : ''}${_}(${parameters.join(`,${_}`)})${_}`;\n    const getFunctionIntro = arrowFunctions\n        ? (parameters, { isAsync, name }) => {\n            const singleParameter = parameters.length === 1;\n            const asyncString = isAsync ? `async${singleParameter ? ' ' : _}` : '';\n            return `${name ? `${cnst} ${name}${_}=${_}` : ''}${asyncString}${singleParameter ? parameters[0] : `(${parameters.join(`,${_}`)})`}${_}=>${_}`;\n        }\n        : getNonArrowFunctionIntro;\n    const getDirectReturnFunction = (parameters, { functionReturn, lineBreakIndent, name }) => [\n        `${getFunctionIntro(parameters, {\n            isAsync: false,\n            name\n        })}${arrowFunctions\n            ? lineBreakIndent\n                ? `${n}${lineBreakIndent.base}${lineBreakIndent.t}`\n                : ''\n            : `{${lineBreakIndent ? `${n}${lineBreakIndent.base}${lineBreakIndent.t}` : _}${functionReturn ? 'return ' : ''}`}`,\n        arrowFunctions\n            ? `${name ? ';' : ''}${lineBreakIndent ? `${n}${lineBreakIndent.base}` : ''}`\n            : `${s}${lineBreakIndent ? `${n}${lineBreakIndent.base}` : _}}`\n    ];\n    const isValidPropertyName = reservedNamesAsProps\n        ? (name) => VALID_IDENTIFIER_REGEXP.test(name)\n        : (name) => !RESERVED_NAMES.has(name) && VALID_IDENTIFIER_REGEXP.test(name);\n    return {\n        _,\n        cnst,\n        getDirectReturnFunction,\n        getDirectReturnIifeLeft: (parameters, returned, { needsArrowReturnParens, needsWrappedFunction }) => {\n            const [left, right] = getDirectReturnFunction(parameters, {\n                functionReturn: true,\n                lineBreakIndent: null,\n                name: null\n            });\n            return `${wrapIfNeeded(`${left}${wrapIfNeeded(returned, arrowFunctions && needsArrowReturnParens)}${right}`, arrowFunctions || needsWrappedFunction)}(`;\n        },\n        getFunctionIntro,\n        getNonArrowFunctionIntro,\n        getObject(fields, { lineBreakIndent }) {\n            const prefix = lineBreakIndent ? `${n}${lineBreakIndent.base}${lineBreakIndent.t}` : _;\n            return `{${fields\n                .map(([key, value]) => {\n                if (key === null)\n                    return `${prefix}${value}`;\n                const keyInObject = stringifyObjectKeyIfNeeded(key);\n                return key === value && objectShorthand && key === keyInObject\n                    ? prefix + key\n                    : `${prefix}${keyInObject}:${_}${value}`;\n            })\n                .join(`,`)}${fields.length === 0 ? '' : lineBreakIndent ? `${n}${lineBreakIndent.base}` : _}}`;\n        },\n        getPropertyAccess: (name) => isValidPropertyName(name) ? `.${name}` : `[${JSON.stringify(name)}]`,\n        n,\n        s\n    };\n}\nconst wrapIfNeeded = (code, needsParens) => needsParens ? `(${code})` : code;\n\nclass Source {\n    constructor(filename, content) {\n        this.isOriginal = true;\n        this.filename = filename;\n        this.content = content;\n    }\n    traceSegment(line, column, name) {\n        return { column, line, name, source: this };\n    }\n}\nclass Link {\n    constructor(map, sources) {\n        this.sources = sources;\n        this.names = map.names;\n        this.mappings = map.mappings;\n    }\n    traceMappings() {\n        const sources = [];\n        const sourceIndexMap = new Map();\n        const sourcesContent = [];\n        const names = [];\n        const nameIndexMap = new Map();\n        const mappings = [];\n        for (const line of this.mappings) {\n            const tracedLine = [];\n            for (const segment of line) {\n                if (segment.length === 1)\n                    continue;\n                const source = this.sources[segment[1]];\n                if (!source)\n                    continue;\n                const traced = source.traceSegment(segment[2], segment[3], segment.length === 5 ? this.names[segment[4]] : '');\n                if (traced) {\n                    const { column, line, name, source: { content, filename } } = traced;\n                    let sourceIndex = sourceIndexMap.get(filename);\n                    if (sourceIndex === undefined) {\n                        sourceIndex = sources.length;\n                        sources.push(filename);\n                        sourceIndexMap.set(filename, sourceIndex);\n                        sourcesContent[sourceIndex] = content;\n                    }\n                    else if (sourcesContent[sourceIndex] == null) {\n                        sourcesContent[sourceIndex] = content;\n                    }\n                    else if (content != null && sourcesContent[sourceIndex] !== content) {\n                        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logConflictingSourcemapSources)(filename));\n                    }\n                    const tracedSegment = [segment[0], sourceIndex, line, column];\n                    if (name) {\n                        let nameIndex = nameIndexMap.get(name);\n                        if (nameIndex === undefined) {\n                            nameIndex = names.length;\n                            names.push(name);\n                            nameIndexMap.set(name, nameIndex);\n                        }\n                        tracedSegment[4] = nameIndex;\n                    }\n                    tracedLine.push(tracedSegment);\n                }\n            }\n            mappings.push(tracedLine);\n        }\n        return { mappings, names, sources, sourcesContent };\n    }\n    traceSegment(line, column, name) {\n        const segments = this.mappings[line];\n        if (!segments)\n            return null;\n        // binary search through segments for the given column\n        let searchStart = 0;\n        let searchEnd = segments.length - 1;\n        while (searchStart <= searchEnd) {\n            const m = (searchStart + searchEnd) >> 1;\n            const segment = segments[m];\n            // If a sourcemap does not have sufficient resolution to contain a\n            // necessary mapping, e.g. because it only contains line information, we\n            // use the best approximation we could find\n            if (segment[0] === column || searchStart === searchEnd) {\n                if (segment.length == 1)\n                    return null;\n                const source = this.sources[segment[1]];\n                if (!source)\n                    return null;\n                return source.traceSegment(segment[2], segment[3], segment.length === 5 ? this.names[segment[4]] : name);\n            }\n            if (segment[0] > column) {\n                searchEnd = m - 1;\n            }\n            else {\n                searchStart = m + 1;\n            }\n        }\n        return null;\n    }\n}\nfunction getLinkMap(log) {\n    return function linkMap(source, map) {\n        if (!map.missing) {\n            return new Link(map, [source]);\n        }\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logSourcemapBroken)(map.plugin));\n        return new Link({\n            mappings: [],\n            names: []\n        }, [source]);\n    };\n}\nfunction getCollapsedSourcemap(id, originalCode, originalSourcemap, sourcemapChain, linkMap) {\n    let source;\n    if (originalSourcemap) {\n        const sources = originalSourcemap.sources;\n        const sourcesContent = originalSourcemap.sourcesContent || [];\n        const directory = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(id) || '.';\n        const sourceRoot = originalSourcemap.sourceRoot || '.';\n        const baseSources = sources.map((source, index) => new Source((0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(directory, sourceRoot, source), sourcesContent[index]));\n        source = new Link(originalSourcemap, baseSources);\n    }\n    else {\n        source = new Source(id, originalCode);\n    }\n    return sourcemapChain.reduce(linkMap, source);\n}\nfunction collapseSourcemaps(file, map, modules, bundleSourcemapChain, excludeContent, log) {\n    const linkMap = getLinkMap(log);\n    const moduleSources = modules\n        .filter(module => !module.excludeFromSourcemap)\n        .map(module => getCollapsedSourcemap(module.id, module.originalCode, module.originalSourcemap, module.sourcemapChain, linkMap));\n    const link = new Link(map, moduleSources);\n    const source = bundleSourcemapChain.reduce(linkMap, link);\n    let { sources, sourcesContent, names, mappings } = source.traceMappings();\n    if (file) {\n        const directory = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(file);\n        sources = sources.map((source) => (0,node_path__WEBPACK_IMPORTED_MODULE_1__.relative)(directory, source));\n        file = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(file);\n    }\n    sourcesContent = (excludeContent ? null : sourcesContent);\n    for (const module of modules) {\n        resetSourcemapCache(module.originalSourcemap, module.sourcemapChain);\n    }\n    return new SourceMap({ file, mappings, names, sources, sourcesContent });\n}\nfunction collapseSourcemap(id, originalCode, originalSourcemap, sourcemapChain, log) {\n    if (sourcemapChain.length === 0) {\n        return originalSourcemap;\n    }\n    const source = getCollapsedSourcemap(id, originalCode, originalSourcemap, sourcemapChain, getLinkMap(log));\n    const map = source.traceMappings();\n    return decodedSourcemap({ version: 3, ...map });\n}\n\nlet textEncoder;\nconst getHash64 = input => (0,_native_js__WEBPACK_IMPORTED_MODULE_3__.xxhashBase64Url)(ensureBuffer(input));\nconst getHash36 = input => (0,_native_js__WEBPACK_IMPORTED_MODULE_3__.xxhashBase36)(ensureBuffer(input));\nconst getHash16 = input => (0,_native_js__WEBPACK_IMPORTED_MODULE_3__.xxhashBase16)(ensureBuffer(input));\nconst hasherByType = {\n    base36: getHash36,\n    base64: getHash64,\n    hex: getHash16\n};\nfunction ensureBuffer(input) {\n    if (typeof input === 'string') {\n        if (typeof Buffer === 'undefined') {\n            textEncoder ??= new TextEncoder();\n            return textEncoder.encode(input);\n        }\n        return Buffer.from(input);\n    }\n    return input;\n}\n\n// this looks ridiculous, but it prevents sourcemap tooling from mistaking\n// this for an actual sourceMappingURL\nlet SOURCEMAPPING_URL = 'sourceMa';\nSOURCEMAPPING_URL += 'ppingURL';\n\nasync function renderChunks(chunks, bundle, pluginDriver, outputOptions, log) {\n    timeStart('render chunks', 2);\n    reserveEntryChunksInBundle(chunks);\n    const renderedChunks = await Promise.all(chunks.map(chunk => chunk.render()));\n    timeEnd('render chunks', 2);\n    timeStart('transform chunks', 2);\n    const getHash = hasherByType[outputOptions.hashCharacters];\n    const chunkGraph = getChunkGraph(chunks);\n    const { hashDependenciesByPlaceholder, initialHashesByPlaceholder, nonHashedChunksWithPlaceholders, placeholders, renderedChunksByPlaceholder } = await transformChunksAndGenerateContentHashes(renderedChunks, chunkGraph, outputOptions, pluginDriver, getHash, log);\n    const hashesByPlaceholder = generateFinalHashes(renderedChunksByPlaceholder, hashDependenciesByPlaceholder, initialHashesByPlaceholder, placeholders, bundle, getHash);\n    addChunksToBundle(renderedChunksByPlaceholder, hashesByPlaceholder, bundle, nonHashedChunksWithPlaceholders, pluginDriver, outputOptions);\n    timeEnd('transform chunks', 2);\n}\nfunction reserveEntryChunksInBundle(chunks) {\n    for (const chunk of chunks) {\n        if (chunk.facadeModule && chunk.facadeModule.isUserDefinedEntryPoint) {\n            // reserves name in bundle as side effect if it does not contain a hash\n            chunk.getPreliminaryFileName();\n        }\n    }\n}\nfunction getChunkGraph(chunks) {\n    return Object.fromEntries(chunks.map(chunk => {\n        const renderedChunkInfo = chunk.getRenderedChunkInfo();\n        return [renderedChunkInfo.fileName, renderedChunkInfo];\n    }));\n}\nasync function transformChunk(magicString, fileName, usedModules, chunkGraph, options, outputPluginDriver, log) {\n    let map = null;\n    const sourcemapChain = [];\n    let code = await outputPluginDriver.hookReduceArg0('renderChunk', [magicString.toString(), chunkGraph[fileName], options, { chunks: chunkGraph }], (code, result, plugin) => {\n        if (result == null)\n            return code;\n        if (typeof result === 'string')\n            result = {\n                code: result,\n                map: undefined\n            };\n        // strict null check allows 'null' maps to not be pushed to the chain, while 'undefined' gets the missing map warning\n        if (result.map !== null) {\n            const map = decodedSourcemap(result.map);\n            sourcemapChain.push(map || { missing: true, plugin: plugin.name });\n        }\n        return result.code;\n    });\n    const { compact, dir, file, sourcemap, sourcemapExcludeSources, sourcemapFile, sourcemapPathTransform, sourcemapIgnoreList } = options;\n    if (!compact && code[code.length - 1] !== '\\n')\n        code += '\\n';\n    if (sourcemap) {\n        timeStart('sourcemaps', 3);\n        let resultingFile;\n        if (file)\n            resultingFile = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(sourcemapFile || file);\n        else if (dir)\n            resultingFile = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(dir, fileName);\n        else\n            resultingFile = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(fileName);\n        const decodedMap = magicString.generateDecodedMap({});\n        map = collapseSourcemaps(resultingFile, decodedMap, usedModules, sourcemapChain, sourcemapExcludeSources, log);\n        for (let sourcesIndex = 0; sourcesIndex < map.sources.length; ++sourcesIndex) {\n            let sourcePath = map.sources[sourcesIndex];\n            const sourcemapPath = `${resultingFile}.map`;\n            const ignoreList = sourcemapIgnoreList(sourcePath, sourcemapPath);\n            if (typeof ignoreList !== 'boolean') {\n                (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)('sourcemapIgnoreList function must return a boolean.'));\n            }\n            if (ignoreList) {\n                if (map.x_google_ignoreList === undefined) {\n                    map.x_google_ignoreList = [];\n                }\n                if (!map.x_google_ignoreList.includes(sourcesIndex)) {\n                    map.x_google_ignoreList.push(sourcesIndex);\n                }\n            }\n            if (sourcemapPathTransform) {\n                sourcePath = sourcemapPathTransform(sourcePath, sourcemapPath);\n                if (typeof sourcePath !== 'string') {\n                    (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`sourcemapPathTransform function must return a string.`));\n                }\n            }\n            map.sources[sourcesIndex] = (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(sourcePath);\n        }\n        timeEnd('sourcemaps', 3);\n    }\n    return {\n        code,\n        map\n    };\n}\nasync function transformChunksAndGenerateContentHashes(renderedChunks, chunkGraph, outputOptions, pluginDriver, getHash, log) {\n    const nonHashedChunksWithPlaceholders = [];\n    const renderedChunksByPlaceholder = new Map();\n    const hashDependenciesByPlaceholder = new Map();\n    const initialHashesByPlaceholder = new Map();\n    const placeholders = new Set();\n    for (const { preliminaryFileName: { hashPlaceholder } } of renderedChunks) {\n        if (hashPlaceholder)\n            placeholders.add(hashPlaceholder);\n    }\n    await Promise.all(renderedChunks.map(async ({ chunk, preliminaryFileName: { fileName, hashPlaceholder }, preliminarySourcemapFileName, magicString, usedModules }) => {\n        const transformedChunk = {\n            chunk,\n            fileName,\n            sourcemapFileName: preliminarySourcemapFileName?.fileName ?? null,\n            ...(await transformChunk(magicString, fileName, usedModules, chunkGraph, outputOptions, pluginDriver, log))\n        };\n        const { code, map } = transformedChunk;\n        if (hashPlaceholder) {\n            // To create a reproducible content-only hash, all placeholders are\n            // replaced with the same value before hashing\n            const { containedPlaceholders, transformedCode } = replacePlaceholdersWithDefaultAndGetContainedPlaceholders(code, placeholders);\n            let contentToHash = transformedCode;\n            const hashAugmentation = pluginDriver.hookReduceValueSync('augmentChunkHash', '', [chunk.getRenderedChunkInfo()], (augmentation, pluginHash) => {\n                if (pluginHash) {\n                    augmentation += pluginHash;\n                }\n                return augmentation;\n            });\n            if (hashAugmentation) {\n                contentToHash += hashAugmentation;\n            }\n            renderedChunksByPlaceholder.set(hashPlaceholder, transformedChunk);\n            hashDependenciesByPlaceholder.set(hashPlaceholder, {\n                containedPlaceholders,\n                contentHash: getHash(contentToHash)\n            });\n        }\n        else {\n            nonHashedChunksWithPlaceholders.push(transformedChunk);\n        }\n        const sourcemapHashPlaceholder = preliminarySourcemapFileName?.hashPlaceholder;\n        if (map && sourcemapHashPlaceholder) {\n            initialHashesByPlaceholder.set(preliminarySourcemapFileName.hashPlaceholder, getHash(map.toString()).slice(0, preliminarySourcemapFileName.hashPlaceholder.length));\n        }\n    }));\n    return {\n        hashDependenciesByPlaceholder,\n        initialHashesByPlaceholder,\n        nonHashedChunksWithPlaceholders,\n        placeholders,\n        renderedChunksByPlaceholder\n    };\n}\nfunction generateFinalHashes(renderedChunksByPlaceholder, hashDependenciesByPlaceholder, initialHashesByPlaceholder, placeholders, bundle, getHash) {\n    const hashesByPlaceholder = new Map(initialHashesByPlaceholder);\n    for (const placeholder of placeholders) {\n        const { fileName } = renderedChunksByPlaceholder.get(placeholder);\n        let contentToHash = '';\n        const hashDependencyPlaceholders = new Set([placeholder]);\n        for (const dependencyPlaceholder of hashDependencyPlaceholders) {\n            const { containedPlaceholders, contentHash } = hashDependenciesByPlaceholder.get(dependencyPlaceholder);\n            contentToHash += contentHash;\n            for (const containedPlaceholder of containedPlaceholders) {\n                // When looping over a map, setting an entry only causes a new iteration if the key is new\n                hashDependencyPlaceholders.add(containedPlaceholder);\n            }\n        }\n        let finalFileName;\n        let finalHash;\n        do {\n            // In case of a hash collision, create a hash of the hash\n            if (finalHash) {\n                contentToHash = finalHash;\n            }\n            finalHash = getHash(contentToHash).slice(0, placeholder.length);\n            finalFileName = replaceSinglePlaceholder(fileName, placeholder, finalHash);\n        } while (bundle[lowercaseBundleKeys].has(finalFileName.toLowerCase()));\n        bundle[finalFileName] = FILE_PLACEHOLDER;\n        hashesByPlaceholder.set(placeholder, finalHash);\n    }\n    return hashesByPlaceholder;\n}\nfunction addChunksToBundle(renderedChunksByPlaceholder, hashesByPlaceholder, bundle, nonHashedChunksWithPlaceholders, pluginDriver, options) {\n    for (const { chunk, code, fileName, sourcemapFileName, map } of renderedChunksByPlaceholder.values()) {\n        let updatedCode = replacePlaceholders(code, hashesByPlaceholder);\n        const finalFileName = replacePlaceholders(fileName, hashesByPlaceholder);\n        let finalSourcemapFileName = null;\n        if (map) {\n            if (options.sourcemapDebugIds) {\n                updatedCode += calculateDebugIdAndGetComment(updatedCode, map);\n            }\n            finalSourcemapFileName = sourcemapFileName\n                ? replacePlaceholders(sourcemapFileName, hashesByPlaceholder)\n                : `${finalFileName}.map`;\n            map.file = replacePlaceholders(map.file, hashesByPlaceholder);\n            updatedCode += emitSourceMapAndGetComment(finalSourcemapFileName, map, pluginDriver, options);\n        }\n        bundle[finalFileName] = chunk.finalizeChunk(updatedCode, map, finalSourcemapFileName, hashesByPlaceholder);\n    }\n    for (const { chunk, code, fileName, sourcemapFileName, map } of nonHashedChunksWithPlaceholders) {\n        let updatedCode = hashesByPlaceholder.size > 0 ? replacePlaceholders(code, hashesByPlaceholder) : code;\n        let finalSourcemapFileName = null;\n        if (map) {\n            if (options.sourcemapDebugIds) {\n                updatedCode += calculateDebugIdAndGetComment(updatedCode, map);\n            }\n            finalSourcemapFileName = sourcemapFileName\n                ? replacePlaceholders(sourcemapFileName, hashesByPlaceholder)\n                : `${fileName}.map`;\n            updatedCode += emitSourceMapAndGetComment(finalSourcemapFileName, map, pluginDriver, options);\n        }\n        bundle[fileName] = chunk.finalizeChunk(updatedCode, map, finalSourcemapFileName, hashesByPlaceholder);\n    }\n}\nfunction emitSourceMapAndGetComment(fileName, map, pluginDriver, { sourcemap, sourcemapBaseUrl }) {\n    let url;\n    if (sourcemap === 'inline') {\n        url = map.toUrl();\n    }\n    else {\n        const sourcemapFileName = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(fileName);\n        url = sourcemapBaseUrl\n            ? new URL(sourcemapFileName, sourcemapBaseUrl).toString()\n            : sourcemapFileName;\n        pluginDriver.emitFile({\n            fileName,\n            originalFileName: null,\n            source: map.toString(),\n            type: 'asset'\n        });\n    }\n    return sourcemap === 'hidden' ? '' : `//# ${SOURCEMAPPING_URL}=${url}\\n`;\n}\nfunction calculateDebugIdAndGetComment(code, map) {\n    const hash = hasherByType.hex(code);\n    const debugId = [\n        hash.slice(0, 8),\n        hash.slice(8, 12),\n        '4' + hash.slice(12, 15),\n        ((parseInt(hash.slice(15, 16), 16) & 3) | 8).toString(16) + hash.slice(17, 20),\n        hash.slice(20, 32)\n    ].join('-');\n    map.debugId = debugId;\n    return '//# debugId=' + debugId + '\\n';\n}\n\nclass Bundle {\n    constructor(outputOptions, unsetOptions, inputOptions, pluginDriver, graph) {\n        this.outputOptions = outputOptions;\n        this.unsetOptions = unsetOptions;\n        this.inputOptions = inputOptions;\n        this.pluginDriver = pluginDriver;\n        this.graph = graph;\n        this.facadeChunkByModule = new Map();\n        this.includedNamespaces = new Set();\n    }\n    async generate(isWrite) {\n        timeStart('GENERATE', 1);\n        const outputBundleBase = Object.create(null);\n        const outputBundle = getOutputBundle(outputBundleBase);\n        this.pluginDriver.setOutputBundle(outputBundle, this.outputOptions);\n        try {\n            timeStart('initialize render', 2);\n            await this.pluginDriver.hookParallel('renderStart', [this.outputOptions, this.inputOptions]);\n            timeEnd('initialize render', 2);\n            timeStart('generate chunks', 2);\n            const getHashPlaceholder = getHashPlaceholderGenerator();\n            const chunks = await this.generateChunks(outputBundle, getHashPlaceholder);\n            if (chunks.length > 1) {\n                validateOptionsForMultiChunkOutput(this.outputOptions, this.inputOptions.onLog);\n            }\n            this.pluginDriver.setChunkInformation(this.facadeChunkByModule);\n            for (const chunk of chunks) {\n                chunk.generateExports();\n            }\n            timeEnd('generate chunks', 2);\n            await renderChunks(chunks, outputBundle, this.pluginDriver, this.outputOptions, this.inputOptions.onLog);\n        }\n        catch (error_) {\n            await this.pluginDriver.hookParallel('renderError', [error_]);\n            throw error_;\n        }\n        removeUnreferencedAssets(outputBundle);\n        timeStart('generate bundle', 2);\n        await this.pluginDriver.hookSeq('generateBundle', [\n            this.outputOptions,\n            outputBundle,\n            isWrite\n        ]);\n        this.finaliseAssets(outputBundle);\n        timeEnd('generate bundle', 2);\n        timeEnd('GENERATE', 1);\n        return outputBundleBase;\n    }\n    async addManualChunks(manualChunks) {\n        const manualChunkAliasByEntry = new Map();\n        const chunkEntries = await Promise.all(Object.entries(manualChunks).map(async ([alias, files]) => ({\n            alias,\n            entries: await this.graph.moduleLoader.addAdditionalModules(files, true)\n        })));\n        for (const { alias, entries } of chunkEntries) {\n            for (const entry of entries) {\n                addModuleToManualChunk(alias, entry, manualChunkAliasByEntry);\n            }\n        }\n        return manualChunkAliasByEntry;\n    }\n    assignManualChunks(getManualChunk) {\n        const manualChunkAliasesWithEntry = [];\n        const manualChunksApi = {\n            getModuleIds: () => this.graph.modulesById.keys(),\n            getModuleInfo: this.graph.getModuleInfo\n        };\n        for (const module of this.graph.modulesById.values()) {\n            if (module instanceof Module) {\n                const manualChunkAlias = getManualChunk(module.id, manualChunksApi);\n                if (typeof manualChunkAlias === 'string') {\n                    manualChunkAliasesWithEntry.push([manualChunkAlias, module]);\n                }\n            }\n        }\n        manualChunkAliasesWithEntry.sort(([aliasA], [aliasB]) => aliasA > aliasB ? 1 : aliasA < aliasB ? -1 : 0);\n        const manualChunkAliasByEntry = new Map();\n        for (const [alias, module] of manualChunkAliasesWithEntry) {\n            addModuleToManualChunk(alias, module, manualChunkAliasByEntry);\n        }\n        return manualChunkAliasByEntry;\n    }\n    finaliseAssets(bundle) {\n        if (this.outputOptions.validate) {\n            for (const file of Object.values(bundle)) {\n                if ('code' in file) {\n                    try {\n                        (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.parseAst)(file.code, { jsx: this.inputOptions.jsx !== false });\n                    }\n                    catch (error_) {\n                        this.inputOptions.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logChunkInvalid)(file, error_));\n                    }\n                }\n            }\n        }\n        this.pluginDriver.finaliseAssets();\n    }\n    async generateChunks(bundle, getHashPlaceholder) {\n        const { experimentalMinChunkSize, inlineDynamicImports, manualChunks, preserveModules } = this.outputOptions;\n        const manualChunkAliasByEntry = typeof manualChunks === 'object'\n            ? await this.addManualChunks(manualChunks)\n            : this.assignManualChunks(manualChunks);\n        const snippets = getGenerateCodeSnippets(this.outputOptions);\n        const includedModules = getIncludedModules(this.graph.modulesById);\n        const inputBase = commondir(getAbsoluteEntryModulePaths(includedModules, preserveModules));\n        const externalChunkByModule = getExternalChunkByModule(this.graph.modulesById, this.outputOptions, inputBase);\n        const executableModule = inlineDynamicImports\n            ? [{ alias: null, modules: includedModules }]\n            : preserveModules\n                ? includedModules.map(module => ({ alias: null, modules: [module] }))\n                : getChunkAssignments(this.graph.entryModules, manualChunkAliasByEntry, experimentalMinChunkSize, this.inputOptions.onLog);\n        const chunks = new Array(executableModule.length);\n        const chunkByModule = new Map();\n        let index = 0;\n        for (const { alias, modules } of executableModule) {\n            sortByExecutionOrder(modules);\n            const chunk = new Chunk(modules, this.inputOptions, this.outputOptions, this.unsetOptions, this.pluginDriver, this.graph.modulesById, chunkByModule, externalChunkByModule, this.facadeChunkByModule, this.includedNamespaces, alias, getHashPlaceholder, bundle, inputBase, snippets);\n            chunks[index++] = chunk;\n        }\n        for (const chunk of chunks) {\n            chunk.link();\n        }\n        const facades = [];\n        for (const chunk of chunks) {\n            facades.push(...chunk.generateFacades());\n        }\n        return [...chunks, ...facades];\n    }\n}\nfunction validateOptionsForMultiChunkOutput(outputOptions, log) {\n    if (outputOptions.format === 'umd' || outputOptions.format === 'iife')\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.format', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_FORMAT, 'UMD and IIFE output formats are not supported for code-splitting builds', outputOptions.format));\n    if (typeof outputOptions.file === 'string')\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.file', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_DIR, 'when building multiple chunks, the \"output.dir\" option must be used, not \"output.file\". To inline dynamic imports, set the \"inlineDynamicImports\" option'));\n    if (outputOptions.sourcemapFile)\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.sourcemapFile', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_SOURCEMAPFILE, '\"output.sourcemapFile\" is only supported for single-file builds'));\n    if (!outputOptions.amd.autoId && outputOptions.amd.id)\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.amd.id', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_AMD_ID, 'this option is only properly supported for single-file builds. Use \"output.amd.autoId\" and \"output.amd.basePath\" instead'));\n}\nfunction getIncludedModules(modulesById) {\n    const includedModules = [];\n    for (const module of modulesById.values()) {\n        if (module instanceof Module &&\n            (module.isIncluded() || module.info.isEntry || module.includedDynamicImporters.length > 0)) {\n            includedModules.push(module);\n        }\n    }\n    return includedModules;\n}\nfunction getAbsoluteEntryModulePaths(includedModules, preserveModules) {\n    const absoluteEntryModulePaths = [];\n    for (const module of includedModules) {\n        if ((module.info.isEntry || preserveModules) && (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isAbsolute)(module.id)) {\n            absoluteEntryModulePaths.push(module.id);\n        }\n    }\n    return absoluteEntryModulePaths;\n}\nfunction getExternalChunkByModule(modulesById, outputOptions, inputBase) {\n    const externalChunkByModule = new Map();\n    for (const module of modulesById.values()) {\n        if (module instanceof ExternalModule) {\n            externalChunkByModule.set(module, new ExternalChunk(module, outputOptions, inputBase));\n        }\n    }\n    return externalChunkByModule;\n}\nfunction addModuleToManualChunk(alias, module, manualChunkAliasByEntry) {\n    const existingAlias = manualChunkAliasByEntry.get(module);\n    if (typeof existingAlias === 'string' && existingAlias !== alias) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logCannotAssignModuleToChunk)(module.id, alias, existingAlias));\n    }\n    manualChunkAliasByEntry.set(module, alias);\n}\n\nfunction flru (max) {\n\tvar num, curr, prev;\n\tvar limit = max;\n\n\tfunction keep(key, value) {\n\t\tif (++num > limit) {\n\t\t\tprev = curr;\n\t\t\treset(1);\n\t\t\t++num;\n\t\t}\n\t\tcurr[key] = value;\n\t}\n\n\tfunction reset(isPartial) {\n\t\tnum = 0;\n\t\tcurr = Object.create(null);\n\t\tisPartial || (prev=Object.create(null));\n\t}\n\n\treset();\n\n\treturn {\n\t\tclear: reset,\n\t\thas: function (key) {\n\t\t\treturn curr[key] !== void 0 || prev[key] !== void 0;\n\t\t},\n\t\tget: function (key) {\n\t\t\tvar val = curr[key];\n\t\t\tif (val !== void 0) return val;\n\t\t\tif ((val=prev[key]) !== void 0) {\n\t\t\t\tkeep(key, val);\n\t\t\t\treturn val;\n\t\t\t}\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif (curr[key] !== void 0) {\n\t\t\t\tcurr[key] = value;\n\t\t\t} else {\n\t\t\t\tkeep(key, value);\n\t\t\t}\n\t\t}\n\t};\n}\n\nclass GlobalScope extends Scope {\n    constructor() {\n        super();\n        this.parent = null;\n        this.variables.set('undefined', new UndefinedVariable());\n    }\n    findVariable(name) {\n        let variable = this.variables.get(name);\n        if (!variable) {\n            variable = new GlobalVariable(name);\n            this.variables.set(name, variable);\n        }\n        return variable;\n    }\n}\n\nfunction resolveIdViaPlugins(source, importer, pluginDriver, moduleLoaderResolveId, skip, customOptions, isEntry, attributes) {\n    let skipped = null;\n    let replaceContext = null;\n    if (skip) {\n        skipped = new Set();\n        for (const skippedCall of skip) {\n            if (source === skippedCall.source && importer === skippedCall.importer) {\n                skipped.add(skippedCall.plugin);\n            }\n        }\n        replaceContext = (pluginContext, plugin) => ({\n            ...pluginContext,\n            resolve: (source, importer, { attributes, custom, isEntry, skipSelf } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) => {\n                skipSelf ??= true;\n                return moduleLoaderResolveId(source, importer, custom, isEntry, attributes || _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT, skipSelf ? [...skip, { importer, plugin, source }] : skip);\n            }\n        });\n    }\n    return pluginDriver.hookFirstAndGetPlugin('resolveId', [source, importer, { attributes, custom: customOptions, isEntry }], replaceContext, skipped);\n}\n\nasync function resolveId(source, importer, preserveSymlinks, pluginDriver, moduleLoaderResolveId, skip, customOptions, isEntry, attributes) {\n    const pluginResult = await resolveIdViaPlugins(source, importer, pluginDriver, moduleLoaderResolveId, skip, customOptions, isEntry, attributes);\n    if (pluginResult != null) {\n        const [resolveIdResult, plugin] = pluginResult;\n        if (typeof resolveIdResult === 'object' && !resolveIdResult.resolvedBy) {\n            return {\n                ...resolveIdResult,\n                resolvedBy: plugin.name\n            };\n        }\n        if (typeof resolveIdResult === 'string') {\n            return {\n                id: resolveIdResult,\n                resolvedBy: plugin.name\n            };\n        }\n        return resolveIdResult;\n    }\n    // external modules (non-entry modules that start with neither '.' or '/')\n    // are skipped at this stage.\n    if (importer !== undefined && !(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isAbsolute)(source) && source[0] !== '.')\n        return null;\n    // `resolve` processes paths from right to left, prepending them until an\n    // absolute path is created. Absolute importees therefore shortcircuit the\n    // resolve call and require no special handing on our part.\n    // See https://nodejs.org/api/path.html#path_path_resolve_paths\n    return addJsExtensionIfNecessary(importer ? (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)((0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(importer), source) : (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(source), preserveSymlinks);\n}\nasync function addJsExtensionIfNecessary(file, preserveSymlinks) {\n    return ((await findFile(file, preserveSymlinks)) ??\n        (await findFile(file + '.mjs', preserveSymlinks)) ??\n        (await findFile(file + '.js', preserveSymlinks)));\n}\nasync function findFile(file, preserveSymlinks) {\n    try {\n        const stats = await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_6__.lstat)(file);\n        if (!preserveSymlinks && stats.isSymbolicLink())\n            return await findFile(await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_6__.realpath)(file), preserveSymlinks);\n        if ((preserveSymlinks && stats.isSymbolicLink()) || stats.isFile()) {\n            // check case\n            const name = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(file);\n            const files = await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_6__.readdir)((0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(file));\n            if (files.includes(name))\n                return file;\n        }\n    }\n    catch {\n        // suppress\n    }\n}\n\nconst ANONYMOUS_PLUGIN_PREFIX = 'at position ';\nconst ANONYMOUS_OUTPUT_PLUGIN_PREFIX = 'at output position ';\n\nfunction createPluginCache(cache) {\n    return {\n        delete(id) {\n            return delete cache[id];\n        },\n        get(id) {\n            const item = cache[id];\n            if (!item)\n                return;\n            item[0] = 0;\n            return item[1];\n        },\n        has(id) {\n            const item = cache[id];\n            if (!item)\n                return false;\n            item[0] = 0;\n            return true;\n        },\n        set(id, value) {\n            cache[id] = [0, value];\n        }\n    };\n}\nfunction getTrackedPluginCache(pluginCache, onUse) {\n    return {\n        delete(id) {\n            onUse();\n            return pluginCache.delete(id);\n        },\n        get(id) {\n            onUse();\n            return pluginCache.get(id);\n        },\n        has(id) {\n            onUse();\n            return pluginCache.has(id);\n        },\n        set(id, value) {\n            onUse();\n            return pluginCache.set(id, value);\n        }\n    };\n}\nconst NO_CACHE = {\n    delete() {\n        return false;\n    },\n    get() {\n        return undefined;\n    },\n    has() {\n        return false;\n    },\n    set() { }\n};\nfunction uncacheablePluginError(pluginName) {\n    if (pluginName.startsWith(ANONYMOUS_PLUGIN_PREFIX) ||\n        pluginName.startsWith(ANONYMOUS_OUTPUT_PLUGIN_PREFIX)) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAnonymousPluginCache)());\n    }\n    return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logDuplicatePluginName)(pluginName));\n}\nfunction getCacheForUncacheablePlugin(pluginName) {\n    return {\n        delete() {\n            return uncacheablePluginError(pluginName);\n        },\n        get() {\n            return uncacheablePluginError(pluginName);\n        },\n        has() {\n            return uncacheablePluginError(pluginName);\n        },\n        set() {\n            return uncacheablePluginError(pluginName);\n        }\n    };\n}\n\nasync function asyncFlatten(array) {\n    do {\n        array = (await Promise.all(array)).flat(Infinity);\n    } while (array.some((v) => v?.then));\n    return array;\n}\n\nconst getOnLog = (config, logLevel, printLog = defaultPrintLog) => {\n    const { onwarn, onLog } = config;\n    const defaultOnLog = getDefaultOnLog(printLog, onwarn);\n    if (onLog) {\n        const minimalPriority = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logLevelPriority[logLevel];\n        return (level, log) => onLog(level, addLogToString(log), (level, handledLog) => {\n            if (level === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_ERROR) {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)(normalizeLog(handledLog));\n            }\n            if (_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logLevelPriority[level] >= minimalPriority) {\n                defaultOnLog(level, normalizeLog(handledLog));\n            }\n        });\n    }\n    return defaultOnLog;\n};\nconst getDefaultOnLog = (printLog, onwarn) => onwarn\n    ? (level, log) => {\n        if (level === _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN) {\n            onwarn(addLogToString(log), warning => printLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, normalizeLog(warning)));\n        }\n        else {\n            printLog(level, log);\n        }\n    }\n    : printLog;\nconst addLogToString = (log) => {\n    Object.defineProperty(log, 'toString', {\n        value: () => log.message,\n        writable: true\n    });\n    return log;\n};\nconst normalizeLog = (log) => typeof log === 'string'\n    ? { message: log }\n    : typeof log === 'function'\n        ? normalizeLog(log())\n        : log;\nconst defaultPrintLog = (level, { message }) => {\n    switch (level) {\n        case _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN: {\n            return console.warn(message);\n        }\n        case _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_DEBUG: {\n            return console.debug(message);\n        }\n        default: {\n            return console.info(message);\n        }\n    }\n};\nfunction warnUnknownOptions(passedOptions, validOptions, optionType, log, ignoredKeys = /$./) {\n    const validOptionSet = new Set(validOptions);\n    const unknownOptions = Object.keys(passedOptions).filter(key => !(validOptionSet.has(key) || ignoredKeys.test(key)));\n    if (unknownOptions.length > 0) {\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnknownOption)(optionType, unknownOptions, [...validOptionSet].sort()));\n    }\n}\nconst treeshakePresets = {\n    recommended: {\n        annotations: true,\n        correctVarValueBeforeDeclaration: false,\n        manualPureFunctions: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n        moduleSideEffects: () => true,\n        propertyReadSideEffects: true,\n        tryCatchDeoptimization: true,\n        unknownGlobalSideEffects: false\n    },\n    safest: {\n        annotations: true,\n        correctVarValueBeforeDeclaration: true,\n        manualPureFunctions: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n        moduleSideEffects: () => true,\n        propertyReadSideEffects: true,\n        tryCatchDeoptimization: true,\n        unknownGlobalSideEffects: true\n    },\n    smallest: {\n        annotations: true,\n        correctVarValueBeforeDeclaration: false,\n        manualPureFunctions: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n        moduleSideEffects: () => false,\n        propertyReadSideEffects: false,\n        tryCatchDeoptimization: false,\n        unknownGlobalSideEffects: false\n    }\n};\nconst jsxPresets = {\n    preserve: {\n        factory: null,\n        fragment: null,\n        importSource: null,\n        mode: 'preserve'\n    },\n    'preserve-react': {\n        factory: 'React.createElement',\n        fragment: 'React.Fragment',\n        importSource: 'react',\n        mode: 'preserve'\n    },\n    react: {\n        factory: 'React.createElement',\n        fragment: 'React.Fragment',\n        importSource: 'react',\n        mode: 'classic'\n    },\n    'react-jsx': {\n        factory: 'React.createElement',\n        importSource: 'react',\n        jsxImportSource: 'react/jsx-runtime',\n        mode: 'automatic'\n    }\n};\nconst generatedCodePresets = {\n    es2015: {\n        arrowFunctions: true,\n        constBindings: true,\n        objectShorthand: true,\n        reservedNamesAsProps: true,\n        symbols: true\n    },\n    es5: {\n        arrowFunctions: false,\n        constBindings: false,\n        objectShorthand: false,\n        reservedNamesAsProps: true,\n        symbols: false\n    }\n};\nconst objectifyOption = (value) => value && typeof value === 'object' ? value : {};\nconst objectifyOptionWithPresets = (presets, optionName, urlSnippet, additionalValues) => (value) => {\n    if (typeof value === 'string') {\n        const preset = presets[value];\n        if (preset) {\n            return preset;\n        }\n        (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)(optionName, urlSnippet, `valid values are ${additionalValues}${(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.printQuotedStringList)(Object.keys(presets))}. You can also supply an object for more fine-grained control`, value));\n    }\n    return objectifyOption(value);\n};\nconst getOptionWithPreset = (value, presets, optionName, urlSnippet, additionalValues) => {\n    const presetName = value?.preset;\n    if (presetName) {\n        const preset = presets[presetName];\n        if (preset) {\n            return { ...preset, ...value };\n        }\n        else {\n            (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)(`${optionName}.preset`, urlSnippet, `valid values are ${(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.printQuotedStringList)(Object.keys(presets))}`, presetName));\n        }\n    }\n    return objectifyOptionWithPresets(presets, optionName, urlSnippet, additionalValues)(value);\n};\nconst normalizePluginOption = async (plugins) => (await asyncFlatten([plugins])).filter(Boolean);\n\nasync function transform(source, module, pluginDriver, log) {\n    const id = module.id;\n    const sourcemapChain = [];\n    let originalSourcemap = source.map === null ? null : decodedSourcemap(source.map);\n    const originalCode = source.code;\n    let ast = source.ast;\n    const transformDependencies = [];\n    const emittedFiles = [];\n    let customTransformCache = false;\n    const useCustomTransformCache = () => (customTransformCache = true);\n    let pluginName = '';\n    let currentSource = source.code;\n    function transformReducer(previousCode, result, plugin) {\n        let code;\n        let map;\n        if (typeof result === 'string') {\n            code = result;\n        }\n        else if (result && typeof result === 'object') {\n            module.updateOptions(result);\n            if (result.code == null) {\n                if (result.map || result.ast) {\n                    log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logNoTransformMapOrAstWithoutCode)(plugin.name));\n                }\n                return previousCode;\n            }\n            ({ code, map, ast } = result);\n        }\n        else {\n            return previousCode;\n        }\n        // strict null check allows 'null' maps to not be pushed to the chain,\n        // while 'undefined' gets the missing map warning\n        if (map !== null) {\n            sourcemapChain.push(decodedSourcemap(typeof map === 'string' ? JSON.parse(map) : map) || {\n                missing: true,\n                plugin: plugin.name\n            });\n        }\n        currentSource = code;\n        return code;\n    }\n    const getLogHandler = (handler) => (log, pos) => {\n        log = normalizeLog(log);\n        if (pos)\n            (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.augmentCodeLocation)(log, pos, currentSource, id);\n        log.id = id;\n        log.hook = 'transform';\n        handler(log);\n    };\n    let code;\n    try {\n        code = await pluginDriver.hookReduceArg0('transform', [currentSource, id], transformReducer, (pluginContext, plugin) => {\n            pluginName = plugin.name;\n            return {\n                ...pluginContext,\n                addWatchFile(id) {\n                    transformDependencies.push(id);\n                    pluginContext.addWatchFile(id);\n                },\n                cache: customTransformCache\n                    ? pluginContext.cache\n                    : getTrackedPluginCache(pluginContext.cache, useCustomTransformCache),\n                debug: getLogHandler(pluginContext.debug),\n                emitFile(emittedFile) {\n                    emittedFiles.push(emittedFile);\n                    return pluginDriver.emitFile(emittedFile);\n                },\n                error(error_, pos) {\n                    if (typeof error_ === 'string')\n                        error_ = { message: error_ };\n                    if (pos)\n                        (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.augmentCodeLocation)(error_, pos, currentSource, id);\n                    error_.id = id;\n                    error_.hook = 'transform';\n                    return pluginContext.error(error_);\n                },\n                getCombinedSourcemap() {\n                    const combinedMap = collapseSourcemap(id, originalCode, originalSourcemap, sourcemapChain, log);\n                    if (!combinedMap) {\n                        const magicString = new MagicString(originalCode);\n                        return magicString.generateMap({ hires: true, includeContent: true, source: id });\n                    }\n                    if (originalSourcemap !== combinedMap) {\n                        originalSourcemap = combinedMap;\n                        sourcemapChain.length = 0;\n                    }\n                    return new SourceMap({\n                        ...combinedMap,\n                        file: null,\n                        sourcesContent: combinedMap.sourcesContent\n                    });\n                },\n                info: getLogHandler(pluginContext.info),\n                setAssetSource() {\n                    return this.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidSetAssetSourceCall)());\n                },\n                warn: getLogHandler(pluginContext.warn)\n            };\n        });\n    }\n    catch (error_) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logPluginError)(error_, pluginName, { hook: 'transform', id }));\n    }\n    if (!customTransformCache && // files emitted by a transform hook need to be emitted again if the hook is skipped\n        emittedFiles.length > 0)\n        module.transformFiles = emittedFiles;\n    return {\n        ast,\n        code,\n        customTransformCache,\n        originalCode,\n        originalSourcemap,\n        sourcemapChain,\n        transformDependencies\n    };\n}\n\nconst RESOLVE_DEPENDENCIES = 'resolveDependencies';\nclass ModuleLoader {\n    constructor(graph, modulesById, options, pluginDriver) {\n        this.graph = graph;\n        this.modulesById = modulesById;\n        this.options = options;\n        this.pluginDriver = pluginDriver;\n        this.implicitEntryModules = new Set();\n        this.indexedEntryModules = [];\n        this.latestLoadModulesPromise = Promise.resolve();\n        this.moduleLoadPromises = new Map();\n        this.modulesWithLoadedDependencies = new Set();\n        this.nextChunkNamePriority = 0;\n        this.nextEntryModuleIndex = 0;\n        this.resolveId = async (source, importer, customOptions, isEntry, attributes, skip = null) => this.getResolvedIdWithDefaults(this.getNormalizedResolvedIdWithoutDefaults(this.options.external(source, importer, false)\n            ? false\n            : await resolveId(source, importer, this.options.preserveSymlinks, this.pluginDriver, this.resolveId, skip, customOptions, typeof isEntry === 'boolean' ? isEntry : !importer, attributes), importer, source), attributes);\n        this.hasModuleSideEffects = options.treeshake\n            ? options.treeshake.moduleSideEffects\n            : () => true;\n    }\n    async addAdditionalModules(unresolvedModules, isAddForManualChunks) {\n        const result = this.extendLoadModulesPromise(Promise.all(unresolvedModules.map(id => this.loadEntryModule(id, false, undefined, null, isAddForManualChunks))));\n        await this.awaitLoadModulesPromise();\n        return result;\n    }\n    async addEntryModules(unresolvedEntryModules, isUserDefined) {\n        const firstEntryModuleIndex = this.nextEntryModuleIndex;\n        this.nextEntryModuleIndex += unresolvedEntryModules.length;\n        const firstChunkNamePriority = this.nextChunkNamePriority;\n        this.nextChunkNamePriority += unresolvedEntryModules.length;\n        const newEntryModules = await this.extendLoadModulesPromise(Promise.all(unresolvedEntryModules.map(({ id, importer }) => this.loadEntryModule(id, true, importer, null))).then(entryModules => {\n            for (const [index, entryModule] of entryModules.entries()) {\n                entryModule.isUserDefinedEntryPoint =\n                    entryModule.isUserDefinedEntryPoint || isUserDefined;\n                addChunkNamesToModule(entryModule, unresolvedEntryModules[index], isUserDefined, firstChunkNamePriority + index);\n                const existingIndexedModule = this.indexedEntryModules.find(indexedModule => indexedModule.module === entryModule);\n                if (existingIndexedModule) {\n                    existingIndexedModule.index = Math.min(existingIndexedModule.index, firstEntryModuleIndex + index);\n                }\n                else {\n                    this.indexedEntryModules.push({\n                        index: firstEntryModuleIndex + index,\n                        module: entryModule\n                    });\n                }\n            }\n            this.indexedEntryModules.sort(({ index: indexA }, { index: indexB }) => indexA > indexB ? 1 : -1);\n            return entryModules;\n        }));\n        await this.awaitLoadModulesPromise();\n        return {\n            entryModules: this.indexedEntryModules.map(({ module }) => module),\n            implicitEntryModules: [...this.implicitEntryModules],\n            newEntryModules\n        };\n    }\n    async emitChunk({ fileName, id, importer, name, implicitlyLoadedAfterOneOf, preserveSignature }) {\n        const unresolvedModule = {\n            fileName: fileName || null,\n            id,\n            importer,\n            name: name || null\n        };\n        const module = implicitlyLoadedAfterOneOf\n            ? await this.addEntryWithImplicitDependants(unresolvedModule, implicitlyLoadedAfterOneOf)\n            : (await this.addEntryModules([unresolvedModule], false)).newEntryModules[0];\n        if (preserveSignature != null) {\n            module.preserveSignature = preserveSignature;\n        }\n        return module;\n    }\n    async preloadModule(resolvedId) {\n        const module = await this.fetchModule(this.getResolvedIdWithDefaults(resolvedId, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT), undefined, false, resolvedId.resolveDependencies ? RESOLVE_DEPENDENCIES : true);\n        return module.info;\n    }\n    addEntryWithImplicitDependants(unresolvedModule, implicitlyLoadedAfter) {\n        const chunkNamePriority = this.nextChunkNamePriority++;\n        return this.extendLoadModulesPromise(this.loadEntryModule(unresolvedModule.id, false, unresolvedModule.importer, null).then(async (entryModule) => {\n            addChunkNamesToModule(entryModule, unresolvedModule, false, chunkNamePriority);\n            if (!entryModule.info.isEntry) {\n                const implicitlyLoadedAfterModules = await Promise.all(implicitlyLoadedAfter.map(id => this.loadEntryModule(id, false, unresolvedModule.importer, entryModule.id)));\n                // We need to check again if this is still an entry module as these\n                // changes need to be performed atomically to avoid race conditions\n                // if the same module is re-emitted as an entry module.\n                // The inverse changes happen in \"handleExistingModule\"\n                if (!entryModule.info.isEntry) {\n                    this.implicitEntryModules.add(entryModule);\n                    for (const module of implicitlyLoadedAfterModules) {\n                        entryModule.implicitlyLoadedAfter.add(module);\n                    }\n                    for (const dependant of entryModule.implicitlyLoadedAfter) {\n                        dependant.implicitlyLoadedBefore.add(entryModule);\n                    }\n                }\n            }\n            return entryModule;\n        }));\n    }\n    async addModuleSource(id, importer, module) {\n        let source;\n        try {\n            source = await this.graph.fileOperationQueue.run(async () => {\n                const content = await this.pluginDriver.hookFirst('load', [id]);\n                if (content !== null)\n                    return content;\n                this.graph.watchFiles[id] = true;\n                return await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_6__.readFile)(id, 'utf8');\n            });\n        }\n        catch (error_) {\n            let message = `Could not load ${id}`;\n            if (importer)\n                message += ` (imported by ${(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.relativeId)(importer)})`;\n            message += `: ${error_.message}`;\n            error_.message = message;\n            throw error_;\n        }\n        const sourceDescription = typeof source === 'string'\n            ? { code: source }\n            : source != null && typeof source === 'object' && typeof source.code === 'string'\n                ? source\n                : (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logBadLoader)(id));\n        const code = sourceDescription.code;\n        if (code.charCodeAt(0) === 0xfe_ff) {\n            sourceDescription.code = code.slice(1);\n        }\n        const cachedModule = this.graph.cachedModules.get(id);\n        if (cachedModule &&\n            !cachedModule.customTransformCache &&\n            cachedModule.originalCode === sourceDescription.code &&\n            !(await this.pluginDriver.hookFirst('shouldTransformCachedModule', [\n                {\n                    ast: cachedModule.ast,\n                    code: cachedModule.code,\n                    id: cachedModule.id,\n                    meta: cachedModule.meta,\n                    moduleSideEffects: cachedModule.moduleSideEffects,\n                    resolvedSources: cachedModule.resolvedIds,\n                    syntheticNamedExports: cachedModule.syntheticNamedExports\n                }\n            ]))) {\n            if (cachedModule.transformFiles) {\n                for (const emittedFile of cachedModule.transformFiles)\n                    this.pluginDriver.emitFile(emittedFile);\n            }\n            await module.setSource(cachedModule);\n        }\n        else {\n            module.updateOptions(sourceDescription);\n            await module.setSource(await transform(sourceDescription, module, this.pluginDriver, this.options.onLog));\n        }\n    }\n    async awaitLoadModulesPromise() {\n        let startingPromise;\n        do {\n            startingPromise = this.latestLoadModulesPromise;\n            await startingPromise;\n        } while (startingPromise !== this.latestLoadModulesPromise);\n    }\n    extendLoadModulesPromise(loadNewModulesPromise) {\n        this.latestLoadModulesPromise = Promise.all([\n            loadNewModulesPromise,\n            this.latestLoadModulesPromise\n        ]);\n        this.latestLoadModulesPromise.catch(() => {\n            /* Avoid unhandled Promise rejections */\n        });\n        return loadNewModulesPromise;\n    }\n    async fetchDynamicDependencies(module, resolveDynamicImportPromises) {\n        const dependencies = await Promise.all(resolveDynamicImportPromises.map(resolveDynamicImportPromise => resolveDynamicImportPromise.then(async ([dynamicImport, resolvedId]) => {\n            if (resolvedId === null)\n                return null;\n            if (typeof resolvedId === 'string') {\n                dynamicImport.resolution = resolvedId;\n                return null;\n            }\n            return (dynamicImport.resolution = await this.fetchResolvedDependency((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.relativeId)(resolvedId.id), module.id, resolvedId));\n        })));\n        for (const dependency of dependencies) {\n            if (dependency) {\n                module.dynamicDependencies.add(dependency);\n                dependency.dynamicImporters.push(module.id);\n            }\n        }\n    }\n    // If this is a preload, then this method always waits for the dependencies of\n    // the module to be resolved.\n    // Otherwise, if the module does not exist, it waits for the module and all\n    // its dependencies to be loaded.\n    // Otherwise, it returns immediately.\n    async fetchModule({ attributes, id, meta, moduleSideEffects, syntheticNamedExports }, importer, isEntry, isPreload) {\n        const existingModule = this.modulesById.get(id);\n        if (existingModule instanceof Module) {\n            if (importer && doAttributesDiffer(attributes, existingModule.info.attributes)) {\n                this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInconsistentImportAttributes)(existingModule.info.attributes, attributes, id, importer));\n            }\n            await this.handleExistingModule(existingModule, isEntry, isPreload);\n            return existingModule;\n        }\n        if (existingModule instanceof ExternalModule) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logExternalModulesCannotBeTransformedToModules)(existingModule.id));\n        }\n        const module = new Module(this.graph, id, this.options, isEntry, moduleSideEffects, syntheticNamedExports, meta, attributes);\n        this.modulesById.set(id, module);\n        const loadPromise = this.addModuleSource(id, importer, module).then(() => [\n            this.getResolveStaticDependencyPromises(module),\n            this.getResolveDynamicImportPromises(module),\n            loadAndResolveDependenciesPromise\n        ]);\n        const loadAndResolveDependenciesPromise = waitForDependencyResolution(loadPromise).then(() => this.pluginDriver.hookParallel('moduleParsed', [module.info]));\n        loadAndResolveDependenciesPromise.catch(() => {\n            /* avoid unhandled promise rejections */\n        });\n        this.moduleLoadPromises.set(module, loadPromise);\n        const resolveDependencyPromises = await loadPromise;\n        if (!isPreload) {\n            await this.fetchModuleDependencies(module, ...resolveDependencyPromises);\n        }\n        else if (isPreload === RESOLVE_DEPENDENCIES) {\n            await loadAndResolveDependenciesPromise;\n        }\n        return module;\n    }\n    async fetchModuleDependencies(module, resolveStaticDependencyPromises, resolveDynamicDependencyPromises, loadAndResolveDependenciesPromise) {\n        if (this.modulesWithLoadedDependencies.has(module)) {\n            return;\n        }\n        this.modulesWithLoadedDependencies.add(module);\n        await Promise.all([\n            this.fetchStaticDependencies(module, resolveStaticDependencyPromises),\n            this.fetchDynamicDependencies(module, resolveDynamicDependencyPromises)\n        ]);\n        module.linkImports();\n        // To handle errors when resolving dependencies or in moduleParsed\n        await loadAndResolveDependenciesPromise;\n    }\n    fetchResolvedDependency(source, importer, resolvedId) {\n        if (resolvedId.external) {\n            const { attributes, external, id, moduleSideEffects, meta } = resolvedId;\n            let externalModule = this.modulesById.get(id);\n            if (!externalModule) {\n                externalModule = new ExternalModule(this.options, id, moduleSideEffects, meta, external !== 'absolute' && (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isAbsolute)(id), attributes);\n                this.modulesById.set(id, externalModule);\n            }\n            else if (!(externalModule instanceof ExternalModule)) {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInternalIdCannotBeExternal)(source, importer));\n            }\n            else if (doAttributesDiffer(externalModule.info.attributes, attributes)) {\n                this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInconsistentImportAttributes)(externalModule.info.attributes, attributes, source, importer));\n            }\n            return Promise.resolve(externalModule);\n        }\n        return this.fetchModule(resolvedId, importer, false, false);\n    }\n    async fetchStaticDependencies(module, resolveStaticDependencyPromises) {\n        for (const dependency of await Promise.all(resolveStaticDependencyPromises.map(resolveStaticDependencyPromise => resolveStaticDependencyPromise.then(([source, resolvedId]) => this.fetchResolvedDependency(source, module.id, resolvedId))))) {\n            module.dependencies.add(dependency);\n            dependency.importers.push(module.id);\n        }\n        if (!this.options.treeshake || module.info.moduleSideEffects === 'no-treeshake') {\n            for (const dependency of module.dependencies) {\n                if (dependency instanceof Module) {\n                    dependency.importedFromNotTreeshaken = true;\n                }\n            }\n        }\n    }\n    getNormalizedResolvedIdWithoutDefaults(resolveIdResult, importer, source) {\n        const { makeAbsoluteExternalsRelative } = this.options;\n        if (resolveIdResult) {\n            if (typeof resolveIdResult === 'object') {\n                const external = resolveIdResult.external || this.options.external(resolveIdResult.id, importer, true);\n                return {\n                    ...resolveIdResult,\n                    external: external &&\n                        (external === 'relative' ||\n                            !(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isAbsolute)(resolveIdResult.id) ||\n                            (external === true &&\n                                isNotAbsoluteExternal(resolveIdResult.id, source, makeAbsoluteExternalsRelative)) ||\n                            'absolute')\n                };\n            }\n            const external = this.options.external(resolveIdResult, importer, true);\n            return {\n                external: external &&\n                    (isNotAbsoluteExternal(resolveIdResult, source, makeAbsoluteExternalsRelative) ||\n                        'absolute'),\n                id: external && makeAbsoluteExternalsRelative\n                    ? normalizeRelativeExternalId(resolveIdResult, importer)\n                    : resolveIdResult\n            };\n        }\n        const id = makeAbsoluteExternalsRelative\n            ? normalizeRelativeExternalId(source, importer)\n            : source;\n        if (resolveIdResult !== false && !this.options.external(id, importer, true)) {\n            return null;\n        }\n        return {\n            external: isNotAbsoluteExternal(id, source, makeAbsoluteExternalsRelative) || 'absolute',\n            id\n        };\n    }\n    getResolveDynamicImportPromises(module) {\n        return module.dynamicImports.map(async (dynamicImport) => {\n            const resolvedId = await this.resolveDynamicImport(module, dynamicImport.argument, module.id, getAttributesFromImportExpression(dynamicImport.node));\n            if (resolvedId && typeof resolvedId === 'object') {\n                dynamicImport.id = resolvedId.id;\n            }\n            return [dynamicImport, resolvedId];\n        });\n    }\n    getResolveStaticDependencyPromises(module) {\n        return Array.from(module.sourcesWithAttributes, async ([source, attributes]) => [\n            source,\n            (module.resolvedIds[source] =\n                module.resolvedIds[source] ||\n                    this.handleInvalidResolvedId(await this.resolveId(source, module.id, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT, false, attributes), source, module.id, attributes))\n        ]);\n    }\n    getResolvedIdWithDefaults(resolvedId, attributes) {\n        if (!resolvedId) {\n            return null;\n        }\n        const external = resolvedId.external || false;\n        return {\n            attributes: resolvedId.attributes || attributes,\n            external,\n            id: resolvedId.id,\n            meta: resolvedId.meta || {},\n            moduleSideEffects: resolvedId.moduleSideEffects ?? this.hasModuleSideEffects(resolvedId.id, !!external),\n            resolvedBy: resolvedId.resolvedBy ?? 'rollup',\n            syntheticNamedExports: resolvedId.syntheticNamedExports ?? false\n        };\n    }\n    async handleExistingModule(module, isEntry, isPreload) {\n        const loadPromise = this.moduleLoadPromises.get(module);\n        if (isPreload) {\n            return isPreload === RESOLVE_DEPENDENCIES\n                ? waitForDependencyResolution(loadPromise)\n                : loadPromise;\n        }\n        if (isEntry) {\n            // This reverts the changes in addEntryWithImplicitDependants and needs to\n            // be performed atomically\n            module.info.isEntry = true;\n            this.implicitEntryModules.delete(module);\n            for (const dependant of module.implicitlyLoadedAfter) {\n                dependant.implicitlyLoadedBefore.delete(module);\n            }\n            module.implicitlyLoadedAfter.clear();\n        }\n        return this.fetchModuleDependencies(module, ...(await loadPromise));\n    }\n    handleInvalidResolvedId(resolvedId, source, importer, attributes) {\n        if (resolvedId === null) {\n            if ((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isRelative)(source)) {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnresolvedImport)(source, importer));\n            }\n            this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnresolvedImportTreatedAsExternal)(source, importer));\n            return {\n                attributes,\n                external: true,\n                id: source,\n                meta: {},\n                moduleSideEffects: this.hasModuleSideEffects(source, true),\n                resolvedBy: 'rollup',\n                syntheticNamedExports: false\n            };\n        }\n        else if (resolvedId.external && resolvedId.syntheticNamedExports) {\n            this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logExternalSyntheticExports)(source, importer));\n        }\n        return resolvedId;\n    }\n    async loadEntryModule(unresolvedId, isEntry, importer, implicitlyLoadedBefore, isLoadForManualChunks = false) {\n        const resolveIdResult = await resolveId(unresolvedId, importer, this.options.preserveSymlinks, this.pluginDriver, this.resolveId, null, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT, true, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT);\n        if (resolveIdResult == null) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)(implicitlyLoadedBefore === null\n                ? (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnresolvedEntry)(unresolvedId)\n                : (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logUnresolvedImplicitDependant)(unresolvedId, implicitlyLoadedBefore));\n        }\n        const isExternalModules = typeof resolveIdResult === 'object' && resolveIdResult.external;\n        if (resolveIdResult === false || isExternalModules) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)(implicitlyLoadedBefore === null\n                ? isExternalModules && isLoadForManualChunks\n                    ? (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logExternalModulesCannotBeIncludedInManualChunks)(unresolvedId)\n                    : (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logEntryCannotBeExternal)(unresolvedId)\n                : (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logImplicitDependantCannotBeExternal)(unresolvedId, implicitlyLoadedBefore));\n        }\n        return this.fetchModule(this.getResolvedIdWithDefaults(typeof resolveIdResult === 'object'\n            ? resolveIdResult\n            : { id: resolveIdResult }, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT), undefined, isEntry, false);\n    }\n    async resolveDynamicImport(module, specifier, importer, attributes) {\n        const resolution = await this.pluginDriver.hookFirst('resolveDynamicImport', [\n            specifier,\n            importer,\n            { attributes }\n        ]);\n        if (typeof specifier !== 'string') {\n            if (typeof resolution === 'string') {\n                return resolution;\n            }\n            if (!resolution) {\n                return null;\n            }\n            return this.getResolvedIdWithDefaults(resolution, attributes);\n        }\n        if (resolution == null) {\n            const existingResolution = module.resolvedIds[specifier];\n            if (existingResolution) {\n                if (doAttributesDiffer(existingResolution.attributes, attributes)) {\n                    this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInconsistentImportAttributes)(existingResolution.attributes, attributes, specifier, importer));\n                }\n                return existingResolution;\n            }\n            return (module.resolvedIds[specifier] = this.handleInvalidResolvedId(await this.resolveId(specifier, module.id, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT, false, attributes), specifier, module.id, attributes));\n        }\n        return this.handleInvalidResolvedId(this.getResolvedIdWithDefaults(this.getNormalizedResolvedIdWithoutDefaults(resolution, importer, specifier), attributes), specifier, importer, attributes);\n    }\n}\nfunction normalizeRelativeExternalId(source, importer) {\n    return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isRelative)(source)\n        ? importer\n            ? (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(importer, '..', source)\n            : (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(source)\n        : source;\n}\nfunction addChunkNamesToModule(module, { fileName, name }, isUserDefined, priority) {\n    if (fileName !== null) {\n        module.chunkFileNames.add(fileName);\n    }\n    else if (name !== null) {\n        // Always keep chunkNames sorted by priority\n        let namePosition = 0;\n        while (module.chunkNames[namePosition]?.priority < priority)\n            namePosition++;\n        module.chunkNames.splice(namePosition, 0, { isUserDefined, name, priority });\n    }\n}\nfunction isNotAbsoluteExternal(id, source, makeAbsoluteExternalsRelative) {\n    return (makeAbsoluteExternalsRelative === true ||\n        (makeAbsoluteExternalsRelative === 'ifRelativeSource' && (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isRelative)(source)) ||\n        !(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isAbsolute)(id));\n}\nasync function waitForDependencyResolution(loadPromise) {\n    const [resolveStaticDependencyPromises, resolveDynamicImportPromises] = await loadPromise;\n    return Promise.all([...resolveStaticDependencyPromises, ...resolveDynamicImportPromises]);\n}\n\nfunction generateAssetFileName(name, names, source, originalFileName, originalFileNames, sourceHash, outputOptions, bundle, inputOptions) {\n    const emittedName = outputOptions.sanitizeFileName(name || 'asset');\n    return makeUnique(renderNamePattern(typeof outputOptions.assetFileNames === 'function'\n        ? outputOptions.assetFileNames({\n            // Additionally, this should be non-enumerable in the next major\n            get name() {\n                (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.warnDeprecation)('Accessing the \"name\" property of emitted assets when generating the file name is deprecated. Use the \"names\" property instead.', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_GENERATEBUNDLE, false, inputOptions);\n                return name;\n            },\n            names,\n            // Additionally, this should be non-enumerable in the next major\n            get originalFileName() {\n                (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.warnDeprecation)('Accessing the \"originalFileName\" property of emitted assets when generating the file name is deprecated. Use the \"originalFileNames\" property instead.', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_GENERATEBUNDLE, false, inputOptions);\n                return originalFileName;\n            },\n            originalFileNames,\n            source,\n            type: 'asset'\n        })\n        : outputOptions.assetFileNames, 'output.assetFileNames', {\n        ext: () => (0,node_path__WEBPACK_IMPORTED_MODULE_1__.extname)(emittedName).slice(1),\n        extname: () => (0,node_path__WEBPACK_IMPORTED_MODULE_1__.extname)(emittedName),\n        hash: size => sourceHash.slice(0, Math.max(0, size || DEFAULT_HASH_SIZE)),\n        name: () => emittedName.slice(0, Math.max(0, emittedName.length - (0,node_path__WEBPACK_IMPORTED_MODULE_1__.extname)(emittedName).length))\n    }), bundle);\n}\nfunction reserveFileNameInBundle(fileName, { bundle }, log) {\n    if (bundle[lowercaseBundleKeys].has(fileName.toLowerCase())) {\n        log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFileNameConflict)(fileName));\n    }\n    else {\n        bundle[fileName] = FILE_PLACEHOLDER;\n    }\n}\nconst emittedFileTypes = new Set(['chunk', 'asset', 'prebuilt-chunk']);\nfunction hasValidType(emittedFile) {\n    return Boolean(emittedFile &&\n        emittedFileTypes.has(emittedFile.type));\n}\nfunction hasValidName(emittedFile) {\n    const validatedName = emittedFile.fileName || emittedFile.name;\n    return !validatedName || (typeof validatedName === 'string' && !(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isPathFragment)(validatedName));\n}\nfunction getValidSource(source, emittedFile, fileReferenceId) {\n    if (!(typeof source === 'string' || source instanceof Uint8Array)) {\n        const assetName = emittedFile.fileName || emittedFile.name || fileReferenceId;\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Could not set source for ${typeof assetName === 'string' ? `asset \"${assetName}\"` : 'unnamed asset'}, asset source needs to be a string, Uint8Array or Buffer.`));\n    }\n    return source;\n}\nfunction getAssetFileName(file, referenceId) {\n    if (typeof file.fileName !== 'string') {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAssetNotFinalisedForFileName)(file.name || referenceId));\n    }\n    return file.fileName;\n}\nfunction getChunkFileName(file, facadeChunkByModule) {\n    if (file.fileName) {\n        return file.fileName;\n    }\n    if (facadeChunkByModule) {\n        return facadeChunkByModule.get(file.module).getFileName();\n    }\n    return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logChunkNotGeneratedForFileName)(file.fileName || file.name));\n}\nclass FileEmitter {\n    constructor(graph, options, baseFileEmitter) {\n        this.graph = graph;\n        this.options = options;\n        this.facadeChunkByModule = null;\n        this.nextIdBase = 1;\n        this.output = null;\n        this.outputFileEmitters = [];\n        this.emitFile = (emittedFile) => {\n            if (!hasValidType(emittedFile)) {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Emitted files must be of type \"asset\", \"chunk\" or \"prebuilt-chunk\", received \"${emittedFile && emittedFile.type}\".`));\n            }\n            if (emittedFile.type === 'prebuilt-chunk') {\n                return this.emitPrebuiltChunk(emittedFile);\n            }\n            if (!hasValidName(emittedFile)) {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`The \"fileName\" or \"name\" properties of emitted chunks and assets must be strings that are neither absolute nor relative paths, received \"${emittedFile.fileName || emittedFile.name}\".`));\n            }\n            if (emittedFile.type === 'chunk') {\n                return this.emitChunk(emittedFile);\n            }\n            return this.emitAsset(emittedFile);\n        };\n        this.finaliseAssets = () => {\n            for (const [referenceId, emittedFile] of this.filesByReferenceId) {\n                if (emittedFile.type === 'asset' && typeof emittedFile.fileName !== 'string')\n                    return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logNoAssetSourceSet)(emittedFile.name || referenceId));\n            }\n        };\n        this.getFileName = (fileReferenceId) => {\n            const emittedFile = this.filesByReferenceId.get(fileReferenceId);\n            if (!emittedFile)\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFileReferenceIdNotFoundForFilename)(fileReferenceId));\n            if (emittedFile.type === 'chunk') {\n                return getChunkFileName(emittedFile, this.facadeChunkByModule);\n            }\n            if (emittedFile.type === 'prebuilt-chunk') {\n                return emittedFile.fileName;\n            }\n            return getAssetFileName(emittedFile, fileReferenceId);\n        };\n        this.setAssetSource = (referenceId, requestedSource) => {\n            const consumedFile = this.filesByReferenceId.get(referenceId);\n            if (!consumedFile)\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAssetReferenceIdNotFoundForSetSource)(referenceId));\n            if (consumedFile.type !== 'asset') {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Asset sources can only be set for emitted assets but \"${referenceId}\" is an emitted chunk.`));\n            }\n            if (consumedFile.source !== undefined) {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAssetSourceAlreadySet)(consumedFile.name || referenceId));\n            }\n            const source = getValidSource(requestedSource, consumedFile, referenceId);\n            if (this.output) {\n                this.finalizeAdditionalAsset(consumedFile, source, this.output);\n            }\n            else {\n                consumedFile.source = source;\n                for (const emitter of this.outputFileEmitters) {\n                    emitter.finalizeAdditionalAsset(consumedFile, source, emitter.output);\n                }\n            }\n        };\n        this.setChunkInformation = (facadeChunkByModule) => {\n            this.facadeChunkByModule = facadeChunkByModule;\n        };\n        this.setOutputBundle = (bundle, outputOptions) => {\n            const getHash = hasherByType[outputOptions.hashCharacters];\n            const output = (this.output = {\n                bundle,\n                fileNamesBySourceHash: new Map(),\n                getHash,\n                outputOptions\n            });\n            for (const emittedFile of this.filesByReferenceId.values()) {\n                if (emittedFile.fileName) {\n                    reserveFileNameInBundle(emittedFile.fileName, output, this.options.onLog);\n                }\n            }\n            const consumedAssetsByHash = new Map();\n            for (const consumedFile of this.filesByReferenceId.values()) {\n                if (consumedFile.type === 'asset' && consumedFile.source !== undefined) {\n                    if (consumedFile.fileName) {\n                        this.finalizeAdditionalAsset(consumedFile, consumedFile.source, output);\n                    }\n                    else {\n                        const sourceHash = getHash(consumedFile.source);\n                        getOrCreate(consumedAssetsByHash, sourceHash, () => []).push(consumedFile);\n                    }\n                }\n                else if (consumedFile.type === 'prebuilt-chunk') {\n                    this.output.bundle[consumedFile.fileName] = this.createPrebuiltChunk(consumedFile);\n                }\n            }\n            for (const [sourceHash, consumedFiles] of consumedAssetsByHash) {\n                this.finalizeAssetsWithSameSource(consumedFiles, sourceHash, output);\n            }\n        };\n        this.filesByReferenceId = baseFileEmitter\n            ? new Map(baseFileEmitter.filesByReferenceId)\n            : new Map();\n        baseFileEmitter?.addOutputFileEmitter(this);\n    }\n    addOutputFileEmitter(outputFileEmitter) {\n        this.outputFileEmitters.push(outputFileEmitter);\n    }\n    assignReferenceId(file, idBase) {\n        let referenceId = idBase;\n        do {\n            referenceId = getHash64(referenceId).slice(0, 8).replaceAll('-', '$');\n        } while (this.filesByReferenceId.has(referenceId) ||\n            this.outputFileEmitters.some(({ filesByReferenceId }) => filesByReferenceId.has(referenceId)));\n        file.referenceId = referenceId;\n        this.filesByReferenceId.set(referenceId, file);\n        for (const { filesByReferenceId } of this.outputFileEmitters) {\n            filesByReferenceId.set(referenceId, file);\n        }\n        return referenceId;\n    }\n    createPrebuiltChunk(prebuiltChunk) {\n        return {\n            code: prebuiltChunk.code,\n            dynamicImports: [],\n            exports: prebuiltChunk.exports || [],\n            facadeModuleId: null,\n            fileName: prebuiltChunk.fileName,\n            implicitlyLoadedBefore: [],\n            importedBindings: {},\n            imports: [],\n            isDynamicEntry: false,\n            isEntry: false,\n            isImplicitEntry: false,\n            map: prebuiltChunk.map || null,\n            moduleIds: [],\n            modules: {},\n            name: prebuiltChunk.fileName,\n            preliminaryFileName: prebuiltChunk.fileName,\n            referencedFiles: [],\n            sourcemapFileName: prebuiltChunk.sourcemapFileName || null,\n            type: 'chunk'\n        };\n    }\n    emitAsset(emittedAsset) {\n        const source = emittedAsset.source === undefined\n            ? undefined\n            : getValidSource(emittedAsset.source, emittedAsset, null);\n        const originalFileName = emittedAsset.originalFileName || null;\n        if (typeof originalFileName === 'string') {\n            this.graph.watchFiles[originalFileName] = true;\n        }\n        const consumedAsset = {\n            fileName: emittedAsset.fileName,\n            name: emittedAsset.name,\n            needsCodeReference: !!emittedAsset.needsCodeReference,\n            originalFileName,\n            referenceId: '',\n            source,\n            type: 'asset'\n        };\n        const referenceId = this.assignReferenceId(consumedAsset, emittedAsset.fileName || emittedAsset.name || String(this.nextIdBase++));\n        if (this.output) {\n            this.emitAssetWithReferenceId(consumedAsset, this.output);\n        }\n        else {\n            for (const fileEmitter of this.outputFileEmitters) {\n                fileEmitter.emitAssetWithReferenceId(consumedAsset, fileEmitter.output);\n            }\n        }\n        return referenceId;\n    }\n    emitAssetWithReferenceId(consumedAsset, output) {\n        const { fileName, source } = consumedAsset;\n        if (fileName) {\n            reserveFileNameInBundle(fileName, output, this.options.onLog);\n        }\n        if (source !== undefined) {\n            this.finalizeAdditionalAsset(consumedAsset, source, output);\n        }\n    }\n    emitChunk(emittedChunk) {\n        if (this.graph.phase > BuildPhase.LOAD_AND_PARSE) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidRollupPhaseForChunkEmission)());\n        }\n        if (typeof emittedChunk.id !== 'string') {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Emitted chunks need to have a valid string id, received \"${emittedChunk.id}\"`));\n        }\n        const consumedChunk = {\n            fileName: emittedChunk.fileName,\n            module: null,\n            name: emittedChunk.name || emittedChunk.id,\n            referenceId: '',\n            type: 'chunk'\n        };\n        this.graph.moduleLoader\n            .emitChunk(emittedChunk)\n            .then(module => (consumedChunk.module = module))\n            .catch(() => {\n            // Avoid unhandled Promise rejection as the error will be thrown later\n            // once module loading has finished\n        });\n        return this.assignReferenceId(consumedChunk, emittedChunk.id);\n    }\n    emitPrebuiltChunk(emitPrebuiltChunk) {\n        if (typeof emitPrebuiltChunk.code !== 'string') {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`Emitted prebuilt chunks need to have a valid string code, received \"${emitPrebuiltChunk.code}\".`));\n        }\n        if (typeof emitPrebuiltChunk.fileName !== 'string' ||\n            (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isPathFragment)(emitPrebuiltChunk.fileName)) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logFailedValidation)(`The \"fileName\" property of emitted prebuilt chunks must be strings that are neither absolute nor relative paths, received \"${emitPrebuiltChunk.fileName}\".`));\n        }\n        const consumedPrebuiltChunk = {\n            code: emitPrebuiltChunk.code,\n            exports: emitPrebuiltChunk.exports,\n            fileName: emitPrebuiltChunk.fileName,\n            map: emitPrebuiltChunk.map,\n            referenceId: '',\n            type: 'prebuilt-chunk'\n        };\n        const referenceId = this.assignReferenceId(consumedPrebuiltChunk, consumedPrebuiltChunk.fileName);\n        if (this.output) {\n            this.output.bundle[consumedPrebuiltChunk.fileName] =\n                this.createPrebuiltChunk(consumedPrebuiltChunk);\n        }\n        return referenceId;\n    }\n    finalizeAdditionalAsset(consumedFile, source, { bundle, fileNamesBySourceHash, getHash, outputOptions }) {\n        let { fileName, name, needsCodeReference, originalFileName, referenceId } = consumedFile;\n        // Deduplicate assets if an explicit fileName is not provided\n        if (!fileName) {\n            const sourceHash = getHash(source);\n            fileName = fileNamesBySourceHash.get(sourceHash);\n            if (!fileName) {\n                fileName = generateAssetFileName(name, name ? [name] : [], source, originalFileName, originalFileName ? [originalFileName] : [], sourceHash, outputOptions, bundle, this.options);\n                fileNamesBySourceHash.set(sourceHash, fileName);\n            }\n        }\n        // We must not modify the original assets to avoid interaction between outputs\n        const assetWithFileName = { ...consumedFile, fileName, source };\n        this.filesByReferenceId.set(referenceId, assetWithFileName);\n        const existingAsset = bundle[fileName];\n        if (existingAsset?.type === 'asset') {\n            existingAsset.needsCodeReference &&= needsCodeReference;\n            if (name) {\n                existingAsset.names.push(name);\n            }\n            if (originalFileName) {\n                existingAsset.originalFileNames.push(originalFileName);\n            }\n        }\n        else {\n            const { options } = this;\n            bundle[fileName] = {\n                fileName,\n                get name() {\n                    // Additionally, this should be non-enumerable in the next major\n                    (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.warnDeprecation)('Accessing the \"name\" property of emitted assets in the bundle is deprecated. Use the \"names\" property instead.', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_GENERATEBUNDLE, false, options);\n                    return name;\n                },\n                names: name ? [name] : [],\n                needsCodeReference,\n                get originalFileName() {\n                    // Additionally, this should be non-enumerable in the next major\n                    (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.warnDeprecation)('Accessing the \"originalFileName\" property of emitted assets in the bundle is deprecated. Use the \"originalFileNames\" property instead.', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_GENERATEBUNDLE, false, options);\n                    return originalFileName;\n                },\n                originalFileNames: originalFileName ? [originalFileName] : [],\n                source,\n                type: 'asset'\n            };\n        }\n    }\n    finalizeAssetsWithSameSource(consumedFiles, sourceHash, { bundle, fileNamesBySourceHash, outputOptions }) {\n        const { names, originalFileNames } = getNamesFromAssets(consumedFiles);\n        let fileName = '';\n        let usedConsumedFile;\n        let needsCodeReference = true;\n        for (const consumedFile of consumedFiles) {\n            needsCodeReference &&= consumedFile.needsCodeReference;\n            const assetFileName = generateAssetFileName(consumedFile.name, names, consumedFile.source, consumedFile.originalFileName, originalFileNames, sourceHash, outputOptions, bundle, this.options);\n            if (!fileName ||\n                assetFileName.length < fileName.length ||\n                (assetFileName.length === fileName.length && assetFileName < fileName)) {\n                fileName = assetFileName;\n                usedConsumedFile = consumedFile;\n            }\n        }\n        fileNamesBySourceHash.set(sourceHash, fileName);\n        for (const consumedFile of consumedFiles) {\n            // We must not modify the original assets to avoid interaction between outputs\n            const assetWithFileName = { ...consumedFile, fileName };\n            this.filesByReferenceId.set(consumedFile.referenceId, assetWithFileName);\n        }\n        const { options } = this;\n        bundle[fileName] = {\n            fileName,\n            get name() {\n                // Additionally, this should be non-enumerable in the next major\n                (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.warnDeprecation)('Accessing the \"name\" property of emitted assets in the bundle is deprecated. Use the \"names\" property instead.', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_GENERATEBUNDLE, false, options);\n                return usedConsumedFile.name;\n            },\n            names,\n            needsCodeReference,\n            get originalFileName() {\n                // Additionally, this should be non-enumerable in the next major\n                (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.warnDeprecation)('Accessing the \"originalFileName\" property of emitted assets in the bundle is deprecated. Use the \"originalFileNames\" property instead.', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_GENERATEBUNDLE, false, options);\n                return usedConsumedFile.originalFileName;\n            },\n            originalFileNames,\n            source: usedConsumedFile.source,\n            type: 'asset'\n        };\n    }\n}\nfunction getNamesFromAssets(consumedFiles) {\n    const names = [];\n    const originalFileNames = [];\n    for (const { name, originalFileName } of consumedFiles) {\n        if (typeof name === 'string') {\n            names.push(name);\n        }\n        if (originalFileName) {\n            originalFileNames.push(originalFileName);\n        }\n    }\n    originalFileNames.sort();\n    // Sort by length first and then alphabetically so that the order is stable\n    // and the shortest names come first\n    names.sort((a, b) => a.length - b.length || (a > b ? 1 : a === b ? 0 : -1));\n    return { names, originalFileNames };\n}\n\nfunction getLogHandler(level, code, logger, pluginName, logLevel) {\n    if (_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logLevelPriority[level] < _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logLevelPriority[logLevel]) {\n        return doNothing;\n    }\n    return (log, pos) => {\n        if (pos != null) {\n            logger(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidLogPosition)(pluginName));\n        }\n        log = normalizeLog(log);\n        if (log.code && !log.pluginCode) {\n            log.pluginCode = log.code;\n        }\n        log.code = code;\n        log.plugin = pluginName;\n        logger(level, log);\n    };\n}\n\nfunction getPluginContext(plugin, pluginCache, graph, options, fileEmitter, existingPluginNames) {\n    const { logLevel, onLog } = options;\n    let cacheable = true;\n    if (typeof plugin.cacheKey !== 'string') {\n        if (plugin.name.startsWith(ANONYMOUS_PLUGIN_PREFIX) ||\n            plugin.name.startsWith(ANONYMOUS_OUTPUT_PLUGIN_PREFIX) ||\n            existingPluginNames.has(plugin.name)) {\n            cacheable = false;\n        }\n        else {\n            existingPluginNames.add(plugin.name);\n        }\n    }\n    let cacheInstance;\n    if (!pluginCache) {\n        cacheInstance = NO_CACHE;\n    }\n    else if (cacheable) {\n        const cacheKey = plugin.cacheKey || plugin.name;\n        cacheInstance = createPluginCache(pluginCache[cacheKey] || (pluginCache[cacheKey] = Object.create(null)));\n    }\n    else {\n        cacheInstance = getCacheForUncacheablePlugin(plugin.name);\n    }\n    return {\n        addWatchFile(id) {\n            graph.watchFiles[id] = true;\n        },\n        cache: cacheInstance,\n        debug: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_DEBUG, 'PLUGIN_LOG', onLog, plugin.name, logLevel),\n        emitFile: fileEmitter.emitFile.bind(fileEmitter),\n        error(error_) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logPluginError)(normalizeLog(error_), plugin.name));\n        },\n        getFileName: fileEmitter.getFileName,\n        getModuleIds: () => graph.modulesById.keys(),\n        getModuleInfo: graph.getModuleInfo,\n        getWatchFiles: () => Object.keys(graph.watchFiles),\n        info: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_INFO, 'PLUGIN_LOG', onLog, plugin.name, logLevel),\n        load(resolvedId) {\n            return graph.moduleLoader.preloadModule(resolvedId);\n        },\n        meta: {\n            rollupVersion: version,\n            watchMode: graph.watchMode\n        },\n        parse: _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.parseAst,\n        resolve(source, importer, { attributes, custom, isEntry, skipSelf } = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.BLANK) {\n            skipSelf ??= true;\n            return graph.moduleLoader.resolveId(source, importer, custom, isEntry, attributes || _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_OBJECT, skipSelf ? [{ importer, plugin, source }] : null);\n        },\n        setAssetSource: fileEmitter.setAssetSource,\n        warn: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, 'PLUGIN_WARNING', onLog, plugin.name, logLevel)\n    };\n}\n\n// This will make sure no input hook is omitted\nconst inputHookNames = {\n    buildEnd: 1,\n    buildStart: 1,\n    closeBundle: 1,\n    closeWatcher: 1,\n    load: 1,\n    moduleParsed: 1,\n    onLog: 1,\n    options: 1,\n    resolveDynamicImport: 1,\n    resolveId: 1,\n    shouldTransformCachedModule: 1,\n    transform: 1,\n    watchChange: 1\n};\nconst inputHooks = Object.keys(inputHookNames);\nclass PluginDriver {\n    constructor(graph, options, userPlugins, pluginCache, basePluginDriver) {\n        this.graph = graph;\n        this.options = options;\n        this.pluginCache = pluginCache;\n        this.sortedPlugins = new Map();\n        this.unfulfilledActions = new Set();\n        this.fileEmitter = new FileEmitter(graph, options, basePluginDriver && basePluginDriver.fileEmitter);\n        this.emitFile = this.fileEmitter.emitFile.bind(this.fileEmitter);\n        this.getFileName = this.fileEmitter.getFileName.bind(this.fileEmitter);\n        this.finaliseAssets = this.fileEmitter.finaliseAssets.bind(this.fileEmitter);\n        this.setChunkInformation = this.fileEmitter.setChunkInformation.bind(this.fileEmitter);\n        this.setOutputBundle = this.fileEmitter.setOutputBundle.bind(this.fileEmitter);\n        this.plugins = [...(basePluginDriver ? basePluginDriver.plugins : []), ...userPlugins];\n        const existingPluginNames = new Set();\n        this.pluginContexts = new Map(this.plugins.map(plugin => [\n            plugin,\n            getPluginContext(plugin, pluginCache, graph, options, this.fileEmitter, existingPluginNames)\n        ]));\n        if (basePluginDriver) {\n            for (const plugin of userPlugins) {\n                for (const hook of inputHooks) {\n                    if (hook in plugin) {\n                        options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInputHookInOutputPlugin)(plugin.name, hook));\n                    }\n                }\n            }\n        }\n    }\n    createOutputPluginDriver(plugins) {\n        return new PluginDriver(this.graph, this.options, plugins, this.pluginCache, this);\n    }\n    getUnfulfilledHookActions() {\n        return this.unfulfilledActions;\n    }\n    // chains, first non-null result stops and returns\n    hookFirst(hookName, parameters, replaceContext, skipped) {\n        return this.hookFirstAndGetPlugin(hookName, parameters, replaceContext, skipped).then(result => result && result[0]);\n    }\n    // chains, first non-null result stops and returns result and last plugin\n    async hookFirstAndGetPlugin(hookName, parameters, replaceContext, skipped) {\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            if (skipped?.has(plugin))\n                continue;\n            const result = await this.runHook(hookName, parameters, plugin, replaceContext);\n            if (result != null)\n                return [result, plugin];\n        }\n        return null;\n    }\n    // chains synchronously, first non-null result stops and returns\n    hookFirstSync(hookName, parameters, replaceContext) {\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            const result = this.runHookSync(hookName, parameters, plugin, replaceContext);\n            if (result != null)\n                return result;\n        }\n        return null;\n    }\n    // parallel, ignores returns\n    async hookParallel(hookName, parameters, replaceContext) {\n        const parallelPromises = [];\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            if (plugin[hookName].sequential) {\n                await Promise.all(parallelPromises);\n                parallelPromises.length = 0;\n                await this.runHook(hookName, parameters, plugin, replaceContext);\n            }\n            else {\n                parallelPromises.push(this.runHook(hookName, parameters, plugin, replaceContext));\n            }\n        }\n        await Promise.all(parallelPromises);\n    }\n    // chains, reduces returned value, handling the reduced value as the first hook argument\n    hookReduceArg0(hookName, [argument0, ...rest], reduce, replaceContext) {\n        let promise = Promise.resolve(argument0);\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            promise = promise.then(argument0 => this.runHook(hookName, [argument0, ...rest], plugin, replaceContext).then(result => reduce.call(this.pluginContexts.get(plugin), argument0, result, plugin)));\n        }\n        return promise;\n    }\n    // chains synchronously, reduces returned value, handling the reduced value as the first hook argument\n    hookReduceArg0Sync(hookName, [argument0, ...rest], reduce, replaceContext) {\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            const parameters = [argument0, ...rest];\n            const result = this.runHookSync(hookName, parameters, plugin, replaceContext);\n            argument0 = reduce.call(this.pluginContexts.get(plugin), argument0, result, plugin);\n        }\n        return argument0;\n    }\n    // chains, reduces returned value to type string, handling the reduced value separately. permits hooks as values.\n    async hookReduceValue(hookName, initialValue, parameters, reducer) {\n        const results = [];\n        const parallelResults = [];\n        for (const plugin of this.getSortedPlugins(hookName, validateAddonPluginHandler)) {\n            if (plugin[hookName].sequential) {\n                results.push(...(await Promise.all(parallelResults)));\n                parallelResults.length = 0;\n                results.push(await this.runHook(hookName, parameters, plugin));\n            }\n            else {\n                parallelResults.push(this.runHook(hookName, parameters, plugin));\n            }\n        }\n        results.push(...(await Promise.all(parallelResults)));\n        return results.reduce(reducer, await initialValue);\n    }\n    // chains synchronously, reduces returned value to type T, handling the reduced value separately. permits hooks as values.\n    hookReduceValueSync(hookName, initialValue, parameters, reduce, replaceContext) {\n        let accumulator = initialValue;\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            const result = this.runHookSync(hookName, parameters, plugin, replaceContext);\n            accumulator = reduce.call(this.pluginContexts.get(plugin), accumulator, result, plugin);\n        }\n        return accumulator;\n    }\n    // chains, ignores returns\n    hookSeq(hookName, parameters, replaceContext) {\n        let promise = Promise.resolve();\n        for (const plugin of this.getSortedPlugins(hookName)) {\n            promise = promise.then(() => this.runHook(hookName, parameters, plugin, replaceContext));\n        }\n        return promise.then(noReturn);\n    }\n    getSortedPlugins(hookName, validateHandler) {\n        return getOrCreate(this.sortedPlugins, hookName, () => getSortedValidatedPlugins(hookName, this.plugins, validateHandler));\n    }\n    // Implementation signature\n    runHook(hookName, parameters, plugin, replaceContext) {\n        // We always filter for plugins that support the hook before running it\n        const hook = plugin[hookName];\n        const handler = typeof hook === 'object' ? hook.handler : hook;\n        let context = this.pluginContexts.get(plugin);\n        if (replaceContext) {\n            context = replaceContext(context, plugin);\n        }\n        let action = null;\n        return Promise.resolve()\n            .then(() => {\n            if (typeof handler !== 'function') {\n                return handler;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n            const hookResult = handler.apply(context, parameters);\n            if (!hookResult?.then) {\n                // short circuit for non-thenables and non-Promises\n                return hookResult;\n            }\n            // Track pending hook actions to properly error out when\n            // unfulfilled promises cause rollup to abruptly and confusingly\n            // exit with a successful 0 return code but without producing any\n            // output, errors or warnings.\n            action = [plugin.name, hookName, parameters];\n            this.unfulfilledActions.add(action);\n            // Although it would be more elegant to just return hookResult here\n            // and put the .then() handler just above the .catch() handler below,\n            // doing so would subtly change the defacto async event dispatch order\n            // which at least one test and some plugins in the wild may depend on.\n            return Promise.resolve(hookResult).then(result => {\n                // action was fulfilled\n                this.unfulfilledActions.delete(action);\n                return result;\n            });\n        })\n            .catch(error_ => {\n            if (action !== null) {\n                // action considered to be fulfilled since error being handled\n                this.unfulfilledActions.delete(action);\n            }\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logPluginError)(error_, plugin.name, { hook: hookName }));\n        });\n    }\n    /**\n     * Run a sync plugin hook and return the result.\n     * @param hookName Name of the plugin hook. Must be in `PluginHooks`.\n     * @param args Arguments passed to the plugin hook.\n     * @param plugin The acutal plugin\n     * @param replaceContext When passed, the plugin context can be overridden.\n     */\n    runHookSync(hookName, parameters, plugin, replaceContext) {\n        const hook = plugin[hookName];\n        const handler = typeof hook === 'object' ? hook.handler : hook;\n        let context = this.pluginContexts.get(plugin);\n        if (replaceContext) {\n            context = replaceContext(context, plugin);\n        }\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n            return handler.apply(context, parameters);\n        }\n        catch (error_) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logPluginError)(error_, plugin.name, { hook: hookName }));\n        }\n    }\n}\nfunction getSortedValidatedPlugins(hookName, plugins, validateHandler = validateFunctionPluginHandler) {\n    const pre = [];\n    const normal = [];\n    const post = [];\n    for (const plugin of plugins) {\n        const hook = plugin[hookName];\n        if (hook) {\n            if (typeof hook === 'object') {\n                validateHandler(hook.handler, hookName, plugin);\n                if (hook.order === 'pre') {\n                    pre.push(plugin);\n                    continue;\n                }\n                if (hook.order === 'post') {\n                    post.push(plugin);\n                    continue;\n                }\n            }\n            else {\n                validateHandler(hook, hookName, plugin);\n            }\n            normal.push(plugin);\n        }\n    }\n    return [...pre, ...normal, ...post];\n}\nfunction validateFunctionPluginHandler(handler, hookName, plugin) {\n    if (typeof handler !== 'function') {\n        (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidFunctionPluginHook)(hookName, plugin.name));\n    }\n}\nfunction validateAddonPluginHandler(handler, hookName, plugin) {\n    if (typeof handler !== 'string' && typeof handler !== 'function') {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidAddonPluginHook)(hookName, plugin.name));\n    }\n}\nfunction noReturn() { }\n\nclass Queue {\n    constructor(maxParallel) {\n        this.maxParallel = maxParallel;\n        this.queue = [];\n        this.workerCount = 0;\n    }\n    run(task) {\n        return new Promise((resolve, reject) => {\n            this.queue.push({ reject, resolve, task });\n            this.work();\n        });\n    }\n    async work() {\n        if (this.workerCount >= this.maxParallel)\n            return;\n        this.workerCount++;\n        let entry;\n        while ((entry = this.queue.shift())) {\n            const { reject, resolve, task } = entry;\n            try {\n                const result = await task();\n                resolve(result);\n            }\n            catch (error) {\n                reject(error);\n            }\n        }\n        this.workerCount--;\n    }\n}\n\nfunction normalizeEntryModules(entryModules) {\n    if (Array.isArray(entryModules)) {\n        return entryModules.map(id => ({\n            fileName: null,\n            id,\n            implicitlyLoadedAfter: [],\n            importer: undefined,\n            name: null\n        }));\n    }\n    return Object.entries(entryModules).map(([name, id]) => ({\n        fileName: null,\n        id,\n        implicitlyLoadedAfter: [],\n        importer: undefined,\n        name\n    }));\n}\nclass Graph {\n    constructor(options, watcher) {\n        this.options = options;\n        this.astLru = flru(5);\n        this.cachedModules = new Map();\n        this.deoptimizationTracker = new PathTracker();\n        this.entryModules = [];\n        this.modulesById = new Map();\n        this.needsTreeshakingPass = false;\n        this.phase = BuildPhase.LOAD_AND_PARSE;\n        this.scope = new GlobalScope();\n        this.watchFiles = Object.create(null);\n        this.watchMode = false;\n        this.externalModules = [];\n        this.implicitEntryModules = [];\n        this.modules = [];\n        this.getModuleInfo = (moduleId) => {\n            const foundModule = this.modulesById.get(moduleId);\n            if (!foundModule)\n                return null;\n            return foundModule.info;\n        };\n        if (options.cache !== false) {\n            if (options.cache?.modules) {\n                for (const module of options.cache.modules)\n                    this.cachedModules.set(module.id, module);\n            }\n            this.pluginCache = options.cache?.plugins || Object.create(null);\n            // increment access counter\n            for (const name in this.pluginCache) {\n                const cache = this.pluginCache[name];\n                for (const value of Object.values(cache))\n                    value[0]++;\n            }\n        }\n        if (watcher) {\n            this.watchMode = true;\n            const handleChange = (...parameters) => this.pluginDriver.hookParallel('watchChange', parameters);\n            const handleClose = () => this.pluginDriver.hookParallel('closeWatcher', []);\n            watcher.onCurrentRun('change', handleChange);\n            watcher.onCurrentRun('close', handleClose);\n        }\n        this.pluginDriver = new PluginDriver(this, options, options.plugins, this.pluginCache);\n        this.moduleLoader = new ModuleLoader(this, this.modulesById, this.options, this.pluginDriver);\n        this.fileOperationQueue = new Queue(options.maxParallelFileOps);\n        this.pureFunctions = getPureFunctions(options);\n    }\n    async build() {\n        timeStart('generate module graph', 2);\n        await this.generateModuleGraph();\n        timeEnd('generate module graph', 2);\n        timeStart('sort and bind modules', 2);\n        this.phase = BuildPhase.ANALYSE;\n        this.sortModules();\n        timeEnd('sort and bind modules', 2);\n        timeStart('mark included statements', 2);\n        this.includeStatements();\n        timeEnd('mark included statements', 2);\n        this.phase = BuildPhase.GENERATE;\n    }\n    getCache() {\n        // handle plugin cache eviction\n        for (const name in this.pluginCache) {\n            const cache = this.pluginCache[name];\n            let allDeleted = true;\n            for (const [key, value] of Object.entries(cache)) {\n                if (value[0] >= this.options.experimentalCacheExpiry)\n                    delete cache[key];\n                else\n                    allDeleted = false;\n            }\n            if (allDeleted)\n                delete this.pluginCache[name];\n        }\n        return {\n            modules: this.modules.map(module => module.toJSON()),\n            plugins: this.pluginCache\n        };\n    }\n    async generateModuleGraph() {\n        ({ entryModules: this.entryModules, implicitEntryModules: this.implicitEntryModules } =\n            await this.moduleLoader.addEntryModules(normalizeEntryModules(this.options.input), true));\n        if (this.entryModules.length === 0) {\n            throw new Error('You must supply options.input to rollup');\n        }\n        for (const module of this.modulesById.values()) {\n            module.cacheInfoGetters();\n            if (module instanceof Module) {\n                this.modules.push(module);\n            }\n            else {\n                this.externalModules.push(module);\n            }\n        }\n    }\n    includeStatements() {\n        const entryModules = [...this.entryModules, ...this.implicitEntryModules];\n        for (const module of entryModules) {\n            markModuleAndImpureDependenciesAsExecuted(module);\n        }\n        if (this.options.treeshake) {\n            let treeshakingPass = 1;\n            do {\n                timeStart(`treeshaking pass ${treeshakingPass}`, 3);\n                this.needsTreeshakingPass = false;\n                for (const module of this.modules) {\n                    if (module.isExecuted) {\n                        module.hasTreeShakingPassStarted = true;\n                        if (module.info.moduleSideEffects === 'no-treeshake') {\n                            module.includeAllInBundle();\n                        }\n                        else {\n                            module.include();\n                        }\n                    }\n                }\n                if (treeshakingPass === 1) {\n                    // We only include exports after the first pass to avoid issues with\n                    // the TDZ detection logic\n                    for (const module of entryModules) {\n                        if (module.preserveSignature !== false) {\n                            module.includeAllExports(false);\n                            this.needsTreeshakingPass = true;\n                        }\n                    }\n                }\n                timeEnd(`treeshaking pass ${treeshakingPass++}`, 3);\n            } while (this.needsTreeshakingPass);\n        }\n        else {\n            for (const module of this.modules)\n                module.includeAllInBundle();\n        }\n        for (const externalModule of this.externalModules)\n            externalModule.warnUnusedImports();\n        for (const module of this.implicitEntryModules) {\n            for (const dependant of module.implicitlyLoadedAfter) {\n                if (!(dependant.info.isEntry || dependant.isIncluded())) {\n                    (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logImplicitDependantIsNotIncluded)(dependant));\n                }\n            }\n        }\n    }\n    sortModules() {\n        const { orderedModules, cyclePaths } = analyseModuleExecution(this.entryModules);\n        for (const cyclePath of cyclePaths) {\n            this.options.onLog(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logCircularDependency)(cyclePath));\n        }\n        this.modules = orderedModules;\n        for (const module of this.modules) {\n            module.bindReferences();\n        }\n        this.warnForMissingExports();\n    }\n    warnForMissingExports() {\n        for (const module of this.modules) {\n            for (const importDescription of module.importDescriptions.values()) {\n                if (importDescription.name !== '*' &&\n                    !importDescription.module.getVariableForExportName(importDescription.name)[0]) {\n                    module.log(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingExport)(importDescription.name, module.id, importDescription.module.id), importDescription.start);\n                }\n            }\n        }\n    }\n}\n\nfunction formatAction([pluginName, hookName, parameters]) {\n    const action = `(${pluginName}) ${hookName}`;\n    const s = JSON.stringify;\n    switch (hookName) {\n        case 'resolveId': {\n            return `${action} ${s(parameters[0])} ${s(parameters[1])}`;\n        }\n        case 'load': {\n            return `${action} ${s(parameters[0])}`;\n        }\n        case 'transform': {\n            return `${action} ${s(parameters[1])}`;\n        }\n        case 'shouldTransformCachedModule': {\n            return `${action} ${s(parameters[0].id)}`;\n        }\n        case 'moduleParsed': {\n            return `${action} ${s(parameters[0].id)}`;\n        }\n    }\n    return action;\n}\nlet handleBeforeExit = null;\nconst rejectByPluginDriver = new Map();\nasync function catchUnfinishedHookActions(pluginDriver, callback) {\n    const emptyEventLoopPromise = new Promise((_, reject) => {\n        rejectByPluginDriver.set(pluginDriver, reject);\n        if (!handleBeforeExit) {\n            // We only ever create a single event listener to avoid max listener and\n            // other issues\n            handleBeforeExit = () => {\n                for (const [pluginDriver, reject] of rejectByPluginDriver) {\n                    const unfulfilledActions = pluginDriver.getUnfulfilledHookActions();\n                    reject(new Error(`Unexpected early exit. This happens when Promises returned by plugins cannot resolve. Unfinished hook action(s) on exit:\\n` +\n                        [...unfulfilledActions].map(formatAction).join('\\n')));\n                }\n            };\n            node_process__WEBPACK_IMPORTED_MODULE_4__.once('beforeExit', handleBeforeExit);\n        }\n    });\n    try {\n        return await Promise.race([callback(), emptyEventLoopPromise]);\n    }\n    finally {\n        rejectByPluginDriver.delete(pluginDriver);\n        if (rejectByPluginDriver.size === 0) {\n            node_process__WEBPACK_IMPORTED_MODULE_4__.off('beforeExit', handleBeforeExit);\n            handleBeforeExit = null;\n        }\n    }\n}\n\nasync function initWasm() { }\n\nfunction getLogger(plugins, onLog, watchMode, logLevel) {\n    plugins = getSortedValidatedPlugins('onLog', plugins);\n    const minimalPriority = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logLevelPriority[logLevel];\n    const logger = (level, log, skipped = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_SET) => {\n        (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.augmentLogMessage)(log);\n        const logPriority = _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logLevelPriority[level];\n        if (logPriority < minimalPriority) {\n            return;\n        }\n        for (const plugin of plugins) {\n            if (skipped.has(plugin))\n                continue;\n            const { onLog: pluginOnLog } = plugin;\n            const getLogHandler = (level) => {\n                if (_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logLevelPriority[level] < minimalPriority) {\n                    return doNothing;\n                }\n                return log => logger(level, normalizeLog(log), new Set(skipped).add(plugin));\n            };\n            const handler = 'handler' in pluginOnLog ? pluginOnLog.handler : pluginOnLog;\n            if (handler.call({\n                debug: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_DEBUG),\n                error: (log) => (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)(normalizeLog(log)),\n                info: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_INFO),\n                meta: { rollupVersion: version, watchMode },\n                warn: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN)\n            }, level, log) === false) {\n                return;\n            }\n        }\n        onLog(level, log);\n    };\n    return logger;\n}\n\nfunction ensureArray(items) {\n    if (Array.isArray(items)) {\n        return items.filter(Boolean);\n    }\n    if (items) {\n        return [items];\n    }\n    return [];\n}\n\nasync function normalizeInputOptions(config, watchMode) {\n    // These are options that may trigger special warnings or behaviour later\n    // if the user did not select an explicit value\n    const unsetOptions = new Set();\n    const context = config.context ?? 'undefined';\n    const plugins = await normalizePluginOption(config.plugins);\n    const logLevel = config.logLevel || _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_INFO;\n    const onLog = getLogger(plugins, getOnLog(config, logLevel), watchMode, logLevel);\n    const strictDeprecations = config.strictDeprecations || false;\n    const maxParallelFileOps = getMaxParallelFileOps(config);\n    const options = {\n        cache: getCache(config),\n        context,\n        experimentalCacheExpiry: config.experimentalCacheExpiry ?? 10,\n        experimentalLogSideEffects: config.experimentalLogSideEffects || false,\n        external: getIdMatcher(config.external),\n        input: getInput(config),\n        jsx: getJsx(config),\n        logLevel,\n        makeAbsoluteExternalsRelative: config.makeAbsoluteExternalsRelative ?? 'ifRelativeSource',\n        maxParallelFileOps,\n        moduleContext: getModuleContext(config, context),\n        onLog,\n        perf: config.perf || false,\n        plugins,\n        preserveEntrySignatures: config.preserveEntrySignatures ?? 'exports-only',\n        preserveSymlinks: config.preserveSymlinks || false,\n        shimMissingExports: config.shimMissingExports || false,\n        strictDeprecations,\n        treeshake: getTreeshake(config)\n    };\n    warnUnknownOptions(config, [...Object.keys(options), 'onwarn', 'watch'], 'input options', onLog, /^(output)$/);\n    return { options, unsetOptions };\n}\nconst getCache = (config) => config.cache === true // `true` is the default\n    ? undefined\n    : config.cache?.cache || config.cache;\nconst getIdMatcher = (option) => {\n    if (option === true) {\n        return () => true;\n    }\n    if (typeof option === 'function') {\n        return (id, ...parameters) => (!id.startsWith('\\0') && option(id, ...parameters)) || false;\n    }\n    if (option) {\n        const ids = new Set();\n        const matchers = [];\n        for (const value of ensureArray(option)) {\n            if (value instanceof RegExp) {\n                matchers.push(value);\n            }\n            else {\n                ids.add(value);\n            }\n        }\n        return (id, ..._arguments) => ids.has(id) || matchers.some(matcher => matcher.test(id));\n    }\n    return () => false;\n};\nconst getInput = (config) => {\n    const configInput = config.input;\n    return configInput == null ? [] : typeof configInput === 'string' ? [configInput] : configInput;\n};\nconst getJsx = (config) => {\n    const configJsx = config.jsx;\n    if (!configJsx)\n        return false;\n    const configWithPreset = getOptionWithPreset(configJsx, jsxPresets, 'jsx', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_JSX, 'false, ');\n    const { factory, importSource, mode } = configWithPreset;\n    switch (mode) {\n        case 'automatic': {\n            return {\n                factory: factory || 'React.createElement',\n                importSource: importSource || 'react',\n                jsxImportSource: configWithPreset.jsxImportSource || 'react/jsx-runtime',\n                mode: 'automatic'\n            };\n        }\n        case 'preserve': {\n            if (importSource && !(factory || configWithPreset.fragment)) {\n                (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('jsx', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_JSX, 'when preserving JSX and specifying an importSource, you also need to specify a factory or fragment'));\n            }\n            return {\n                factory: factory || null,\n                fragment: configWithPreset.fragment || null,\n                importSource: importSource || null,\n                mode: 'preserve'\n            };\n        }\n        // case 'classic':\n        default: {\n            if (mode && mode !== 'classic') {\n                (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('jsx.mode', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_JSX, 'mode must be \"automatic\", \"classic\" or \"preserve\"', mode));\n            }\n            return {\n                factory: factory || 'React.createElement',\n                fragment: configWithPreset.fragment || 'React.Fragment',\n                importSource: importSource || null,\n                mode: 'classic'\n            };\n        }\n    }\n};\nconst getMaxParallelFileOps = (config) => {\n    const maxParallelFileOps = config.maxParallelFileOps;\n    if (typeof maxParallelFileOps === 'number') {\n        if (maxParallelFileOps <= 0)\n            return Infinity;\n        return maxParallelFileOps;\n    }\n    return 20;\n};\nconst getModuleContext = (config, context) => {\n    const configModuleContext = config.moduleContext;\n    if (typeof configModuleContext === 'function') {\n        return id => configModuleContext(id) ?? context;\n    }\n    if (configModuleContext) {\n        const contextByModuleId = Object.create(null);\n        for (const [key, moduleContext] of Object.entries(configModuleContext)) {\n            contextByModuleId[(0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(key)] = moduleContext;\n        }\n        return id => contextByModuleId[id] ?? context;\n    }\n    return () => context;\n};\nconst getTreeshake = (config) => {\n    const configTreeshake = config.treeshake;\n    if (configTreeshake === false) {\n        return false;\n    }\n    const configWithPreset = getOptionWithPreset(config.treeshake, treeshakePresets, 'treeshake', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_TREESHAKE, 'false, true, ');\n    return {\n        annotations: configWithPreset.annotations !== false,\n        correctVarValueBeforeDeclaration: configWithPreset.correctVarValueBeforeDeclaration === true,\n        manualPureFunctions: configWithPreset.manualPureFunctions ?? _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ARRAY,\n        moduleSideEffects: getHasModuleSideEffects(configWithPreset.moduleSideEffects),\n        propertyReadSideEffects: configWithPreset.propertyReadSideEffects === 'always'\n            ? 'always'\n            : configWithPreset.propertyReadSideEffects !== false,\n        tryCatchDeoptimization: configWithPreset.tryCatchDeoptimization !== false,\n        unknownGlobalSideEffects: configWithPreset.unknownGlobalSideEffects !== false\n    };\n};\nconst getHasModuleSideEffects = (moduleSideEffectsOption) => {\n    if (typeof moduleSideEffectsOption === 'boolean') {\n        return () => moduleSideEffectsOption;\n    }\n    if (moduleSideEffectsOption === 'no-external') {\n        return (_id, external) => !external;\n    }\n    if (typeof moduleSideEffectsOption === 'function') {\n        return (id, external) => id.startsWith('\\0') ? true : moduleSideEffectsOption(id, external) !== false;\n    }\n    if (Array.isArray(moduleSideEffectsOption)) {\n        const ids = new Set(moduleSideEffectsOption);\n        return id => ids.has(id);\n    }\n    if (moduleSideEffectsOption) {\n        (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('treeshake.moduleSideEffects', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_TREESHAKE_MODULESIDEEFFECTS, 'please use one of false, \"no-external\", a function or an array'));\n    }\n    return () => true;\n};\n\n// https://datatracker.ietf.org/doc/html/rfc2396\n// eslint-disable-next-line no-control-regex\nconst INVALID_CHAR_REGEX = /[\\u0000-\\u001F\"#$%&*+,:;<=>?[\\]^`{|}\\u007F]/g;\nconst DRIVE_LETTER_REGEX = /^[a-z]:/i;\nfunction sanitizeFileName(name) {\n    const match = DRIVE_LETTER_REGEX.exec(name);\n    const driveLetter = match ? match[0] : '';\n    // A `:` is only allowed as part of a windows drive letter (ex: C:\\foo)\n    // Otherwise, avoid them because they can refer to NTFS alternate data streams.\n    return driveLetter + name.slice(driveLetter.length).replace(INVALID_CHAR_REGEX, '_');\n}\n\nasync function normalizeOutputOptions(config, inputOptions, unsetInputOptions) {\n    // These are options that may trigger special warnings or behaviour later\n    // if the user did not select an explicit value\n    const unsetOptions = new Set(unsetInputOptions);\n    const compact = config.compact || false;\n    const format = getFormat(config);\n    const inlineDynamicImports = getInlineDynamicImports(config, inputOptions);\n    const preserveModules = getPreserveModules(config, inlineDynamicImports, inputOptions);\n    const file = getFile(config, preserveModules, inputOptions);\n    const generatedCode = getGeneratedCode(config);\n    const externalImportAttributes = getExternalImportAttributes(config, inputOptions);\n    const outputOptions = {\n        amd: getAmd(config),\n        assetFileNames: config.assetFileNames ?? 'assets/[name]-[hash][extname]',\n        banner: getAddon(config, 'banner'),\n        chunkFileNames: config.chunkFileNames ?? '[name]-[hash].js',\n        compact,\n        dir: getDir(config, file),\n        dynamicImportInCjs: config.dynamicImportInCjs ?? true,\n        entryFileNames: getEntryFileNames(config, unsetOptions),\n        esModule: config.esModule ?? 'if-default-prop',\n        experimentalMinChunkSize: config.experimentalMinChunkSize ?? 1,\n        exports: getExports(config, unsetOptions),\n        extend: config.extend || false,\n        externalImportAssertions: externalImportAttributes,\n        externalImportAttributes,\n        externalLiveBindings: config.externalLiveBindings ?? true,\n        file,\n        footer: getAddon(config, 'footer'),\n        format,\n        freeze: config.freeze ?? true,\n        generatedCode,\n        globals: config.globals || {},\n        hashCharacters: config.hashCharacters ?? 'base64',\n        hoistTransitiveImports: config.hoistTransitiveImports ?? true,\n        importAttributesKey: config.importAttributesKey ?? 'assert',\n        indent: getIndent(config, compact),\n        inlineDynamicImports,\n        interop: getInterop(config),\n        intro: getAddon(config, 'intro'),\n        manualChunks: getManualChunks(config, inlineDynamicImports, preserveModules),\n        minifyInternalExports: getMinifyInternalExports(config, format, compact),\n        name: config.name,\n        noConflict: config.noConflict || false,\n        outro: getAddon(config, 'outro'),\n        paths: config.paths || {},\n        plugins: await normalizePluginOption(config.plugins),\n        preserveModules,\n        preserveModulesRoot: getPreserveModulesRoot(config),\n        reexportProtoFromExternal: config.reexportProtoFromExternal ?? true,\n        sanitizeFileName: typeof config.sanitizeFileName === 'function'\n            ? config.sanitizeFileName\n            : config.sanitizeFileName === false\n                ? id => id\n                : sanitizeFileName,\n        sourcemap: config.sourcemap || false,\n        sourcemapBaseUrl: getSourcemapBaseUrl(config),\n        sourcemapDebugIds: config.sourcemapDebugIds || false,\n        sourcemapExcludeSources: config.sourcemapExcludeSources || false,\n        sourcemapFile: config.sourcemapFile,\n        sourcemapFileNames: getSourcemapFileNames(config, unsetOptions),\n        sourcemapIgnoreList: typeof config.sourcemapIgnoreList === 'function'\n            ? config.sourcemapIgnoreList\n            : config.sourcemapIgnoreList === false\n                ? () => false\n                : relativeSourcePath => relativeSourcePath.includes('node_modules'),\n        sourcemapPathTransform: config.sourcemapPathTransform,\n        strict: config.strict ?? true,\n        systemNullSetters: config.systemNullSetters ?? true,\n        validate: config.validate || false,\n        virtualDirname: config.virtualDirname || '_virtual'\n    };\n    warnUnknownOptions(config, Object.keys(outputOptions), 'output options', inputOptions.onLog);\n    return { options: outputOptions, unsetOptions };\n}\nconst getFile = (config, preserveModules, inputOptions) => {\n    const { file } = config;\n    if (typeof file === 'string') {\n        if (preserveModules) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.file', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_DIR, 'you must set \"output.dir\" instead of \"output.file\" when using the \"output.preserveModules\" option'));\n        }\n        if (!Array.isArray(inputOptions.input))\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.file', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_DIR, 'you must set \"output.dir\" instead of \"output.file\" when providing named inputs'));\n    }\n    return file;\n};\nconst getFormat = (config) => {\n    const configFormat = config.format;\n    switch (configFormat) {\n        case undefined:\n        case 'es':\n        case 'esm':\n        case 'module': {\n            return 'es';\n        }\n        case 'cjs':\n        case 'commonjs': {\n            return 'cjs';\n        }\n        case 'system':\n        case 'systemjs': {\n            return 'system';\n        }\n        case 'amd':\n        case 'iife':\n        case 'umd': {\n            return configFormat;\n        }\n        default: {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.format', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_FORMAT, `Valid values are \"amd\", \"cjs\", \"system\", \"es\", \"iife\" or \"umd\"`, configFormat));\n        }\n    }\n};\nconst getInlineDynamicImports = (config, inputOptions) => {\n    const inlineDynamicImports = config.inlineDynamicImports || false;\n    const { input } = inputOptions;\n    if (inlineDynamicImports && (Array.isArray(input) ? input : Object.keys(input)).length > 1) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.inlineDynamicImports', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_INLINEDYNAMICIMPORTS, 'multiple inputs are not supported when \"output.inlineDynamicImports\" is true'));\n    }\n    return inlineDynamicImports;\n};\nconst getPreserveModules = (config, inlineDynamicImports, inputOptions) => {\n    const preserveModules = config.preserveModules || false;\n    if (preserveModules) {\n        if (inlineDynamicImports) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.inlineDynamicImports', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_INLINEDYNAMICIMPORTS, `this option is not supported for \"output.preserveModules\"`));\n        }\n        if (inputOptions.preserveEntrySignatures === false) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('preserveEntrySignatures', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_PRESERVEENTRYSIGNATURES, 'setting this option to false is not supported for \"output.preserveModules\"'));\n        }\n    }\n    return preserveModules;\n};\nconst getPreserveModulesRoot = (config) => {\n    const { preserveModulesRoot } = config;\n    if (preserveModulesRoot === null || preserveModulesRoot === undefined) {\n        return undefined;\n    }\n    return (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(preserveModulesRoot);\n};\nconst getAmd = (config) => {\n    const mergedOption = {\n        autoId: false,\n        basePath: '',\n        define: 'define',\n        forceJsExtensionForImports: false,\n        ...config.amd\n    };\n    if ((mergedOption.autoId || mergedOption.basePath) && mergedOption.id) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.amd.id', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_AMD_ID, 'this option cannot be used together with \"output.amd.autoId\"/\"output.amd.basePath\"'));\n    }\n    if (mergedOption.basePath && !mergedOption.autoId) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.amd.basePath', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_AMD_BASEPATH, 'this option only works with \"output.amd.autoId\"'));\n    }\n    return mergedOption.autoId\n        ? {\n            autoId: true,\n            basePath: mergedOption.basePath,\n            define: mergedOption.define,\n            forceJsExtensionForImports: mergedOption.forceJsExtensionForImports\n        }\n        : {\n            autoId: false,\n            define: mergedOption.define,\n            forceJsExtensionForImports: mergedOption.forceJsExtensionForImports,\n            id: mergedOption.id\n        };\n};\nconst getAddon = (config, name) => {\n    const configAddon = config[name];\n    if (typeof configAddon === 'function') {\n        return configAddon;\n    }\n    return () => configAddon || '';\n};\nconst getDir = (config, file) => {\n    const { dir } = config;\n    if (typeof dir === 'string' && typeof file === 'string') {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.dir', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_DIR, 'you must set either \"output.file\" for a single-file build or \"output.dir\" when generating multiple chunks'));\n    }\n    return dir;\n};\nconst getEntryFileNames = (config, unsetOptions) => {\n    const configEntryFileNames = config.entryFileNames;\n    if (configEntryFileNames == null) {\n        unsetOptions.add('entryFileNames');\n    }\n    return configEntryFileNames ?? '[name].js';\n};\nfunction getExports(config, unsetOptions) {\n    const configExports = config.exports;\n    if (configExports == null) {\n        unsetOptions.add('exports');\n    }\n    else if (!['default', 'named', 'none', 'auto'].includes(configExports)) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidExportOptionValue)(configExports));\n    }\n    return configExports || 'auto';\n}\nconst getExternalImportAttributes = (config, inputOptions) => {\n    if (config.externalImportAssertions != undefined) {\n        (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.warnDeprecation)(`The \"output.externalImportAssertions\" option is deprecated. Use the \"output.externalImportAttributes\" option instead.`, _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_EXTERNALIMPORTATTRIBUTES, true, inputOptions);\n    }\n    return config.externalImportAttributes ?? config.externalImportAssertions ?? true;\n};\nconst getGeneratedCode = (config) => {\n    const configWithPreset = getOptionWithPreset(config.generatedCode, generatedCodePresets, 'output.generatedCode', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_GENERATEDCODE, '');\n    return {\n        arrowFunctions: configWithPreset.arrowFunctions === true,\n        constBindings: configWithPreset.constBindings === true,\n        objectShorthand: configWithPreset.objectShorthand === true,\n        reservedNamesAsProps: configWithPreset.reservedNamesAsProps !== false,\n        symbols: configWithPreset.symbols === true\n    };\n};\nconst getIndent = (config, compact) => {\n    if (compact) {\n        return '';\n    }\n    const configIndent = config.indent;\n    return configIndent === false ? '' : (configIndent ?? true);\n};\nconst ALLOWED_INTEROP_TYPES = new Set([\n    'compat',\n    'auto',\n    'esModule',\n    'default',\n    'defaultOnly'\n]);\nconst getInterop = (config) => {\n    const configInterop = config.interop;\n    if (typeof configInterop === 'function') {\n        const interopPerId = Object.create(null);\n        let defaultInterop = null;\n        return id => id === null\n            ? defaultInterop || validateInterop((defaultInterop = configInterop(id)))\n            : id in interopPerId\n                ? interopPerId[id]\n                : validateInterop((interopPerId[id] = configInterop(id)));\n    }\n    return configInterop === undefined ? () => 'default' : () => validateInterop(configInterop);\n};\nconst validateInterop = (interop) => {\n    if (!ALLOWED_INTEROP_TYPES.has(interop)) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.interop', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_INTEROP, `use one of ${Array.from(ALLOWED_INTEROP_TYPES, value => JSON.stringify(value)).join(', ')}`, interop));\n    }\n    return interop;\n};\nconst getManualChunks = (config, inlineDynamicImports, preserveModules) => {\n    const configManualChunks = config.manualChunks;\n    if (configManualChunks) {\n        if (inlineDynamicImports) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.manualChunks', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_MANUALCHUNKS, 'this option is not supported for \"output.inlineDynamicImports\"'));\n        }\n        if (preserveModules) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.manualChunks', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_MANUALCHUNKS, 'this option is not supported for \"output.preserveModules\"'));\n        }\n    }\n    return configManualChunks || {};\n};\nconst getMinifyInternalExports = (config, format, compact) => config.minifyInternalExports ?? (compact || format === 'es' || format === 'system');\nconst getSourcemapFileNames = (config, unsetOptions) => {\n    const configSourcemapFileNames = config.sourcemapFileNames;\n    if (configSourcemapFileNames == null) {\n        unsetOptions.add('sourcemapFileNames');\n    }\n    return configSourcemapFileNames;\n};\nconst getSourcemapBaseUrl = (config) => {\n    const { sourcemapBaseUrl } = config;\n    if (sourcemapBaseUrl) {\n        if ((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.isValidUrl)(sourcemapBaseUrl)) {\n            return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.addTrailingSlashIfMissed)(sourcemapBaseUrl);\n        }\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('output.sourcemapBaseUrl', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_SOURCEMAPBASEURL, `must be a valid URL, received ${JSON.stringify(sourcemapBaseUrl)}`));\n    }\n};\n\n// @ts-expect-error TS2540: the polyfill of `asyncDispose`.\nSymbol.asyncDispose ??= Symbol('Symbol.asyncDispose');\nfunction rollup(rawInputOptions) {\n    return rollupInternal(rawInputOptions, null);\n}\nasync function rollupInternal(rawInputOptions, watcher) {\n    const { options: inputOptions, unsetOptions: unsetInputOptions } = await getInputOptions(rawInputOptions, watcher !== null);\n    initialiseTimers(inputOptions);\n    await initWasm();\n    const graph = new Graph(inputOptions, watcher);\n    // remove the cache object from the memory after graph creation (cache is not used anymore)\n    const useCache = rawInputOptions.cache !== false;\n    if (rawInputOptions.cache) {\n        inputOptions.cache = undefined;\n        rawInputOptions.cache = undefined;\n    }\n    timeStart('BUILD', 1);\n    await catchUnfinishedHookActions(graph.pluginDriver, async () => {\n        try {\n            timeStart('initialize', 2);\n            await graph.pluginDriver.hookParallel('buildStart', [inputOptions]);\n            timeEnd('initialize', 2);\n            await graph.build();\n        }\n        catch (error_) {\n            const watchFiles = Object.keys(graph.watchFiles);\n            if (watchFiles.length > 0) {\n                error_.watchFiles = watchFiles;\n            }\n            await graph.pluginDriver.hookParallel('buildEnd', [error_]);\n            await graph.pluginDriver.hookParallel('closeBundle', []);\n            throw error_;\n        }\n        await graph.pluginDriver.hookParallel('buildEnd', []);\n    });\n    timeEnd('BUILD', 1);\n    const result = {\n        cache: useCache ? graph.getCache() : undefined,\n        async close() {\n            if (result.closed)\n                return;\n            result.closed = true;\n            await graph.pluginDriver.hookParallel('closeBundle', []);\n        },\n        closed: false,\n        async [Symbol.asyncDispose]() {\n            await this.close();\n        },\n        async generate(rawOutputOptions) {\n            if (result.closed)\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAlreadyClosed)());\n            return handleGenerateWrite(false, inputOptions, unsetInputOptions, rawOutputOptions, graph);\n        },\n        get watchFiles() {\n            return Object.keys(graph.watchFiles);\n        },\n        async write(rawOutputOptions) {\n            if (result.closed)\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logAlreadyClosed)());\n            return handleGenerateWrite(true, inputOptions, unsetInputOptions, rawOutputOptions, graph);\n        }\n    };\n    if (inputOptions.perf)\n        result.getTimings = getTimings;\n    return result;\n}\nasync function getInputOptions(initialInputOptions, watchMode) {\n    if (!initialInputOptions) {\n        throw new Error('You must supply an options object to rollup');\n    }\n    const processedInputOptions = await getProcessedInputOptions(initialInputOptions, watchMode);\n    const { options, unsetOptions } = await normalizeInputOptions(processedInputOptions, watchMode);\n    normalizePlugins(options.plugins, ANONYMOUS_PLUGIN_PREFIX);\n    return { options, unsetOptions };\n}\nasync function getProcessedInputOptions(inputOptions, watchMode) {\n    const plugins = getSortedValidatedPlugins('options', await normalizePluginOption(inputOptions.plugins));\n    const logLevel = inputOptions.logLevel || _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_INFO;\n    const logger = getLogger(plugins, getOnLog(inputOptions, logLevel), watchMode, logLevel);\n    for (const plugin of plugins) {\n        const { name, options } = plugin;\n        const handler = 'handler' in options ? options.handler : options;\n        const processedOptions = await handler.call({\n            debug: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_DEBUG, 'PLUGIN_LOG', logger, name, logLevel),\n            error: (error_) => (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logPluginError)(normalizeLog(error_), name, { hook: 'onLog' })),\n            info: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_INFO, 'PLUGIN_LOG', logger, name, logLevel),\n            meta: { rollupVersion: version, watchMode },\n            warn: getLogHandler(_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_WARN, 'PLUGIN_WARNING', logger, name, logLevel)\n        }, inputOptions);\n        if (processedOptions) {\n            inputOptions = processedOptions;\n        }\n    }\n    return inputOptions;\n}\nfunction normalizePlugins(plugins, anonymousPrefix) {\n    for (const [index, plugin] of plugins.entries()) {\n        if (!plugin.name) {\n            plugin.name = `${anonymousPrefix}${index + 1}`;\n        }\n    }\n}\nasync function handleGenerateWrite(isWrite, inputOptions, unsetInputOptions, rawOutputOptions, graph) {\n    const { options: outputOptions, outputPluginDriver, unsetOptions } = await getOutputOptionsAndPluginDriver(rawOutputOptions, graph.pluginDriver, inputOptions, unsetInputOptions);\n    return catchUnfinishedHookActions(outputPluginDriver, async () => {\n        const bundle = new Bundle(outputOptions, unsetOptions, inputOptions, outputPluginDriver, graph);\n        const generated = await bundle.generate(isWrite);\n        if (isWrite) {\n            timeStart('WRITE', 1);\n            if (!outputOptions.dir && !outputOptions.file) {\n                return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logMissingFileOrDirOption)());\n            }\n            await Promise.all(Object.values(generated).map(chunk => graph.fileOperationQueue.run(() => writeOutputFile(chunk, outputOptions))));\n            await outputPluginDriver.hookParallel('writeBundle', [outputOptions, generated]);\n            timeEnd('WRITE', 1);\n        }\n        return createOutput(generated);\n    });\n}\nasync function getOutputOptionsAndPluginDriver(rawOutputOptions, inputPluginDriver, inputOptions, unsetInputOptions) {\n    if (!rawOutputOptions) {\n        throw new Error('You must supply an options object');\n    }\n    const rawPlugins = await normalizePluginOption(rawOutputOptions.plugins);\n    normalizePlugins(rawPlugins, ANONYMOUS_OUTPUT_PLUGIN_PREFIX);\n    const outputPluginDriver = inputPluginDriver.createOutputPluginDriver(rawPlugins);\n    return {\n        ...(await getOutputOptions(inputOptions, unsetInputOptions, rawOutputOptions, outputPluginDriver)),\n        outputPluginDriver\n    };\n}\nfunction getOutputOptions(inputOptions, unsetInputOptions, rawOutputOptions, outputPluginDriver) {\n    return normalizeOutputOptions(outputPluginDriver.hookReduceArg0Sync('outputOptions', [rawOutputOptions], (outputOptions, result) => result || outputOptions, pluginContext => {\n        const emitError = () => pluginContext.error((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logCannotEmitFromOptionsHook)());\n        return {\n            ...pluginContext,\n            emitFile: emitError,\n            setAssetSource: emitError\n        };\n    }), inputOptions, unsetInputOptions);\n}\nfunction createOutput(outputBundle) {\n    return {\n        output: Object.values(outputBundle).filter(outputFile => Object.keys(outputFile).length > 0).sort((outputFileA, outputFileB) => getSortingFileType(outputFileA) - getSortingFileType(outputFileB))\n    };\n}\nvar SortingFileType;\n(function (SortingFileType) {\n    SortingFileType[SortingFileType[\"ENTRY_CHUNK\"] = 0] = \"ENTRY_CHUNK\";\n    SortingFileType[SortingFileType[\"SECONDARY_CHUNK\"] = 1] = \"SECONDARY_CHUNK\";\n    SortingFileType[SortingFileType[\"ASSET\"] = 2] = \"ASSET\";\n})(SortingFileType || (SortingFileType = {}));\nfunction getSortingFileType(file) {\n    if (file.type === 'asset') {\n        return SortingFileType.ASSET;\n    }\n    if (file.isEntry) {\n        return SortingFileType.ENTRY_CHUNK;\n    }\n    return SortingFileType.SECONDARY_CHUNK;\n}\nasync function writeOutputFile(outputFile, outputOptions) {\n    const fileName = (0,node_path__WEBPACK_IMPORTED_MODULE_1__.resolve)(outputOptions.dir || (0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(outputOptions.file), outputFile.fileName);\n    // 'recursive: true' does not throw if the folder structure, or parts of it, already exist\n    await (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_6__.mkdir)((0,node_path__WEBPACK_IMPORTED_MODULE_1__.dirname)(fileName), { recursive: true });\n    return (0,node_fs_promises__WEBPACK_IMPORTED_MODULE_6__.writeFile)(fileName, outputFile.type === 'asset' ? outputFile.source : outputFile.code);\n}\n/**\n * Auxiliary function for defining rollup configuration\n * Mainly to facilitate IDE code prompts, after all, export default does not\n * prompt, even if you add @type annotations, it is not accurate\n * @param options\n */\nfunction defineConfig(options) {\n    return options;\n}\n\nconst {\n  env = {},\n  argv = [],\n  platform = \"\",\n} = typeof process === \"undefined\" ? {} : process;\n\nconst isDisabled = \"NO_COLOR\" in env || argv.includes(\"--no-color\");\nconst isForced = \"FORCE_COLOR\" in env || argv.includes(\"--color\");\nconst isWindows = platform === \"win32\";\nconst isDumbTerminal = env.TERM === \"dumb\";\n\nconst isCompatibleTerminal =\n  Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'tty'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) && Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'tty'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) && Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'tty'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(1) && env.TERM && !isDumbTerminal;\n\nconst isCI =\n  \"CI\" in env &&\n  (\"GITHUB_ACTIONS\" in env || \"GITLAB_CI\" in env || \"CIRCLECI\" in env);\n\nconst isColorSupported =\n  !isDisabled &&\n  (isForced || (isWindows && !isDumbTerminal) || isCompatibleTerminal || isCI);\n\nconst replaceClose = (\n  index,\n  string,\n  close,\n  replace,\n  head = string.substring(0, index) + replace,\n  tail = string.substring(index + close.length),\n  next = tail.indexOf(close)\n) => head + (next < 0 ? tail : replaceClose(next, tail, close, replace));\n\nconst clearBleed = (index, string, open, close, replace) =>\n  index < 0\n    ? open + string + close\n    : open + replaceClose(index, string, close, replace) + close;\n\nconst filterEmpty =\n  (open, close, replace = open, at = open.length + 1) =>\n  (string) =>\n    string || !(string === \"\" || string === undefined)\n      ? clearBleed(\n          (\"\" + string).indexOf(close, at),\n          string,\n          open,\n          close,\n          replace\n        )\n      : \"\";\n\nconst init = (open, close, replace) =>\n  filterEmpty(`\\x1b[${open}m`, `\\x1b[${close}m`, replace);\n\nconst colors = {\n  reset: init(0, 0),\n  bold: init(1, 22, \"\\x1b[22m\\x1b[1m\"),\n  dim: init(2, 22, \"\\x1b[22m\\x1b[2m\"),\n  italic: init(3, 23),\n  underline: init(4, 24),\n  inverse: init(7, 27),\n  hidden: init(8, 28),\n  strikethrough: init(9, 29),\n  black: init(30, 39),\n  red: init(31, 39),\n  green: init(32, 39),\n  yellow: init(33, 39),\n  blue: init(34, 39),\n  magenta: init(35, 39),\n  cyan: init(36, 39),\n  white: init(37, 39),\n  gray: init(90, 39),\n  bgBlack: init(40, 49),\n  bgRed: init(41, 49),\n  bgGreen: init(42, 49),\n  bgYellow: init(43, 49),\n  bgBlue: init(44, 49),\n  bgMagenta: init(45, 49),\n  bgCyan: init(46, 49),\n  bgWhite: init(47, 49),\n  blackBright: init(90, 39),\n  redBright: init(91, 39),\n  greenBright: init(92, 39),\n  yellowBright: init(93, 39),\n  blueBright: init(94, 39),\n  magentaBright: init(95, 39),\n  cyanBright: init(96, 39),\n  whiteBright: init(97, 39),\n  bgBlackBright: init(100, 49),\n  bgRedBright: init(101, 49),\n  bgGreenBright: init(102, 49),\n  bgYellowBright: init(103, 49),\n  bgBlueBright: init(104, 49),\n  bgMagentaBright: init(105, 49),\n  bgCyanBright: init(106, 49),\n  bgWhiteBright: init(107, 49),\n};\n\nconst createColors = ({ useColor = isColorSupported } = {}) =>\n  useColor\n    ? colors\n    : Object.keys(colors).reduce(\n        (colors, key) => ({ ...colors, [key]: String }),\n        {}\n      );\n\ncreateColors();\n\n// @see https://no-color.org\n// @see https://www.npmjs.com/package/chalk\nconst { bold, cyan, dim, gray, green, red, underline, yellow } = createColors({\n    useColor: node_process__WEBPACK_IMPORTED_MODULE_4__.env.FORCE_COLOR !== '0' && !node_process__WEBPACK_IMPORTED_MODULE_4__.env.NO_COLOR\n});\n\n// log to stderr to keep `rollup main.js > bundle.js` from breaking\nconst stderr = (...parameters) => node_process__WEBPACK_IMPORTED_MODULE_4__.stderr.write(`${parameters.join('')}\\n`);\nfunction handleError(error, recover = false) {\n    const name = error.name || error.cause?.name;\n    const nameSection = name ? `${name}: ` : '';\n    const pluginSection = error.plugin ? `(plugin ${error.plugin}) ` : '';\n    const message = `${pluginSection}${nameSection}${error.message}`;\n    const outputLines = [bold(red(`[!] ${bold(message.toString())}`))];\n    if (error.url) {\n        outputLines.push(cyan(error.url));\n    }\n    if (error.loc) {\n        outputLines.push(`${(0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.relativeId)((error.loc.file || error.id))} (${error.loc.line}:${error.loc.column})`);\n    }\n    else if (error.id) {\n        outputLines.push((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.relativeId)(error.id));\n    }\n    if (error.frame) {\n        outputLines.push(dim(error.frame));\n    }\n    if (error.stack) {\n        outputLines.push(dim(error.stack?.replace(`${nameSection}${error.message}\\n`, '')));\n    }\n    // ES2022: Error.prototype.cause is optional\n    if (error.cause) {\n        let cause = error.cause;\n        const causeErrorLines = [];\n        let indent = '';\n        while (cause) {\n            indent += '  ';\n            const message = cause.stack || cause;\n            causeErrorLines.push(...`[cause] ${message}`.split('\\n').map(line => indent + line));\n            cause = cause.cause;\n        }\n        outputLines.push(dim(causeErrorLines.join('\\n')));\n    }\n    outputLines.push('', '');\n    stderr(outputLines.join('\\n'));\n    if (!recover)\n        node_process__WEBPACK_IMPORTED_MODULE_4__.exit(1);\n}\n\nconst commandAliases = {\n    c: 'config',\n    d: 'dir',\n    e: 'external',\n    f: 'format',\n    g: 'globals',\n    h: 'help',\n    i: 'input',\n    m: 'sourcemap',\n    n: 'name',\n    o: 'file',\n    p: 'plugin',\n    v: 'version',\n    w: 'watch'\n};\nconst EMPTY_COMMAND_OPTIONS = { external: [], globals: undefined };\nasync function mergeOptions(config, watchMode, rawCommandOptions = EMPTY_COMMAND_OPTIONS, printLog) {\n    const command = getCommandOptions(rawCommandOptions);\n    const plugins = await normalizePluginOption(config.plugins);\n    const logLevel = config.logLevel || _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.LOGLEVEL_INFO;\n    const onLog = getOnLog(config, logLevel, printLog);\n    const log = getLogger(plugins, onLog, watchMode, logLevel);\n    const inputOptions = mergeInputOptions(config, command, plugins, log, onLog);\n    if (command.output) {\n        Object.assign(command, command.output);\n    }\n    const outputOptionsArray = ensureArray(config.output);\n    if (outputOptionsArray.length === 0)\n        outputOptionsArray.push({});\n    const outputOptions = await Promise.all(outputOptionsArray.map(singleOutputOptions => mergeOutputOptions(singleOutputOptions, command, log)));\n    warnUnknownOptions(command, [\n        ...Object.keys(inputOptions),\n        ...Object.keys(outputOptions[0]).filter(option => option !== 'sourcemapIgnoreList' && option !== 'sourcemapPathTransform'),\n        ...Object.keys(commandAliases),\n        'bundleConfigAsCjs',\n        'config',\n        'configPlugin',\n        'environment',\n        'failAfterWarnings',\n        'filterLogs',\n        'forceExit',\n        'plugin',\n        'silent',\n        'stdin',\n        'waitForBundleInput'\n    ], 'CLI flags', log, /^_$|output$|config/);\n    inputOptions.output = outputOptions;\n    return inputOptions;\n}\nfunction getCommandOptions(rawCommandOptions) {\n    const external = rawCommandOptions.external && typeof rawCommandOptions.external === 'string'\n        ? rawCommandOptions.external.split(',')\n        : [];\n    return {\n        ...rawCommandOptions,\n        external,\n        globals: typeof rawCommandOptions.globals === 'string'\n            ? rawCommandOptions.globals.split(',').reduce((globals, globalDefinition) => {\n                const [id, variableName] = globalDefinition.split(':');\n                globals[id] = variableName;\n                if (!external.includes(id)) {\n                    external.push(id);\n                }\n                return globals;\n            }, Object.create(null))\n            : undefined\n    };\n}\nfunction mergeInputOptions(config, overrides, plugins, log, onLog) {\n    const getOption = (name) => overrides[name] ?? config[name];\n    const inputOptions = {\n        cache: config.cache,\n        context: getOption('context'),\n        experimentalCacheExpiry: getOption('experimentalCacheExpiry'),\n        experimentalLogSideEffects: getOption('experimentalLogSideEffects'),\n        external: getExternal(config, overrides),\n        input: getOption('input') || [],\n        jsx: getObjectOption(config, overrides, 'jsx', objectifyOptionWithPresets(jsxPresets, 'jsx', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_JSX, 'false, ')),\n        logLevel: getOption('logLevel'),\n        makeAbsoluteExternalsRelative: getOption('makeAbsoluteExternalsRelative'),\n        maxParallelFileOps: getOption('maxParallelFileOps'),\n        moduleContext: getOption('moduleContext'),\n        onLog,\n        onwarn: undefined,\n        perf: getOption('perf'),\n        plugins,\n        preserveEntrySignatures: getOption('preserveEntrySignatures'),\n        preserveSymlinks: getOption('preserveSymlinks'),\n        shimMissingExports: getOption('shimMissingExports'),\n        strictDeprecations: getOption('strictDeprecations'),\n        treeshake: getObjectOption(config, overrides, 'treeshake', objectifyOptionWithPresets(treeshakePresets, 'treeshake', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_TREESHAKE, 'false, true, ')),\n        watch: getWatch(config, overrides)\n    };\n    warnUnknownOptions(config, Object.keys(inputOptions), 'input options', log, /^output$/);\n    return inputOptions;\n}\nconst getExternal = (config, overrides) => {\n    const configExternal = config.external;\n    return typeof configExternal === 'function'\n        ? (source, importer, isResolved) => configExternal(source, importer, isResolved) || overrides.external.includes(source)\n        : [...ensureArray(configExternal), ...overrides.external];\n};\nconst getObjectOption = (config, overrides, name, objectifyValue = objectifyOption) => {\n    const commandOption = normalizeObjectOptionValue(overrides[name], objectifyValue);\n    const configOption = normalizeObjectOptionValue(config[name], objectifyValue);\n    if (commandOption !== undefined) {\n        return commandOption && { ...configOption, ...commandOption };\n    }\n    return configOption;\n};\nconst getWatch = (config, overrides) => config.watch !== false && getObjectOption(config, overrides, 'watch');\nconst normalizeObjectOptionValue = (optionValue, objectifyValue) => {\n    if (!optionValue) {\n        return optionValue;\n    }\n    if (Array.isArray(optionValue)) {\n        return optionValue.reduce((result, value) => value && result && { ...result, ...objectifyValue(value) }, {});\n    }\n    return objectifyValue(optionValue);\n};\nasync function mergeOutputOptions(config, overrides, log) {\n    const getOption = (name) => overrides[name] ?? config[name];\n    const outputOptions = {\n        amd: getObjectOption(config, overrides, 'amd'),\n        assetFileNames: getOption('assetFileNames'),\n        banner: getOption('banner'),\n        chunkFileNames: getOption('chunkFileNames'),\n        compact: getOption('compact'),\n        dir: getOption('dir'),\n        dynamicImportInCjs: getOption('dynamicImportInCjs'),\n        entryFileNames: getOption('entryFileNames'),\n        esModule: getOption('esModule'),\n        experimentalMinChunkSize: getOption('experimentalMinChunkSize'),\n        exports: getOption('exports'),\n        extend: getOption('extend'),\n        externalImportAssertions: getOption('externalImportAssertions'),\n        externalImportAttributes: getOption('externalImportAttributes'),\n        externalLiveBindings: getOption('externalLiveBindings'),\n        file: getOption('file'),\n        footer: getOption('footer'),\n        format: getOption('format'),\n        freeze: getOption('freeze'),\n        generatedCode: getObjectOption(config, overrides, 'generatedCode', objectifyOptionWithPresets(generatedCodePresets, 'output.generatedCode', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_OUTPUT_GENERATEDCODE, '')),\n        globals: getOption('globals'),\n        hashCharacters: getOption('hashCharacters'),\n        hoistTransitiveImports: getOption('hoistTransitiveImports'),\n        importAttributesKey: getOption('importAttributesKey'),\n        indent: getOption('indent'),\n        inlineDynamicImports: getOption('inlineDynamicImports'),\n        interop: getOption('interop'),\n        intro: getOption('intro'),\n        manualChunks: getOption('manualChunks'),\n        minifyInternalExports: getOption('minifyInternalExports'),\n        name: getOption('name'),\n        noConflict: getOption('noConflict'),\n        outro: getOption('outro'),\n        paths: getOption('paths'),\n        plugins: await normalizePluginOption(config.plugins),\n        preserveModules: getOption('preserveModules'),\n        preserveModulesRoot: getOption('preserveModulesRoot'),\n        reexportProtoFromExternal: getOption('reexportProtoFromExternal'),\n        sanitizeFileName: getOption('sanitizeFileName'),\n        sourcemap: getOption('sourcemap'),\n        sourcemapBaseUrl: getOption('sourcemapBaseUrl'),\n        sourcemapDebugIds: getOption('sourcemapDebugIds'),\n        sourcemapExcludeSources: getOption('sourcemapExcludeSources'),\n        sourcemapFile: getOption('sourcemapFile'),\n        sourcemapFileNames: getOption('sourcemapFileNames'),\n        sourcemapIgnoreList: getOption('sourcemapIgnoreList'),\n        sourcemapPathTransform: getOption('sourcemapPathTransform'),\n        strict: getOption('strict'),\n        systemNullSetters: getOption('systemNullSetters'),\n        validate: getOption('validate'),\n        virtualDirname: getOption('virtualDirname')\n    };\n    warnUnknownOptions(config, Object.keys(outputOptions), 'output options', log);\n    return outputOptions;\n}\n\nclass WatchEmitter {\n    constructor() {\n        this.currentHandlers = Object.create(null);\n        this.persistentHandlers = Object.create(null);\n    }\n    // Will be overwritten by Rollup\n    async close() { }\n    emit(event, ...parameters) {\n        return Promise.all([...this.getCurrentHandlers(event), ...this.getPersistentHandlers(event)].map(handler => handler(...parameters)));\n    }\n    off(event, listener) {\n        const listeners = this.persistentHandlers[event];\n        if (listeners) {\n            // A hack stolen from \"mitt\": \">>> 0\" does not change numbers >= 0, but -1\n            // (which would remove the last array element if used unchanged) is turned\n            // into max_int, which is outside the array and does not change anything.\n            listeners.splice(listeners.indexOf(listener) >>> 0, 1);\n        }\n        return this;\n    }\n    on(event, listener) {\n        this.getPersistentHandlers(event).push(listener);\n        return this;\n    }\n    onCurrentRun(event, listener) {\n        this.getCurrentHandlers(event).push(listener);\n        return this;\n    }\n    once(event, listener) {\n        const selfRemovingListener = (...parameters) => {\n            this.off(event, selfRemovingListener);\n            return listener(...parameters);\n        };\n        this.on(event, selfRemovingListener);\n        return this;\n    }\n    removeAllListeners() {\n        this.removeListenersForCurrentRun();\n        this.persistentHandlers = Object.create(null);\n        return this;\n    }\n    removeListenersForCurrentRun() {\n        this.currentHandlers = Object.create(null);\n        return this;\n    }\n    getCurrentHandlers(event) {\n        return this.currentHandlers[event] || (this.currentHandlers[event] = []);\n    }\n    getPersistentHandlers(event) {\n        return this.persistentHandlers[event] || (this.persistentHandlers[event] = []);\n    }\n}\n\nlet fsEvents;\nlet fsEventsImportError;\nasync function loadFsEvents() {\n    try {\n        ({ default: fsEvents } = await Promise.resolve().then(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fsevents'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }));\n    }\n    catch (error) {\n        fsEventsImportError = error;\n    }\n}\n// A call to this function will be injected into the chokidar code\nfunction getFsEvents() {\n    if (fsEventsImportError)\n        throw fsEventsImportError;\n    return fsEvents;\n}\n\nconst fseventsImporter = /*#__PURE__*/Object.defineProperty({\n  __proto__: null,\n  getFsEvents,\n  loadFsEvents\n}, Symbol.toStringTag, { value: 'Module' });\n\nfunction watch(configs) {\n    const emitter = new WatchEmitter();\n    watchInternal(configs, emitter).catch(error => {\n        handleError(error);\n    });\n    return emitter;\n}\nasync function watchInternal(configs, emitter) {\n    const optionsList = await Promise.all(ensureArray(configs).map(config => mergeOptions(config, true)));\n    const watchOptionsList = optionsList.filter(config => config.watch !== false);\n    if (watchOptionsList.length === 0) {\n        return (0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.error)((0,_parseAst_js__WEBPACK_IMPORTED_MODULE_0__.logInvalidOption)('watch', _parseAst_js__WEBPACK_IMPORTED_MODULE_0__.URL_WATCH, 'there must be at least one config where \"watch\" is not set to \"false\"'));\n    }\n    await loadFsEvents();\n    const { Watcher } = await __webpack_require__.e(/*! import() */ \"node_modules_rollup_dist_es_shared_watch_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./watch.js */ \"./node_modules/rollup/dist/es/shared/watch.js\"));\n    new Watcher(watchOptionsList, emitter);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rollup/dist/es/shared/node-entry.js\n");

/***/ })

}]);